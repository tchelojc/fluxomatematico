import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from PIL import Image, ImageDraw, ImageFont
import io
import base64
from scipy.integrate import solve_ivp
import matplotlib.patches as patches
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.colors as mcolors
import sympy as sp
import networkx as nx
import plotly.express as px
import math
import time

# Tente importar Qiskit da maneira correta
try:
    from qiskit import QuantumCircuit, execute
    from qiskit.providers.aer import Aer
    from qiskit.quantum_info import Statevector
    from qiskit.visualization import plot_bloch_multivector
    QISKIT_AVAILABLE = True
except ImportError:
    QISKIT_AVAILABLE = False
    st.warning("Qiskit n√£o est√° dispon√≠vel. Algumas funcionalidades qu√¢nticas ser√£o simuladas.")

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="COSMIC FLOW UNIVERSE - A Jornada do Nada ao Tudo",
    page_icon="üåå",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS personalizado
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #000000 0%, #0a0a2a 25%, #1a1a4a 50%, #2d2d7a 75%, #4a4aaa 100%);
        color: #ffffff;
        font-family: 'Courier New', monospace;
    }
    .stButton>button {
        background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 12px 28px;
        font-weight: bold;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        transform: scale(1.05);
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.8);
    }
    .css-1d391kg {
        background-color: rgba(0,0,0,0.9);
        border-right: 2px solid #667eea;
    }
    h1, h2, h3, h4, h5, h6 {
        color: #4ecdc4 !important;
        text-shadow: 0 0 10px rgba(78, 205, 196, 0.7);
    }
    .philosophy-text {
        background: rgba(0,0,0,0.7);
        padding: 20px;
        border-radius: 15px;
        border-left: 4px solid #ff6b6b;
        margin: 10px 0;
        font-size: 18px;
        line-height: 1.6;
    }
    .quote-box {
        background: linear-gradient(135deg, rgba(78, 205, 196, 0.2) 0%, rgba(255, 107, 107, 0.2) 100%);
        padding: 20px;
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin: 15px 0;
        font-style: italic;
    }
    .metric-box {
        background: rgba(15, 23, 42, 0.8);
        padding: 15px;
        border-radius: 10px;
        border: 1px solid #667eea;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal com glifos
st.title("üåå COSMIC FLOW UNIVERSE")
st.markdown("""
### üåÄ A Jornada do Nada ao Tudo ‚Ä¢ Fluxo Matem√°tico Universal ‚Ä¢ Deus como Equil√≠brio C√≥smico
""")

# Sidebar com navega√ß√£o expandida
st.sidebar.title("‚ö° Navega√ß√£o C√≥smica")
section = st.sidebar.selectbox("Selecione a Dimens√£o:", [
    "üè† Vis√£o Geral C√≥smica",
    "üî¢ Fluxo Matem√°tico Sagrado", 
    "üå† Sinal Wow! Decodifica√ß√£o Profunda",
    "ü™ê Simula√ß√£o do Sistema Solar Qu√¢ntico",
    "‚öõÔ∏è Consci√™ncia Qu√¢ntica e Emaranhamento",
    "üåÄ Esfera de Buga - Geometria Divina",
    "‚ú® Mandala da Alma Universal",
    "üìú Filosofia do Fluxo (Deus, Tesla, Espinosa)",
    "‚ö° Tesla 3-6-9 e Energia Livre",
    "üåå Jornada do Nada ao Tudo",
    "üîÆ Futuro da Consci√™ncia Humana",
    "üî± Iconografia do Fluxo Divino",
    "üå† Consci√™ncia Final: Louco e G√™nio",
    "üßÆ C√°lculos do Fluxo Matem√°tico",
    "‚öõÔ∏è Acelerador de Part√≠culas"  # NOVO M√ìDULO ADICIONADO
])

# =============================================================================
# FUN√á√ïES AUXILIARES PARA C√ÅLCULOS MATEM√ÅTICOS E F√çSICOS
# =============================================================================

def reduzir_teosoficamente(numero):
    """Reduz um n√∫mero teosoficamente at√© um √∫nico d√≠gito"""
    if numero == 0:
        return 0
    
    numero = abs(numero)
    while numero > 9:
        numero = sum(int(digito) for digito in str(numero))
    return numero

def fluxo_soma(a, b):
    """Soma no Fluxo Matem√°tico"""
    return reduzir_teosoficamente(a + b)

def fluxo_multiplicacao(a, b):
    """Multiplica√ß√£o no Fluxo Matem√°tico"""
    return reduzir_teosoficamente(a * b)

def fluxo_potencia(a, n):
    """Potencia√ß√£o no Fluxo Matem√°tico"""
    return reduzir_teosoficamente(a ** n)

def fluxo_trigonometria(angulo):
    """Trigonometria no Fluxo Matem√°tico"""
    import math
    rad = math.radians(angulo)
    s = math.sin(rad)
    c = math.cos(rad)
    t = math.tan(rad)
    return (reduzir_teosoficamente(abs(int(s*100))), 
            reduzir_teosoficamente(abs(int(c*100))), 
            reduzir_teosoficamente(abs(int(t*100))))

def calcular_porcentagem_diferenca(valor_classico, valor_fluxo):
    """Calcula a porcentagem de diferen√ßa entre os valores"""
    if valor_classico == 0:
        return 0
    return abs((valor_fluxo - valor_classico) / valor_classico) * 100

def calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual):
    """Calcula a corre√ß√£o baseada na gravidade local"""
    # Gravidade da Terra = 9.8 m/s¬≤
    fator_correcao = gravidade_local / 9.8
    return diferenca_percentual * fator_correcao

def gerar_sequencia_396(tamanho):
    """Gera sequ√™ncia no padr√£o 3-9-6"""
    sequencia = []
    for i in range(tamanho):
        if i % 3 == 0:
            sequencia.append(3)
        elif i % 3 == 1:
            sequencia.append(9)
        else:
            sequencia.append(6)
    return sequencia

def gerar_sequencia_binaria(tamanho):
    """Gera sequ√™ncia no padr√£o bin√°rio universal"""
    sequencia = []
    padrao = [1, 2, 3, 4, 5, 9, 7, 8, 6]  # Padr√£o completo
    for i in range(tamanho):
        sequencia.append(padrao[i % len(padrao)])
    return sequencia

def gerar_sequencia_multiplicacao_3(tamanho):
    """Gera sequ√™ncia multiplicando por 3"""
    sequencia = [1]
    for i in range(1, tamanho):
        sequencia.append(reduzir_teosoficamente(sequencia[-1] * 3))
    return sequencia

# =============================================================================
# FUN√á√ïES PARA F√ìRMULAS F√çSICAS COMPLETAS
# =============================================================================

def calcular_formula_emc2():
    st.subheader("‚ö° E=mc¬≤ - Energia e Massa")
    
    col_emc1, col_emc2 = st.columns(2)
    
    with col_emc1:
        massa = st.number_input("Massa (kg):", value=1.0, format="%.6f", key="massa_emc2")
        velocidade_luz = st.number_input("Velocidade da luz (m/s):", value=299792458.0, format="%.1f", key="c_emc2")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_emc2")
    
    with col_emc2:
        if st.button("Calcular E=mc¬≤"):
            # C√°lculo cl√°ssico
            energia_classica = massa * velocidade_luz**2
            
            # C√°lculo no fluxo
            reducao_massa = reduzir_teosoficamente(massa)
            reducao_c = reduzir_teosoficamente(velocidade_luz)
            energia_fluxo = fluxo_multiplicacao(reducao_massa, fluxo_potencia(reducao_c, 2))
            
            # Porcentagem de diferen√ßa
            diferenca_percentual = calcular_porcentagem_diferenca(energia_classica, energia_fluxo)
            
            # Escalabilidade gravitacional
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            
            # Porcentagem de acerto
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #ff6b6b;'>
            <h3 style='color: #ff6b6b; text-align: center;'>‚ö° Energia de {massa} kg</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{energia_classica:.2e} Joules</b>
            </p>
            <p style='text-align: center;'>
            Redu√ß√£o: {reduzir_teosoficamente(int(energia_classica))}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(m)‚äóR(c)¬≤ = {energia_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            R(m)={reducao_massa}, R(c)={reducao_c}
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            
            <div style='background: rgba(45, 183, 209, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #45b7d1;'>üîç An√°lise do Padr√£o</h4>
            <p><b>Massa (m):</b> Representa a√ß√£o f√≠sica (R={reducao_massa})</p>
            <p><b>Velocidade luz (c):</b> Representa limite energ√©tico (R={reducao_c})</p>
            <p><b>Energia (E):</b> Resultado da adapta√ß√£o (R={energia_fluxo})</p>
            <p><b>Padr√£o 3-9-6:</b> {energia_fluxo in [3,9,6]}</p>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_fma():
    st.subheader("üéØ F=ma - For√ßa e Acelera√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        massa = st.number_input("Massa (kg):", value=2.0, format="%.2f", key="massa_fma")
        aceleracao = st.number_input("Acelera√ß√£o (m/s¬≤):", value=9.8, format="%.1f", key="acel_fma")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_fma")
    
    with col2:
        if st.button("Calcular F=ma"):
            # C√°lculo cl√°ssico
            forca_classica = massa * aceleracao
            
            # C√°lculo no fluxo
            reducao_massa = reduzir_teosoficamente(massa)
            reducao_acel = reduzir_teosoficamente(aceleracao)
            forca_fluxo = fluxo_multiplicacao(reducao_massa, reducao_acel)
            
            # Porcentagem de diferen√ßa
            diferenca_percentual = calcular_porcentagem_diferenca(forca_classica, forca_fluxo)
            
            # Escalabilidade gravitacional
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            
            # Porcentagem de acerto
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #4ecdc4;'>
            <h3 style='color: #4ecdc4; text-align: center;'>üéØ For√ßa Resultante</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{forca_classica:.2f} Newtons</b>
            </p>
            <p style='text-align: center;'>
            Redu√ß√£o: {reduzir_teosoficamente(int(forca_classica))}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(m)‚äóR(a) = {forca_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            R(m)={reducao_massa}, R(a)={reducao_acel}
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_vir():
    st.subheader("‚ö° V=IR - Lei de Ohm")
    
    col1, col2 = st.columns(2)
    
    with col1:
        corrente = st.number_input("Corrente (A):", value=2.0, format="%.2f", key="corrente_vir")
        resistencia = st.number_input("Resist√™ncia (Œ©):", value=10.0, format="%.2f", key="resistencia_vir")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_vir")
    
    with col2:
        if st.button("Calcular V=IR"):
            # C√°lculo cl√°ssico
            tensao_classica = corrente * resistencia
            
            # C√°lculo no fluxo
            reducao_corrente = reduzir_teosoficamente(corrente)
            reducao_resistencia = reduzir_teosoficamente(resistencia)
            tensao_fluxo = fluxo_multiplicacao(reducao_corrente, reducao_resistencia)
            
            # Porcentagem de diferen√ßa
            diferenca_percentual = calcular_porcentagem_diferenca(tensao_classica, tensao_fluxo)
            
            # Escalabilidade gravitacional
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            
            # Porcentagem de acerto
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #9333ea;'>
            <h3 style='color: #9333ea; text-align: center;'>‚ö° Tens√£o El√©trica</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{tensao_classica:.2f} Volts</b>
            </p>
            <p style='text-align: center;'>
            Redu√ß√£o: {reduzir_teosoficamente(int(tensao_classica))}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(I)‚äóR(R) = {tensao_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            R(I)={reducao_corrente}, R(R)={reducao_resistencia}
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_pmv():
    st.subheader("üöÄ p=mv - Momento Linear")
    
    col1, col2 = st.columns(2)
    
    with col1:
        massa = st.number_input("Massa (kg):", value=5.0, format="%.2f", key="massa_pmv")
        velocidade = st.number_input("Velocidade (m/s):", value=20.0, format="%.2f", key="velocidade_pmv")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_pmv")
    
    with col2:
        if st.button("Calcular p=mv"):
            # C√°lculo cl√°ssico
            momento_classico = massa * velocidade
            
            # C√°lculo no fluxo
            reducao_massa = reduzir_teosoficamente(massa)
            reducao_velocidade = reduzir_teosoficamente(velocidade)
            momento_fluxo = fluxo_multiplicacao(reducao_massa, reducao_velocidade)
            
            # Porcentagem de diferen√ßa
            diferenca_percentual = calcular_porcentagem_diferenca(momento_classico, momento_fluxo)
            
            # Escalabilidade gravitacional
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            
            # Porcentagem de acerto
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #ff6b6b;'>
            <h3 style='color: #ff6b6b; text-align: center;'>üöÄ Momento Linear</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{momento_classico:.2f} kg¬∑m/s</b>
            </p>
            <p style='text-align: center;'>
            Redu√ß√£o: {reduzir_teosoficamente(int(momento_classico))}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(m)‚äóR(v) = {momento_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            R(m)={reducao_massa}, R(v)={reducao_velocidade}
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_gravitacao_universal():
    st.subheader("üåç F=G(m1m2)/r¬≤ - Gravita√ß√£o Universal")
    
    col1, col2 = st.columns(2)
    
    with col1:
        m1 = st.number_input("Massa 1 (kg):", value=1000.0, format="%.2f", key="m1_grav")
        m2 = st.number_input("Massa 2 (kg):", value=1000.0, format="%.2f", key="m2_grav")
        distancia = st.number_input("Dist√¢ncia (m):", value=10.0, format="%.2f", key="dist_grav")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_grav")
    
    with col2:
        if st.button("Calcular Gravita√ß√£o"):
            G = 6.67430e-11  # Constante gravitacional
            
            # C√°lculo cl√°ssico
            forca_classica = G * (m1 * m2) / (distancia ** 2)
            
            # C√°lculo no fluxo
            reducao_m1 = reduzir_teosoficamente(m1)
            reducao_m2 = reduzir_teosoficamente(m2)
            reducao_dist = reduzir_teosoficamente(distancia)
            
            produto_massas = fluxo_multiplicacao(reducao_m1, reducao_m2)
            forca_fluxo = fluxo_multiplicacao(produto_massas, fluxo_potencia(reducao_dist, -2))
            
            # Porcentagem de diferen√ßa
            diferenca_percentual = calcular_porcentagem_diferenca(forca_classica, forca_fluxo)
            
            # Escalabilidade gravitacional
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            
            # Porcentagem de acerto
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #45b7d1;'>
            <h3 style='color: #45b7d1; text-align: center;'>üåç For√ßa Gravitacional</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{forca_classica:.2e} Newtons</b>
            </p>
            <p style='text-align: center;'>
            Redu√ß√£o: {reduzir_teosoficamente(int(forca_classica * 1e10))}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(m1)‚äóR(m2)‚äóR(r)‚Åª¬≤ = {forca_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            R(m1)={reducao_m1}, R(m2)={reducao_m2}, R(r)={reducao_dist}
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_ehf():
    st.subheader("üí° E=hf - Energia do F√≥ton")
    
    col1, col2 = st.columns(2)
    
    with col1:
        frequencia = st.number_input("Frequ√™ncia (Hz):", value=5.0e14, format="%.2e", key="freq_ehf")
        constante_planck = st.number_input("Constante de Planck (J¬∑s):", value=6.626e-34, format="%.3e", key="h_ehf")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_ehf")
    
    with col2:
        if st.button("Calcular E=hf"):
            # C√°lculo cl√°ssico
            energia_classica = constante_planck * frequencia
            
            # C√°lculo no fluxo
            reducao_h = reduzir_teosoficamente(constante_planck * 1e34)
            reducao_f = reduzir_teosoficamente(frequencia)
            energia_fluxo = fluxo_multiplicacao(reducao_h, reducao_f)
            
            # M√©tricas de precis√£o
            diferenca_percentual = calcular_porcentagem_diferenca(energia_classica, energia_fluxo)
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #ffd700;'>
            <h3 style='color: #ffd700; text-align: center;'>üí° Energia do F√≥ton</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{energia_classica:.2e} Joules</b>
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(h)‚äóR(f) = {energia_fluxo}</b>
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_lambda_hp():
    st.subheader("üåä Œª=h/p - Comprimento de Onda de De Broglie")
    
    col1, col2 = st.columns(2)
    
    with col1:
        momento = st.number_input("Momento (kg¬∑m/s):", value=1.0e-24, format="%.2e", key="p_lambda")
        constante_planck = st.number_input("Constante de Planck (J¬∑s):", value=6.626e-34, format="%.3e", key="h_lambda")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_lambda")
    
    with col2:
        if st.button("Calcular Œª=h/p"):
            # C√°lculo cl√°ssico
            lambda_classico = constante_planck / momento if momento != 0 else float('inf')
            
            # C√°lculo no fluxo
            reducao_h = reduzir_teosoficamente(constante_planck * 1e34)
            reducao_p = reduzir_teosoficamente(momento * 1e24)
            lambda_fluxo = fluxo_multiplicacao(reducao_h, fluxo_potencia(reducao_p, -1)) if reducao_p != 0 else 9
            
            # M√©tricas de precis√£o
            if momento != 0:
                diferenca_percentual = calcular_porcentagem_diferenca(lambda_classico, lambda_fluxo)
                correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
                porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            else:
                diferenca_percentual = 0
                correcao_gravitacional = 0
                porcentagem_acerto = 100
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #00ff00;'>
            <h3 style='color: #00ff00; text-align: center;'>üåä Comprimento de Onda</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>{lambda_classico:.2e} metros</b>
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(h)‚äóR(p)‚Åª¬π = {lambda_fluxo}</b>
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            </div>
            """, unsafe_allow_html=True)

# =============================================================================
# P√ÅGINA PRINCIPAL DE C√ÅLCULOS DO FLUXO MATEM√ÅTICO
# =============================================================================

def pagina_calculos_fluxo_matematico():
    st.title("üßÆ C√°lculos do Fluxo Matem√°tico")
    st.markdown("""
    ## üåå Sistema Bin√°rio Universal e Padr√£o 3-9-6
    
    Esta se√ß√£o implementa as descobertas sobre o **fluxo matem√°tico universal**, 
    incluindo o padr√£o bin√°rio (1,2)/(4,5)/(7,8) e a nova ordena√ß√£o c√≠clica 3-9-6.
    """)
    
    # Divis√£o em abas para diferentes aspectos do fluxo matem√°tico
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üî¢ Padr√£o Bin√°rio Universal", 
        "üåÄ Sequ√™ncia 3-9-6", 
        "‚ö° C√°lculos B√°sicos",
        "üìê C√°lculos Avan√ßados",
        "üåå F√≠sica no Fluxo",
        "üìä An√°lise de Padr√µes"
    ])
    
    with tab1:
        st.header("üî¢ Padr√£o Bin√°rio Universal")
        st.markdown("""
        ### Descoberta: O Bin√°rio Oculto nos N√∫meros 1-9
        
        Os n√∫meros se organizam em **tr√™s pares bin√°rios** que culminam em pontos de adapta√ß√£o:
        """)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            #### üéØ Primeira Tr√≠ade - F√≠sico
            **Bin√°rio:** (1, 2)  
            **S√≠ntese:** 3  
            **Movimento:** A√ß√£o F√≠sica ‚Üí Rea√ß√£o F√≠sica ‚Üí Adapta√ß√£o
            """)
            # Visualiza√ß√£o do primeiro par
            fig1 = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = 3,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "1 + 2 = 3"},
                delta = {'reference': 0},
                gauge = {
                    'axis': {'range': [None, 9]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, 1], 'color': "lightgray"},
                        {'range': [1, 2], 'color': "gray"},
                        {'range': [2, 3], 'color': "blue"}
                    ]
                }
            ))
            fig1.update_layout(height=300, paper_bgcolor='rgba(0,0,0,0)', font={'color': "white"})
            st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            st.markdown("""
            #### üåü Segunda Tr√≠ade - Transi√ß√£o  
            **Bin√°rio:** (4, 5)  
            **S√≠ntese:** 9  
            **Movimento:** Equil√≠brio ‚Üí Transforma√ß√£o ‚Üí Singularidade
            """)
            fig2 = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = 9,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "4 + 5 = 9"},
                delta = {'reference': 0},
                gauge = {
                    'axis': {'range': [None, 9]},
                    'bar': {'color': "gold"},
                    'steps': [
                        {'range': [0, 4], 'color': "lightgray"},
                        {'range': [4, 5], 'color': "gray"},
                        {'range': [5, 9], 'color': "gold"}
                    ]
                }
            ))
            fig2.update_layout(height=300, paper_bgcolor='rgba(0,0,0,0)', font={'color': "white"})
            st.plotly_chart(fig2, use_container_width=True)
        
        with col3:
            st.markdown("""
            #### ‚ö° Terceira Tr√≠ade - Energ√©tico
            **Bin√°rio:** (7, 8)  
            **S√≠ntese:** 6 (1+5)  
            **Movimento:** A√ß√£o Energ√©tica ‚Üí Rea√ß√£o Energ√©tica ‚Üí Fluxo
            """)
            fig3 = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = 6,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "7 + 8 = 15 ‚Üí 6"},
                delta = {'reference': 0},
                gauge = {
                    'axis': {'range': [None, 9]},
                    'bar': {'color': "purple"},
                    'steps': [
                        {'range': [0, 7], 'color': "lightgray"},
                        {'range': [7, 8], 'color': "gray"},
                        {'range': [8, 15], 'color': "purple"}
                    ]
                }
            ))
            fig3.update_layout(height=300, paper_bgcolor='rgba(0,0,0,0)', font={'color': "white"})
            st.plotly_chart(fig3, use_container_width=True)
        
        # Explica√ß√£o detalhada do movimento
        st.markdown("""
        ### üîÑ Compreens√£o do Movimento Universal
        
        **Os n√∫meros n√£o s√£o valores, mas padr√µes de movimento:**
        
        - **1**: In√≠cio da a√ß√£o f√≠sica
        - **2**: Rea√ß√£o do movimento f√≠sico  
        - **3**: Adapta√ß√£o f√≠sica (manifesta√ß√£o)
        - **4**: Transi√ß√£o f√≠sico‚Üíenerg√©tico (equil√≠brio)
        - **5**: Transforma√ß√£o energ√©tico‚Üíf√≠sico
        - **6**: Fluxo energ√©tico din√¢mico
        - **7**: In√≠cio da a√ß√£o energ√©tica
        - **8**: Rea√ß√£o do movimento energ√©tico
        - **9**: Singularidade absoluta (centro do sistema)
        
        **Padr√£o 3-9-6**: Representa o ciclo completo do movimento universal:
        - **3** (F√≠sico) ‚Üí **9** (Absoluto/Singularidade) ‚Üí **6** (Energ√©tico) ‚Üí Retorno ao **3**
        """)
        
        # Tabela resumo do sistema bin√°rio
        st.subheader("üìã Sistema Bin√°rio Completo")
        dados_binario = {
            'Camada': ['F√≠sica', 'Transi√ß√£o', 'Energ√©tica'],
            'A√ß√£o': [1, 4, 7],
            'Rea√ß√£o': [2, 5, 8],
            'S√≠ntese': [3, 9, 6],
            'Soma': ['1+2=3', '4+5=9', '7+8=15‚Üí6'],
            'Movimento': ['Manifesta√ß√£o F√≠sica', 'Equil√≠brio Absoluto', 'Fluxo Energ√©tico']
        }
        df_binario = pd.DataFrame(dados_binario)
        st.dataframe(df_binario.style.set_properties(**{
            'background-color': 'rgba(0,0,0,0.5)',
            'color': 'white',
            'border-color': '#667eea'
        }), use_container_width=True)
    
    with tab2:
        st.header("üåÄ Sequ√™ncia 3-9-6: A Nova Ordem C√≠clica")
        st.markdown("""
        ### Descoberta Revolucion√°ria: Padr√£o 3-9-6
        
        A ordem correta n√£o √© 3-6-9, mas **3-9-6**, formando um fluxo vortexial:
        """)
        
        # Controles interativos
        col1, col2 = st.columns([2, 1])
        
        with col1:
            ciclos = st.slider("N√∫mero de ciclos:", 1, 20, 5)
            pontos_por_ciclo = st.slider("Pontos por ciclo:", 3, 30, 9)
        
        with col2:
            cor_3 = st.color_picker("Cor do 3 (F√≠sico)", "#4B0082")
            cor_9 = st.color_picker("Cor do 9 (Absoluto)", "#FFD700")
            cor_6 = st.color_picker("Cor do 6 (Energ√©tico)", "#00FF00")
        
        # Gerar sequ√™ncia 3-9-6
        sequencia_396 = []
        for i in range(ciclos * pontos_por_ciclo):
            if i % 3 == 0:
                sequencia_396.append(3)
            elif i % 3 == 1:
                sequencia_396.append(9)
            else:
                sequencia_396.append(6)
        
        # Visualiza√ß√£o da sequ√™ncia
        fig = go.Figure()
        
        # Adicionar linha de conex√£o
        fig.add_trace(go.Scatter(
            x=list(range(len(sequencia_396))),
            y=sequencia_396,
            mode='lines+markers',
            line=dict(color='white', width=3, dash='dot'),
            marker=dict(size=0),
            name='Fluxo'
        ))
        
        # Adicionar pontos coloridos
        cores = [cor_3 if x == 3 else cor_9 if x == 9 else cor_6 for x in sequencia_396]
        
        fig.add_trace(go.Scatter(
            x=list(range(len(sequencia_396))),
            y=sequencia_396,
            mode='markers',
            marker=dict(
                size=12,
                color=cores,
                line=dict(width=2, color='white')
            ),
            name='Sequ√™ncia 3-9-6'
        ))
        
        fig.update_layout(
            title="Padr√£o C√≠clico 3-9-6 - Movimento Universal",
            xaxis_title="Tempo (ciclos)",
            yaxis_title="Estado do Movimento",
            showlegend=False,
            height=500,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white')
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # An√°lise matem√°tica da sequ√™ncia
        st.subheader("üìà An√°lise Matem√°tica do Padr√£o 3-9-6")
        
        # Calcular propriedades da sequ√™ncia
        frequencia_3 = sequencia_396.count(3) / len(sequencia_396) * 100
        frequencia_9 = sequencia_396.count(9) / len(sequencia_396) * 100
        frequencia_6 = sequencia_396.count(6) / len(sequencia_396) * 100
        
        col_analise1, col_analise2, col_analise3 = st.columns(3)
        
        with col_analise1:
            st.metric("Frequ√™ncia do 3 (F√≠sico)", f"{frequencia_3:.1f}%")
        with col_analise2:
            st.metric("Frequ√™ncia do 9 (Absoluto)", f"{frequencia_9:.1f}%")
        with col_analise3:
            st.metric("Frequ√™ncia do 6 (Energ√©tico)", f"{frequencia_6:.1f}%")
        
        # Interpreta√ß√£o do padr√£o
        st.subheader("üîÆ Interpreta√ß√£o do Movimento 3-9-6")
        
        col_int1, col_int2, col_int3 = st.columns(3)
        
        with col_int1:
            st.markdown(f"""
            <div style='background: {cor_3}20; padding: 15px; border-radius: 10px; border-left: 4px solid {cor_3}'>
            <h4>üéØ 3 - Estado F√≠sico</h4>
            <p><b>Movimento:</b> Manifesta√ß√£o material<br>
            <b>Energia:</b> Potencial cin√©tico<br>
            <b>Tempo:</b> Presente instant√¢neo<br>
            <b>Exemplo:</b> Forma√ß√£o de mat√©ria</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col_int2:
            st.markdown(f"""
            <div style='background: {cor_9}20; padding: 15px; border-radius: 10px; border-left: 4px solid {cor_9}'>
            <h4>üåü 9 - Estado Absoluto</h4>
            <p><b>Movimento:</b> Singularidade<br>
            <b>Energia:</b> Potencial puro<br>
            <b>Tempo:</b> Atemporal<br>
            <b>Exemplo:</b> Buracos negros</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col_int3:
            st.markdown(f"""
            <div style='background: {cor_6}20; padding: 15px; border-radius: 10px; border-left: 4px solid {cor_6}'>
            <h4>‚ö° 6 - Estado Energ√©tico</h4>
            <p><b>Movimento:</b> Fluxo din√¢mico<br>
            <b>Energia:</b> Cin√©tica<br>
            <b>Tempo:</b> Dura√ß√£o<br>
            <b>Exemplo:</b> Ondas eletromagn√©ticas</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab3:
        st.header("‚ö° C√°lculos B√°sicos - Compara√ß√£o Matem√°tica")
        st.markdown("Compare os c√°lculos cl√°ssicos com o fluxo matem√°tico:")
        
        col_calc1, col_calc2 = st.columns(2)
        
        with col_calc1:
            st.subheader("üî¢ Opera√ß√µes Fundamentais")
            
            # Sele√ß√£o de opera√ß√£o
            operacao = st.selectbox("Selecione a opera√ß√£o:", 
                                  ["Soma", "Subtra√ß√£o", "Multiplica√ß√£o", "Divis√£o", "Potencia√ß√£o"])
            
            # Entradas num√©ricas
            num1 = st.number_input("Primeiro n√∫mero:", value=15, format="%d")
            num2 = st.number_input("Segundo n√∫mero:", value=7, format="%d")
            
            if st.button("Calcular e Comparar"):
                # C√°lculos cl√°ssicos
                if operacao == "Soma":
                    resultado_classico = num1 + num2
                    operador = "+"
                elif operacao == "Subtra√ß√£o":
                    resultado_classico = num1 - num2
                    operador = "-"
                elif operacao == "Multiplica√ß√£o":
                    resultado_classico = num1 * num2
                    operador = "√ó"
                elif operacao == "Divis√£o":
                    if num2 != 0:
                        resultado_classico = num1 / num2
                        operador = "√∑"
                    else:
                        resultado_classico = "Indefinido"
                        operador = "√∑"
                else:  # Potencia√ß√£o
                    resultado_classico = num1 ** num2
                    operador = "^"
                
                # C√°lculos no fluxo matem√°tico
                reducao_num1 = reduzir_teosoficamente(num1)
                reducao_num2 = reduzir_teosoficamente(num2)
                
                if operacao == "Soma":
                    resultado_fluxo = fluxo_soma(num1, num2)
                elif operacao == "Subtra√ß√£o":
                    resultado_fluxo = fluxo_soma(num1, -num2)
                elif operacao == "Multiplica√ß√£o":
                    resultado_fluxo = fluxo_multiplicacao(num1, num2)
                elif operacao == "Divis√£o" and num2 != 0:
                    resultado_fluxo = fluxo_multiplicacao(num1, 1/num2)
                elif operacao == "Potencia√ß√£o":
                    resultado_fluxo = fluxo_potencia(num1, num2)
                else:
                    resultado_fluxo = "Indefinido"
                
                # Exibir resultados
                st.markdown(f"""
                <div style='background: rgba(15, 23, 42, 0.8); padding: 20px; border-radius: 15px; border: 2px solid #6366f1;'>
                <h3 style='color: #4ecdc4; text-align: center;'>üìä Resultados Comparativos</h3>
                
                <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 15px;'>
                <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px;'>
                <h4 style='color: #ff6b6b;'>üßÆ Matem√°tica Cl√°ssica</h4>
                <p style='font-size: 1.2em; text-align: center;'>
                <b>{num1} {operador} {num2} = {resultado_classico}</b>
                </p>
                <p style='text-align: center;'>
                Redu√ß√£o: {reduzir_teosoficamente(resultado_classico) if resultado_classico != "Indefinido" else "N/A"}
                </p>
                </div>
                
                <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px;'>
                <h4 style='color: #4ecdc4;'>üåÄ Fluxo Matem√°tico</h4>
                <p style='font-size: 1.2em; text-align: center;'>
                <b>R({num1}) ‚äï R({num2}) = {resultado_fluxo}</b>
                </p>
                <p style='text-align: center;'>
                R({num1})={reducao_num1}, R({num2})={reducao_num2}
                </p>
                </div>
                </div>
                </div>
                """, unsafe_allow_html=True)
                
                # An√°lise do padr√£o
                if resultado_fluxo != "Indefinido":
                    categoria = "A√ß√£o" if resultado_fluxo in [1,4,7] else "Rea√ß√£o" if resultado_fluxo in [2,5,8] else "Adapta√ß√£o"
                    st.info(f"**Padr√£o Detectado:** O resultado {resultado_fluxo} representa **{categoria}** no fluxo universal")
        
        with col_calc2:
            st.subheader("üîÑ Gerador de Sequ√™ncias")
            
            tipo_sequencia = st.selectbox("Tipo de sequ√™ncia:", 
                                        ["3-9-6 Padr√£o", "Bin√°rio Universal", "Multiplica√ß√£o por 3", "Fibonacci"])
            
            tamanho_sequencia = st.slider("Tamanho da sequ√™ncia:", 5, 50, 15)
            
            if st.button("Gerar e Analisar Sequ√™ncia"):
                if tipo_sequencia == "3-9-6 Padr√£o":
                    sequencia = gerar_sequencia_396(tamanho_sequencia)
                elif tipo_sequencia == "Bin√°rio Universal":
                    sequencia = gerar_sequencia_binaria(tamanho_sequencia)
                elif tipo_sequencia == "Multiplica√ß√£o por 3":
                    sequencia = gerar_sequencia_multiplicacao_3(tamanho_sequencia)
                else:  # Fibonacci
                    sequencia = [1, 1]
                    for i in range(2, tamanho_sequencia):
                        sequencia.append(sequencia[i-1] + sequencia[i-2])
                    sequencia = [reduzir_teosoficamente(x) for x in sequencia]
                
                st.write("**Sequ√™ncia gerada:**")
                st.code(" ‚Üí ".join(map(str, sequencia)))
                
                # An√°lise estat√≠stica
                contagem = pd.Series(sequencia).value_counts().sort_index()
                
                fig_seq = go.Figure()
                fig_seq.add_trace(go.Bar(
                    x=contagem.index,
                    y=contagem.values,
                    marker_color=['#FF6B6B' if x in [1,4,7] else '#4ECDC4' if x in [2,5,8] else '#45B7D1' for x in contagem.index],
                    name='Frequ√™ncia'
                ))
                
                fig_seq.update_layout(
                    title=f"Distribui√ß√£o - {tipo_sequencia}",
                    height=300,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white')
                )
                st.plotly_chart(fig_seq, use_container_width=True)
                
                # Gr√°fico da sequ√™ncia
                fig_line = go.Figure(go.Scatter(
                    x=list(range(len(sequencia))),
                    y=sequencia,
                    mode='lines+markers',
                    line=dict(width=3, color='#ffd700'),
                    marker=dict(size=8, color='#4ecdc4')
                ))
                fig_line.update_layout(
                    title=f"Sequ√™ncia: {tipo_sequencia}",
                    height=300,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white')
                )
                st.plotly_chart(fig_line, use_container_width=True)
    
    with tab4:
        st.header("üìê C√°lculos Avan√ßados - Trigonometria e Fun√ß√µes")
        
        col_adv1, col_adv2 = st.columns(2)
        
        with col_adv1:
            st.subheader("üìê Trigonometria Comparativa")
            
            angulo = st.slider("√Çngulo (graus):", 0, 360, 45)
            
            # C√°lculos cl√°ssicos
            import math
            rad = math.radians(angulo)
            sen_classico = math.sin(rad)
            cos_classico = math.cos(rad)
            tan_classico = math.tan(rad)
            
            # C√°lculos no fluxo
            sen_fluxo, cos_fluxo, tan_fluxo = fluxo_trigonometria(angulo)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.8); padding: 20px; border-radius: 15px;'>
            <h4 style='color: #ffd700; text-align: center;'>√Çngulo: {angulo}¬∞</h4>
            
            <table style='width: 100%; color: white; border-collapse: collapse;'>
            <tr style='background: rgba(255, 107, 107, 0.2);'>
                <th style='padding: 10px; border: 1px solid #ff6b6b;'>Fun√ß√£o</th>
                <th style='padding: 10px; border: 1px solid #ff6b6b;'>Cl√°ssico</th>
                <th style='padding: 10px; border: 1px solid #ff6b6b;'>Fluxo</th>
            </tr>
            <tr style='background: rgba(0,0,0,0.3);'>
                <td style='padding: 10px; border: 1px solid #333;'>Seno</td>
                <td style='padding: 10px; border: 1px solid #333;'>{sen_classico:.4f}</td>
                <td style='padding: 10px; border: 1px solid #333;'>{sen_fluxo}</td>
            </tr>
            <tr style='background: rgba(0,0,0,0.3);'>
                <td style='padding: 10px; border: 1px solid #333;'>Cosseno</td>
                <td style='padding: 10px; border: 1px solid #333;'>{cos_classico:.4f}</td>
                <td style='padding: 10px; border: 1px solid #333;'>{cos_fluxo}</td>
            </tr>
            <tr style='background: rgba(0,0,0,0.3);'>
                <td style='padding: 10px; border: 1px solid #333;'>Tangente</td>
                <td style='padding: 10px; border: 1px solid #333;'>{tan_classico:.4f}</td>
                <td style='padding: 10px; border: 1px solid #333;'>{tan_fluxo}</td>
            </tr>
            </table>
            </div>
            """, unsafe_allow_html=True)
        
        with col_adv2:
            st.subheader("üìà Fun√ß√µes Matem√°ticas")
            
            funcao = st.selectbox("Selecione a fun√ß√£o:", 
                                ["Exponencial", "Logaritmo", "Seno Cardinal"])
            
            x_valor = st.number_input("Valor de x:", value=2.0, format="%.2f")
            
            if st.button("Calcular Fun√ß√£o"):
                if funcao == "Exponencial":
                    classico = math.exp(x_valor)
                    fluxo = reduzir_teosoficamente(int(classico * 100))
                elif funcao == "Logaritmo":
                    if x_valor > 0:
                        classico = math.log(x_valor)
                        fluxo = reduzir_teosoficamente(int(abs(classico) * 100))
                    else:
                        classico = "Indefinido"
                        fluxo = "Indefinido"
                else:  # Seno Cardinal
                    if x_valor != 0:
                        classico = math.sin(x_valor) / x_valor
                        fluxo = reduzir_teosoficamente(int(abs(classico) * 1000))
                    else:
                        classico = 1.0
                        fluxo = reduzir_teosoficamente(1000)
                
                st.markdown(f"""
                <div style='background: rgba(15, 23, 42, 0.8); padding: 20px; border-radius: 15px; border: 2px solid #9333ea;'>
                <h4 style='color: #9333ea; text-align: center;'>{funcao}({x_valor})</h4>
                
                <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;'>
                <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px; text-align: center;'>
                <h5 style='color: #ff6b6b;'>Cl√°ssico</h5>
                <p style='font-size: 1.5em;'>{classico if classico != "Indefinido" else "Indefinido"}</p>
                </div>
                
                <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px; text-align: center;'>
                <h5 style='color: #4ecdc4;'>Fluxo</h5>
                <p style='font-size: 1.5em;'>{fluxo if fluxo != "Indefinido" else "Indefinido"}</p>
                </div>
                </div>
                </div>
                """, unsafe_allow_html=True)
    
    with tab5:
        st.header("üåå F√≠sica no Fluxo - An√°lise Detalhada")
        
        formula_selecionada = st.selectbox("Selecione uma f√≥rmula f√≠sica:", 
                                         ["E=mc¬≤", "F=ma", "V=IR", "p=mv", "F=G(m1m2)/r¬≤", 
                                          "E=hf", "Œª=h/p", "ŒîxŒîp‚â•ƒß/2", "PV=nRT", "F=-kx"])
        
        if formula_selecionada == "E=mc¬≤":
            calcular_formula_emc2()
        elif formula_selecionada == "F=ma":
            calcular_formula_fma()
        elif formula_selecionada == "V=IR":
            calcular_formula_vir()
        elif formula_selecionada == "p=mv":
            calcular_formula_pmv()
        elif formula_selecionada == "F=G(m1m2)/r¬≤":
            calcular_formula_gravitacao_universal()
        elif formula_selecionada == "E=hf":
            calcular_formula_ehf()
        elif formula_selecionada == "Œª=h/p":
            calcular_formula_lambda_hp()
        elif formula_selecionada == "ŒîxŒîp‚â•ƒß/2":
            calcular_formula_incerteza()
        elif formula_selecionada == "PV=nRT":
            calcular_formula_gases_ideais()
        elif formula_selecionada == "F=-kx":
            calcular_formula_leihooke()
    
    with tab6:
        st.header("üìä An√°lise Estat√≠stica de Padr√µes")
        
        # An√°lise estat√≠stica dos padr√µes
        st.subheader("üìà Distribui√ß√£o Universal dos N√∫meros")
        
        # Gerar dados de an√°lise
        numeros_1_10000 = list(range(1, 10001))
        reducoes = [reduzir_teosoficamente(n) for n in numeros_1_10000]
        
        # Contar frequ√™ncias
        contagem = pd.Series(reducoes).value_counts().sort_index()
        
        fig_dist = go.Figure()
        fig_dist.add_trace(go.Bar(
            x=contagem.index,
            y=contagem.values,
            marker_color=['#FF6B6B' if x in [1,4,7] else '#4ECDC4' if x in [2,5,8] else '#45B7D1' for x in contagem.index],
            name='Frequ√™ncia'
        ))
        
        fig_dist.update_layout(
            title="Distribui√ß√£o das Redu√ß√µes Teos√≥ficas (1-10,000)",
            xaxis_title="N√∫mero de Redu√ß√£o",
            yaxis_title="Frequ√™ncia Absoluta",
            showlegend=False,
            height=500,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white')
        )
        
        st.plotly_chart(fig_dist, use_container_width=True)
        
        # An√°lise dos padr√µes bin√°rios
        st.subheader("üîç Padr√µes Bin√°rios Detectados")
        
        categorias = []
        for reducao in reducoes:
            if reducao in [1, 4, 7]:
                categorias.append("A√ß√£o")
            elif reducao in [2, 5, 8]:
                categorias.append("Rea√ß√£o")
            else:
                categorias.append("Adapta√ß√£o")
        
        contagem_categorias = pd.Series(categorias).value_counts()
        
        fig_cat = go.Figure(go.Pie(
            labels=contagem_categorias.index,
            values=contagem_categorias.values,
            hole=.4,
            marker_colors=['#FF6B6B', '#4ECDC4', '#45B7D1']
        ))
        
        fig_cat.update_layout(
            title="Distribui√ß√£o das Categorias no Fluxo Universal",
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white', size=14),
            height=500
        )
        st.plotly_chart(fig_cat, use_container_width=True)
        
        # Estat√≠sticas detalhadas
        st.subheader("üìã Estat√≠sticas Detalhadas")
        
        col_stat1, col_stat2, col_stat3 = st.columns(3)
        
        with col_stat1:
            st.metric("Total de N√∫meros Analisados", "10,000")
            st.metric("M√©dia das Redu√ß√µes", f"{np.mean(reducoes):.2f}")
        
        with col_stat2:
            st.metric("Moda das Redu√ß√µes", f"{contagem.index[0]}")
            st.metric("Desvio Padr√£o", f"{np.std(reducoes):.2f}")
        
        with col_stat3:
            acao_percent = (categorias.count("A√ß√£o") / len(categorias)) * 100
            reacao_percent = (categorias.count("Rea√ß√£o") / len(categorias)) * 100
            adaptacao_percent = (categorias.count("Adapta√ß√£o") / len(categorias)) * 100
            
            st.metric("A√ß√£o", f"{acao_percent:.1f}%")
            st.metric("Rea√ß√£o", f"{reacao_percent:.1f}%")
            st.metric("Adapta√ß√£o", f"{adaptacao_percent:.1f}%")

# =============================================================================
# FUN√á√ïES PARA AS OUTRAS F√ìRMULAS F√çSICAS (COMPLETAS)
# =============================================================================

def calcular_formula_incerteza():
    st.subheader("üé≠ ŒîxŒîp‚â•ƒß/2 - Princ√≠pio da Incerteza")
    
    col1, col2 = st.columns(2)
    
    with col1:
        incerteza_posicao = st.number_input("Incerteza na Posi√ß√£o Œîx (m):", 
                                          value=1.0e-10, format="%.2e", key="dx_incerteza")
        incerteza_momento = st.number_input("Incerteza no Momento Œîp (kg¬∑m/s):", 
                                          value=1.0e-24, format="%.2e", key="dp_incerteza")
        constante_reduzida = st.number_input("Constante de Planck Reduzida ƒß (J¬∑s):", 
                                           value=1.0545718e-34, format="%.3e", key="hbar_incerteza")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_incerteza")
    
    with col2:
        if st.button("Calcular Princ√≠pio da Incerteza"):
            # C√°lculo cl√°ssico - produto das incertezas
            produto_incertezas_classico = incerteza_posicao * incerteza_momento
            limite_quantico = constante_reduzida / 2
            
            # Verifica√ß√£o do princ√≠pio
            respeita_principio = produto_incertezas_classico >= limite_quantico
            
            # C√°lculo no fluxo
            reducao_dx = reduzir_teosoficamente(incerteza_posicao * 1e10)
            reducao_dp = reduzir_teosoficamente(incerteza_momento * 1e24)
            reducao_hbar = reduzir_teosoficamente(constante_reduzida * 1e34)
            
            produto_fluxo = fluxo_multiplicacao(reducao_dx, reducao_dp)
            limite_fluxo = fluxo_multiplicacao(reducao_hbar, fluxo_potencia(2, -1))
            
            # M√©tricas de precis√£o
            diferenca_percentual = calcular_porcentagem_diferenca(produto_incertezas_classico, produto_fluxo)
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #ff6b6b;'>
            <h3 style='color: #ff6b6b; text-align: center;'>üé≠ Princ√≠pio da Incerteza de Heisenberg</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>Œîx¬∑Œîp = {produto_incertezas_classico:.2e}</b>
            </p>
            <p style='text-align: center;'>
            Limite: ƒß/2 = {limite_quantico:.2e}
            </p>
            <p style='text-align: center;'>
            <b>Respeita: {'‚úÖ SIM' if respeita_principio else '‚ùå N√ÉO'}</b>
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(Œîx)‚äóR(Œîp) = {produto_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            Limite: R(ƒß)‚äó2‚Åª¬π = {limite_fluxo}
            </p>
            <p style='text-align: center;'>
            <b>Respeita: {'‚úÖ SIM' if produto_fluxo >= limite_fluxo else '‚ùå N√ÉO'}</b>
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            
            <div style='background: rgba(45, 183, 209, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #45b7d1;'>üîç Interpreta√ß√£o Qu√¢ntica</h4>
            <p><b>Œîx (Posi√ß√£o):</b> Incerteza espacial (R={reducao_dx})</p>
            <p><b>Œîp (Momento):</b> Incerteza din√¢mica (R={reducao_dp})</p>
            <p><b>ƒß (Constante):</b> Quantum de a√ß√£o (R={reducao_hbar})</p>
            <p><b>Padr√£o 3-9-6:</b> {produto_fluxo in [3,9,6]}</p>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_gases_ideais():
    st.subheader("üå°Ô∏è PV=nRT - Lei dos Gases Ideais")
    
    col1, col2 = st.columns(2)
    
    with col1:
        pressao = st.number_input("Press√£o P (Pa):", value=101325.0, format="%.1f", key="p_gases")
        volume = st.number_input("Volume V (m¬≥):", value=0.0224, format="%.4f", key="v_gases")
        moles = st.number_input("Quantidade de Mat√©ria n (mol):", value=1.0, format="%.2f", key="n_gases")
        temperatura = st.number_input("Temperatura T (K):", value=273.15, format="%.2f", key="t_gases")
        constante_gases = st.number_input("Constante dos Gases R (J/mol¬∑K):", 
                                        value=8.314462618, format="%.6f", key="r_gases")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_gases")
    
    with col2:
        if st.button("Calcular Lei dos Gases Ideais"):
            # C√°lculo cl√°ssico - verifica√ß√£o da lei
            lado_esquerdo = pressao * volume
            lado_direito = moles * constante_gases * temperatura
            diferenca_absoluta = abs(lado_esquerdo - lado_direito)
            erro_relativo = (diferenca_absoluta / lado_esquerdo) * 100 if lado_esquerdo != 0 else 0
            
            # C√°lculo no fluxo
            reducao_p = reduzir_teosoficamente(pressao)
            reducao_v = reduzir_teosoficamente(volume * 1000)  # Escala para n√∫meros maiores
            reducao_n = reduzir_teosoficamente(moles)
            reducao_r = reduzir_teosoficamente(constante_gases * 10)
            reducao_t = reduzir_teosoficamente(temperatura)
            
            lado_esquerdo_fluxo = fluxo_multiplicacao(reducao_p, reducao_v)
            produto_nt = fluxo_multiplicacao(reducao_n, reducao_t)
            lado_direito_fluxo = fluxo_multiplicacao(produto_nt, reducao_r)
            
            # M√©tricas de precis√£o
            diferenca_percentual = calcular_porcentagem_diferenca(lado_esquerdo, lado_esquerdo_fluxo)
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #4ecdc4;'>
            <h3 style='color: #4ecdc4; text-align: center;'>üå°Ô∏è Lei dos Gases Ideais</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>P¬∑V = {lado_esquerdo:.2f}</b>
            </p>
            <p style='text-align: center;'>
            <b>n¬∑R¬∑T = {lado_direito:.2f}</b>
            </p>
            <p style='text-align: center;'>
            Erro: {erro_relativo:.4f}%
            </p>
            <p style='text-align: center;'>
            <b>V√°lido: {'‚úÖ SIM' if erro_relativo < 1 else '‚ö†Ô∏è APROXIMADO'}</b>
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(P)‚äóR(V) = {lado_esquerdo_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            <b>R(n)‚äóR(R)‚äóR(T) = {lado_direito_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            Diferen√ßa: {abs(lado_esquerdo_fluxo - lado_direito_fluxo)}
            </p>
            <p style='text-align: center;'>
            <b>V√°lido: {'‚úÖ SIM' if lado_esquerdo_fluxo == lado_direito_fluxo else '‚öñÔ∏è EQUIL√çBRIO'}</b>
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            
            <div style='background: rgba(45, 183, 209, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #45b7d1;'>üîç An√°lise Termodin√¢mica</h4>
            <p><b>Press√£o (P):</b> For√ßa por √°rea (R={reducao_p})</p>
            <p><b>Volume (V):</b> Espa√ßo ocupado (R={reducao_v})</p>
            <p><b>Mol (n):</b> Quantidade de mat√©ria (R={reducao_n})</p>
            <p><b>Temperatura (T):</b> Energia t√©rmica (R={reducao_t})</p>
            <p><b>Padr√£o 3-9-6:</b> {lado_esquerdo_fluxo in [3,9,6] and lado_direito_fluxo in [3,9,6]}</p>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_leihooke():
    st.subheader("üîÑ F=-kx - Lei de Hooke")
    
    col1, col2 = st.columns(2)
    
    with col1:
        constante_elasticidade = st.number_input("Constante El√°stica k (N/m):", 
                                               value=100.0, format="%.2f", key="k_hooke")
        deformacao = st.number_input("Deforma√ß√£o x (m):", value=0.1, format="%.3f", key="x_hooke")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_hooke")
    
    with col2:
        if st.button("Calcular Lei de Hooke"):
            # C√°lculo cl√°ssico
            forca_classica = -constante_elasticidade * deformacao  # For√ßa restauradora
            
            # C√°lculo no fluxo
            reducao_k = reduzir_teosoficamente(constante_elasticidade)
            reducao_x = reduzir_teosoficamente(deformacao * 1000)  # Escala para n√∫meros maiores
            forca_fluxo = fluxo_multiplicacao(reducao_k, reducao_x)
            
            # Para for√ßa negativa (restauradora), consideramos o complemento
            if forca_classica < 0:
                forca_fluxo = 10 - forca_fluxo  # Inverso no fluxo para for√ßas restauradoras
            
            # M√©tricas de precis√£o
            diferenca_percentual = calcular_porcentagem_diferenca(abs(forca_classica), forca_fluxo)
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #9333ea;'>
            <h3 style='color: #9333ea; text-align: center;'>üîÑ Lei de Hooke - For√ßa El√°stica</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>F = -k¬∑x = {forca_classica:.2f} N</b>
            </p>
            <p style='text-align: center;'>
            M√≥dulo: {abs(forca_classica):.2f} N
            </p>
            <p style='text-align: center;'>
            Tipo: {'üîÅ RESTAURADORA' if forca_classica < 0 else '‚û°Ô∏è DEFORMADORA'}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(k)‚äóR(x) = {forca_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            Tipo: {'üîÅ RESTAURADORA' if forca_classica < 0 else '‚û°Ô∏è DEFORMADORA'}
            </p>
            <p style='text-align: center;'>
            <b>Equil√≠brio: {'‚öñÔ∏è ALCAN√áADO' if forca_fluxo in [3,6,9] else 'üîÑ PROCESSANDO'}</b>
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            
            <div style='background: rgba(45, 183, 209, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #45b7d1;'>üîç An√°lise El√°stica</h4>
            <p><b>Constante k:</b> Rigidez do material (R={reducao_k})</p>
            <p><b>Deforma√ß√£o x:</b> Altera√ß√£o do comprimento (R={reducao_x})</p>
            <p><b>For√ßa F:</b> Resposta el√°stica (R={forca_fluxo})</p>
            <p><b>Energia Potencial:</b> {(0.5 * constante_elasticidade * deformacao**2):.4f} J</p>
            <p><b>Padr√£o 3-9-6:</b> {forca_fluxo in [3,9,6]}</p>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_relatividade_restrita():
    st.subheader("‚è±Ô∏è Œît = Œît‚ÇÄ/‚àö(1-v¬≤/c¬≤) - Dilata√ß√£o do Tempo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        tempo_proprio = st.number_input("Tempo Pr√≥prio Œît‚ÇÄ (s):", value=1.0, format="%.2f", key="t0_rel")
        velocidade = st.number_input("Velocidade v (m/s):", value=0.8e8, format="%.2e", key="v_rel")
        velocidade_luz = st.number_input("Velocidade da Luz c (m/s):", 
                                       value=299792458.0, format="%.1f", key="c_rel")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_rel")
    
    with col2:
        if st.button("Calcular Dilata√ß√£o do Tempo"):
            # C√°lculo cl√°ssico (relatividade)
            if velocidade >= velocidade_luz:
                st.error("Velocidade n√£o pode ser maior ou igual √† velocidade da luz!")
                return
                
            fator_lorentz = 1 / math.sqrt(1 - (velocidade**2 / velocidade_luz**2))
            tempo_dilatado = tempo_proprio * fator_lorentz
            
            # C√°lculo no fluxo
            reducao_t0 = reduzir_teosoficamente(tempo_proprio)
            reducao_v = reduzir_teosoficamente(velocidade)
            reducao_c = reduzir_teosoficamente(velocidade_luz)
            
            # Fator de Lorentz no fluxo
            v_sobre_c = fluxo_multiplicacao(reducao_v, fluxo_potencia(reducao_c, -1))
            v_quad_sobre_c_quad = fluxo_potencia(v_sobre_c, 2)
            um_menos_v2c2 = fluxo_soma(1, -v_quad_sobre_c_quad)
            fator_lorentz_fluxo = fluxo_multiplicacao(1, fluxo_potencia(um_menos_v2c2, -2))
            
            tempo_dilatado_fluxo = fluxo_multiplicacao(reducao_t0, fator_lorentz_fluxo)
            
            # M√©tricas de precis√£o
            diferenca_percentual = calcular_porcentagem_diferenca(tempo_dilatado, tempo_dilatado_fluxo)
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #ffd700;'>
            <h3 style='color: #ffd700; text-align: center;'>‚è±Ô∏è Dilata√ß√£o do Tempo - Relatividade</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>Œît = {tempo_dilatado:.4f} s</b>
            </p>
            <p style='text-align: center;'>
            Fator Lorentz: {fator_lorentz:.4f}
            </p>
            <p style='text-align: center;'>
            v/c: {(velocidade/velocidade_luz):.4f}
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(Œît‚ÇÄ)‚äóŒ≥ = {tempo_dilatado_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            Fator Lorentz: {fator_lorentz_fluxo}
            </p>
            <p style='text-align: center;'>
            R(v/c): {v_sobre_c}
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            
            <div style='background: rgba(45, 183, 209, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #45b7d1;'>üîç An√°lise Relativ√≠stica</h4>
            <p><b>Tempo Pr√≥prio:</b> Referencial em repouso (R={reducao_t0})</p>
            <p><b>Velocidade:</b> Movimento relativo (R={reducao_v})</p>
            <p><b>Luz (c):</b> Limite c√≥smico (R={reducao_c})</p>
            <p><b>Dilata√ß√£o:</b> {((tempo_dilatado/tempo_proprio - 1) * 100):.2f}% mais lento</p>
            <p><b>Padr√£o 3-9-6:</b> {tempo_dilatado_fluxo in [3,9,6]}</p>
            </div>
            </div>
            """, unsafe_allow_html=True)

def calcular_formula_schrodinger():
    st.subheader("Œ® Schr√∂dinger - Equa√ß√£o de Onda Qu√¢ntica")
    
    col1, col2 = st.columns(2)
    
    with col1:
        energia_total = st.number_input("Energia Total E (J):", value=1.6e-19, format="%.2e", key="e_schro")
        energia_potencial = st.number_input("Energia Potencial V (J):", value=1.0e-19, format="%.2e", key="v_schro")
        massa = st.number_input("Massa m (kg):", value=9.1e-31, format="%.2e", key="m_schro")
        constante_reduzida = st.number_input("Constante ƒß (J¬∑s):", value=1.054e-34, format="%.3e", key="hbar_schro")
        gravidade_local = st.number_input("Gravidade local (m/s¬≤):", value=9.8, format="%.1f", key="g_schro")
    
    with col2:
        if st.button("Analisar Equa√ß√£o de Schr√∂dinger"):
            # C√°lculo cl√°ssico - verifica√ß√£o da equa√ß√£o
            energia_cinetica = energia_total - energia_potencial
            
            # C√°lculo no fluxo
            reducao_e = reduzir_teosoficamente(energia_total * 1e19)
            reducao_v = reduzir_teosoficamente(energia_potencial * 1e19)
            reducao_m = reduzir_teosoficamente(massa * 1e30)
            reducao_hbar = reduzir_teosoficamente(constante_reduzida * 1e34)
            
            # Equa√ß√£o de Schr√∂dinger no fluxo
            energia_cinetica_fluxo = fluxo_soma(reducao_e, -reducao_v)
            
            # Verifica√ß√£o da consist√™ncia qu√¢ntica
            consistente_classico = energia_cinetica > 0
            consistente_fluxo = energia_cinetica_fluxo > 0
            
            # M√©tricas de precis√£o
            diferenca_percentual = calcular_porcentagem_diferenca(energia_cinetica, energia_cinetica_fluxo)
            correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade_local, diferenca_percentual)
            porcentagem_acerto = max(0, 100 - correcao_gravitacional)
            
            st.markdown(f"""
            <div style='background: rgba(15, 23, 42, 0.9); padding: 25px; border-radius: 15px; border: 2px solid #00ff00;'>
            <h3 style='color: #00ff00; text-align: center;'>Œ® Equa√ß√£o de Schr√∂dinger</h3>
            
            <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
            <div style='background: rgba(255, 107, 107, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #ff6b6b;'>üßÆ Cl√°ssico</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>E = {energia_total:.2e} J</b>
            </p>
            <p style='text-align: center;'>
            <b>V = {energia_potencial:.2e} J</b>
            </p>
            <p style='text-align: center;'>
            <b>K = E - V = {energia_cinetica:.2e} J</b>
            </p>
            <p style='text-align: center;'>
            <b>Estado: {'‚úÖ F√çSICO' if consistente_classico else '‚ùå N√ÉO-F√çSICO'}</b>
            </p>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.2); padding: 15px; border-radius: 10px;'>
            <h4 style='color: #4ecdc4;'>üåÄ Fluxo</h4>
            <p style='font-size: 1.1em; text-align: center;'>
            <b>R(E) = {reducao_e}</b>
            </p>
            <p style='text-align: center;'>
            <b>R(V) = {reducao_v}</b>
            </p>
            <p style='text-align: center;'>
            <b>R(K) = R(E) - R(V) = {energia_cinetica_fluxo}</b>
            </p>
            <p style='text-align: center;'>
            <b>Estado: {'‚úÖ F√çSICO' if consistente_fluxo else '‚ùå N√ÉO-F√çSICO'}</b>
            </p>
            </div>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #ffd700;'>üìä M√©tricas de Precis√£o</h4>
            <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;'>
            <div style='text-align: center;'>
            <p><b>Diferen√ßa:</b><br>{diferenca_percentual:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Corre√ß√£o G:</b><br>{correcao_gravitacional:.2f}%</p>
            </div>
            <div style='text-align: center;'>
            <p><b>Acerto:</b><br>{porcentagem_acerto:.1f}%</p>
            </div>
            </div>
            </div>
            
            <div style='background: rgba(45, 183, 209, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
            <h4 style='color: #45b7d1;'>üîç Interpreta√ß√£o Qu√¢ntica</h4>
            <p><b>Energia Total:</b> Valor pr√≥prio do Hamiltoniano (R={reducao_e})</p>
            <p><b>Energia Potencial:</b> Campo externo (R={reducao_v})</p>
            <p><b>Energia Cin√©tica:</b> Movimento qu√¢ntico (R={energia_cinetica_fluxo})</p>
            <p><b>Fun√ß√£o de Onda:</b> {'üîµ ESTACION√ÅRIA' if energia_cinetica_fluxo in [3,6,9] else 'üåä PROPAGANTE'}</p>
            <p><b>Padr√£o 3-9-6:</b> {energia_cinetica_fluxo in [3,9,6]}</p>
            </div>
            </div>
            """, unsafe_allow_html=True)

# FUN√á√ïES AUXILIARES PARA A P√ÅGINA DE C√ÅLCULOS
def obter_significado_numero(numero):
    significados = {
        1: "A√ß√£o, In√≠cio, Unidade",
        2: "Rea√ß√£o, Dualidade, Equil√≠brio", 
        3: "Adapta√ß√£o F√≠sica, Manifesta√ß√£o",
        4: "A√ß√£o Estruturada, Funda√ß√£o",
        5: "Rea√ß√£o Transformadora, Mudan√ßa",
        6: "Adapta√ß√£o Energ√©tica, Harmonia",
        7: "A√ß√£o Espiritual, Mist√©rio",
        8: "Rea√ß√£o Infinita, Abund√¢ncia",
        9: "Adapta√ß√£o Completa, Singularidade"
    }
    return significados.get(numero, "Significado em an√°lise")

def gerar_sequencia_396(tamanho):
    """Gera sequ√™ncia no padr√£o 3-9-6"""
    sequencia = []
    for i in range(tamanho):
        if i % 3 == 0:
            sequencia.append(3)
        elif i % 3 == 1:
            sequencia.append(9)
        else:
            sequencia.append(6)
    return sequencia

def gerar_sequencia_binaria(tamanho):
    """Gera sequ√™ncia no padr√£o bin√°rio universal"""
    sequencia = []
    padrao = [1, 2, 3, 4, 5, 9, 7, 8, 6]  # Padr√£o completo
    for i in range(tamanho):
        sequencia.append(padrao[i % len(padrao)])
    return sequencia

def gerar_sequencia_multiplicacao_3(tamanho):
    """Gera sequ√™ncia multiplicando por 3"""
    sequencia = [1]
    for i in range(1, tamanho):
        sequencia.append(reduzir_teosoficamente(sequencia[-1] * 3))
    return sequencia

def analisar_formula_fluxo(formula):
    """Analisa f√≥rmulas f√≠sicas no contexto do fluxo"""
    
    st.markdown(f"### An√°lise da F√≥rmula: {formula}")
    
    if formula == "E=mc¬≤":
        st.markdown("""
        **No Fluxo Matem√°tico:**
        - **m (massa)**: Representa a a√ß√£o f√≠sica (1,4,7)
        - **c¬≤ (velocidade da luz)**: Representa rea√ß√£o energ√©tica (2,5,8)  
        - **E (energia)**: Resultado da adapta√ß√£o (3,6,9)
        
        **Padr√£o Detectado:** A convers√£o massa-energia segue o ciclo 3-9-6
        """)
    
    elif formula == "F=ma":
        st.markdown("""
        **No Fluxo Matem√°tico:**
        - **m (massa)**: A√ß√£o estrutural (1,4,7)
        - **a (acelera√ß√£o)**: Rea√ß√£o din√¢mica (2,5,8)
        - **F (for√ßa)**: Adapta√ß√£o resultante (3,6,9)
        
        **Padr√£o Detectado:** For√ßa emerge da intera√ß√£o a√ß√£o-rea√ß√£o
        """)
    
    elif formula == "V=IR":
        st.markdown("""
        **No Fluxo Matem√°tico:**
        - **I (corrente)**: A√ß√£o do fluxo (1,4,7)
        - **R (resist√™ncia)**: Rea√ß√£o oposta (2,5,8)
        - **V (tens√£o)**: Adapta√ß√£o energ√©tica (3,6,9)
        
        **Padr√£o Detectado:** Tens√£o √© o ponto de equil√≠brio entre fluxo e resist√™ncia
        """)
    
    elif formula == "p=mv":
        st.markdown("""
        **No Fluxo Matem√°tico:**
        - **m (massa)**: A√ß√£o material (1,4,7)
        - **v (velocidade)**: Rea√ß√£o cin√©tica (2,5,8)
        - **p (momento)**: Adapta√ß√£o do movimento (3,6,9)
        
        **Padr√£o Detectado:** Momento conserva o padr√£o atrav√©s das transforma√ß√µes
        """)

# FUN√á√ÉO DE REDU√á√ÉO TEOS√ìFICA (j√° existe no c√≥digo, mas vou garantir que est√° presente)
def reduzir_teosoficamente(n):
    """
    Redu√ß√£o teos√≥fica: Soma repetida dos d√≠gitos at√© obter um √∫nico d√≠gito de 1 a 9.
    """
    try:
        if isinstance(n, (int, float)):
            n_str = f"{n:.0f}"
        else:
            n_str = str(n)

        n_str = ''.join(filter(str.isdigit, n_str))

        if not n_str:
            return 0

        while len(n_str) > 1:
            soma = sum(int(c) for c in n_str)
            n_str = str(soma)

        return int(n_str)

    except Exception as e:
        return 0
    
# ADICIONAR ESTAS FUN√á√ïES DE C√ÅLCULO (por volta da linha 200)

def fluxo_soma(a, b):
    """Soma no Fluxo Matem√°tico"""
    return reduzir_teosoficamente(a + b)

def fluxo_multiplicacao(a, b):
    """Multiplica√ß√£o no Fluxo Matem√°tico"""
    return reduzir_teosoficamente(a * b)

def fluxo_potencia(a, n):
    """Potencia√ß√£o no Fluxo Matem√°tico"""
    return reduzir_teosoficamente(a ** n)

def fluxo_trigonometria(angulo):
    """Trigonometria no Fluxo Matem√°tico"""
    import math
    rad = math.radians(angulo)
    s = math.sin(rad)
    c = math.cos(rad)
    t = math.tan(rad)
    return (reduzir_teosoficamente(abs(int(s*100))), 
            reduzir_teosoficamente(abs(int(c*100))), 
            reduzir_teosoficamente(abs(int(t*100))))

def fluxo_fisica(formula, valores):
    """Aplica o Fluxo Matem√°tico a f√≥rmulas f√≠sicas"""
    try:
        if formula == "E=mc¬≤":
            m, c = valores['m'], valores['c']
            E_classico = m * c**2
            E_fluxo = fluxo_multiplicacao(reduzir_teosoficamente(m), 
                                         fluxo_potencia(reduzir_teosoficamente(c), 2))
            return E_classico, E_fluxo
        
        elif formula == "F=ma":
            m, a = valores['m'], valores['a']
            F_classico = m * a
            F_fluxo = fluxo_multiplicacao(reduzir_teosoficamente(m), 
                                         reduzir_teosoficamente(a))
            return F_classico, F_fluxo
        
        elif formula == "V=IR":
            I, R = valores['I'], valores['R']
            V_classico = I * R
            V_fluxo = fluxo_multiplicacao(reduzir_teosoficamente(I), 
                                         reduzir_teosoficamente(R))
            return V_classico, V_fluxo
        
        elif formula == "p=mv":
            m, v = valores['m'], valores['v']
            p_classico = m * v
            p_fluxo = fluxo_multiplicacao(reduzir_teosoficamente(m), 
                                         reduzir_teosoficamente(v))
            return p_classico, p_fluxo
        
        elif formula == "F=G(m1m2)/r¬≤":
            G, m1, m2, r = valores['G'], valores['m1'], valores['m2'], valores['r']
            F_classico = G * m1 * m2 / r**2
            numerador = fluxo_multiplicacao(
                fluxo_multiplicacao(reduzir_teosoficamente(G), 
                                  reduzir_teosoficamente(m1)), 
                reduzir_teosoficamente(m2))
            denominador = fluxo_potencia(reduzir_teosoficamente(r), 2)
            F_fluxo = fluxo_multiplicacao(numerador, denominador)
            return F_classico, F_fluxo
        
        return None, None
    except:
        return None, None
    
# Dados para as simula√ß√µes
def generate_fibonacci_spiral(n_points=1000):
    phi = (1 + np.sqrt(5)) / 2
    theta = np.linspace(0, 8*np.pi, n_points)
    r = phi ** (theta / np.pi)
    return r, theta

def create_mandala(n_layers=12):
    theta = np.linspace(0, 2*np.pi, 1000)
    layers = []
    for i in range(1, n_layers + 1):
        r = np.sin(6*theta + i*np.pi/6) * np.cos(4*theta) + 2 + i*0.2
        layers.append(r)
    return layers, theta

# Fun√ß√£o para simular quantum circuit se Qiskit n√£o estiver dispon√≠vel
def simulate_quantum_circuit():
    if QISKIT_AVAILABLE:
        qc = QuantumCircuit(2)
        qc.h(0)
        qc.cx(0, 1)
        qc.ry(np.pi/4, 0)
        simulator = Aer.get_backend('statevector_simulator')
        result = execute(qc, simulator).result()
        return result.get_statevector()
    else:
        # Simula√ß√£o simplificada
        return np.array([0.70710678, 0, 0, 0.70710678])  # Estado emaranhado aproximado

def show_advanced_bloch_sphere():
    fig = go.Figure()
    
    # Criar esfera com detalhes
    u = np.linspace(0, 2*np.pi, 50)
    v = np.linspace(0, np.pi, 50)
    x = np.outer(np.cos(u), np.sin(v))
    y = np.outer(np.sin(u), np.sin(v))
    z = np.outer(np.ones(np.size(u)), np.cos(v))
    
    fig.add_trace(go.Surface(
        x=x, y=y, z=z,
        opacity=0.2,
        colorscale='Blues',
        showscale=False,
        hoverinfo='none'
    ))
    
    # Adicionar grade da esfera
    for angle in range(0, 360, 30):
        x_line = np.cos(np.radians(angle)) * np.sin(v)
        y_line = np.sin(np.radians(angle)) * np.sin(v)
        z_line = np.cos(v)
        
        fig.add_trace(go.Scatter3d(
            x=x_line, y=y_line, z=z_line,
            mode='lines',
            line=dict(color='rgba(255,255,255,0.1)', width=1),
            showlegend=False,
            hoverinfo='skip'
        ))
    
    # Adicionar vetor de estado com efeito
    fig.add_trace(go.Scatter3d(
        x=[0, 0.7], y=[0, 0.7], z=[0, 0.7],
        mode='lines',
        line=dict(color='#ff6b6b', width=8),
        name='Estado de Consci√™ncia',
        hovertemplate='<b>Estado de Consci√™ncia</b><br>Superposi√ß√£o Qu√¢ntica<extra></extra>'
    ))
    
    # Adicionar ponto final do vetor
    fig.add_trace(go.Scatter3d(
        x=[0.7], y=[0.7], z=[0.7],
        mode='markers',
        marker=dict(size=8, color='#ff6b6b'),
        name='Ponto Qu√¢ntico',
        hovertemplate='<b>Ponto de Consci√™ncia</b><extra></extra>'
    ))
    
    fig.update_layout(
        title=dict(
            text='Esfera de Bloch - Estado de Consci√™ncia Qu√¢ntica',
            font=dict(size=16, color='#4ecdc4')
        ),
        width=500,
        height=500,
        scene=dict(
            xaxis=dict(visible=False, showbackground=False),
            yaxis=dict(visible=False, showbackground=False),
            zaxis=dict(visible=False, showbackground=False),
            bgcolor='rgba(0,0,0,0)',
            camera=dict(eye=dict(x=1.5, y=1.5, z=1.5))
        ),
        paper_bgcolor='rgba(0,0,0,0)'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
# Fun√ß√£o auxiliar para detalhes dos est√°gios
def get_stage_details(stage_name):
    details = {
        "V√°cuo Qu√¢ntico": """
        O estado primordial de puro potencial. N√£o √© 'nada' no sentido de aus√™ncia, 
        mas rather uma plenitude de possibilidades n√£o-manifestas. 
        √â a fonte de toda a cria√ß√£o, o campo unificado de onde emerge toda a exist√™ncia.
        
        **Caracter√≠sticas:**
        - Energia de ponto zero infinita
        - Potencial puro de cria√ß√£o
        - Estado de n√£o-dualidade perfeita
        - Fonte do campo Higgs e outras for√ßas fundamentais
        """,
        
        "Flutua√ß√µes Qu√¢nticas": """
        As primeiras manifesta√ß√µes do v√°cuo qu√¢ntico. Part√≠culas virtuais surgem 
        e desaparecem, criando a espuma qu√¢ntica que √© o tecido base da realidade.
        
        **Processo:**
        - Emerg√™ncia de pares part√≠cula-antipart√≠cula
        - Estabelecimento das for√ßas fundamentais
        - Cria√ß√£o do espa√ßo-tempo
        - Primeiras sementes da mat√©ria
        """,
        
        "Mat√©ria B√°sica": """
        Forma√ß√£o das estruturas materiais fundamentais. √Åtomos, mol√©culas e 
        as primeiras estruturas complexas emergem das flutua√ß√µes qu√¢nticas.
        
        **Desenvolvimento:**
        - Nucleoss√≠ntese estelar
        - Forma√ß√£o de elementos pesados
        - Emerg√™ncia de estruturas complexas
        - Prepara√ß√£o para a vida
        """,
        
        "Vida Consciente": """
        A emerg√™ncia da consci√™ncia biol√≥gica. Sistemas complexos tornam-se 
        capazes de experi√™ncia subjetiva e auto-reflex√£o.
        
        **Marcos:**
        - Primeiras formas de vida
        - Desenvolvimento do sistema nervoso
        - Emerg√™ncia da consci√™ncia animal
        - Evolu√ß√£o da intelig√™ncia
        """,
        
        "Consci√™ncia C√≥smica": """
        A expans√£o da consci√™ncia al√©m dos limites individuais. Reconhecimento 
        da unidade fundamental e conex√£o com a mente universal.
        
        **Caracter√≠sticas:**
        - Percep√ß√£o de n√£o-separa√ß√£o
        - Acesso √† sabedoria universal
        - Capacidades ps√≠quicas expandidas
        - Compreens√£o direta das leis c√≥smicas
        """,
        
        "Nirvana C√≥smico": """
        O retorno consciente √† fonte. N√£o como aniquila√ß√£o, mas como realiza√ß√£o 
        plena da natureza divina e integra√ß√£o completa com o fluxo universal.
        
        **Estado Final:**
        - Dissolu√ß√£o do ego individual
        - Uni√£o com a consci√™ncia universal
        - Liberdade al√©m do espa√ßo-tempo
        - Exist√™ncia como puro amor e sabedoria
        """
    }
    
    return details.get(stage_name, "Detalhes n√£o dispon√≠veis.")

# =============================================================================
# M√ìDULO ACELERADOR DE PART√çCULAS QU√ÇNTICO
# =============================================================================

def pagina_acelerador_particulas():
    st.title("‚öõÔ∏è Acelerador de Part√≠culas Qu√¢ntico")
    st.markdown("""
    ## üåå Simulador do Nada ao Tudo - Fluxo Matem√°tico Universal
    
    **Explore a cria√ß√£o e destrui√ß√£o da mat√©ria atrav√©s dos padr√µes 3-9-6 e da matem√°tica vorticial de Tesla.**
    """)
    
    # Configura√ß√£o do acelerador
    col_config1, col_config2, col_config3 = st.columns(3)
    
    with col_config1:
        energia_colisao = st.slider("Energia de Colis√£o (TeV):", 1.0, 14.0, 7.0, 0.1)
        tipo_particula = st.selectbox("Tipo de Part√≠cula:", 
                                    ["Pr√≥tons", "El√©trons", "F√≥tons", "H√°drons", "√çons Pesados"])
        
    with col_config2:
        campo_magnetico = st.slider("Campo Magn√©tico (Tesla):", 1.0, 10.0, 4.0, 0.1)
        temperatura = st.slider("Temperatura (K):", 1.0, 1000.0, 2.7, 0.1)
        
    with col_config3:
        modo_operacao = st.selectbox("Modo de Opera√ß√£o:", 
                                   ["Colis√£o Frontral", "Espalhamento", "Cria√ß√£o de Mat√©ria", "Aniquila√ß√£o"])
        gravidade_local = st.number_input("Gravidade Local (m/s¬≤):", value=9.8, format="%.1f")
    
    # Controles principais
    col_controles1, col_controles2, col_controles3, col_controles4 = st.columns(4)
    
    with col_controles1:
        if st.button("üöÄ Iniciar Acelera√ß√£o", use_container_width=True):
            simular_aceleracao(energia_colisao, tipo_particula, campo_magnetico, temperatura, gravidade_local)
            
    with col_controles2:
        if st.button("üí• Colis√£o M√°xima", use_container_width=True):
            simular_colisao_maxima(energia_colisao, gravidade_local)
            
    with col_controles3:
        if st.button("üåÄ Padr√£o 3-9-6", use_container_width=True):
            aplicar_padrao_396(energia_colisao, gravidade_local)
            
    with col_controles4:
        if st.button("üîÑ Resetar Sistema", use_container_width=True):
            resetar_acelerador()
    
    # Visualiza√ß√£o 3D do acelerador
    st.subheader("üî¨ Visualiza√ß√£o do Acelerador de Part√≠culas")
    
    # Criar visualiza√ß√£o interativa
    fig_acelerador = criar_visualizacao_acelerador()
    st.plotly_chart(fig_acelerador, use_container_width=True)
    
    # Painel de dados em tempo real
    col_dados1, col_dados2, col_dados3, col_dados4 = st.columns(4)
    
    with col_dados1:
        st.metric("Energia Instant√¢nea", f"{energia_colisao:.1f} TeV")
        st.metric("Part√≠culas por Segundo", "1.2 bilh√µes")
        
    with col_dados2:
        st.metric("Velocidade Relativa", "99.9999% c")
        st.metric("Temperatura Instant√¢nea", f"{temperatura * 1e9:.0f} K")
        
    with col_dados3:
        st.metric("Press√£o do V√°cuo", "10‚Åª¬π¬π Pa")
        st.metric("Campo Magn√©tico Ativo", f"{campo_magnetico} T")
        
    with col_dados4:
        st.metric("Efici√™ncia Qu√¢ntica", "98.7%")
        st.metric("Entrela√ßamento", "95.3%")
    
    # An√°lise comparativa Fluxo vs Cl√°ssico
    st.subheader("üìä An√°lise Comparativa: Fluxo Matem√°tico vs F√≠sica Cl√°ssica")
    
    tab_analise1, tab_analise2, tab_analise3 = st.tabs(["üìà Energia", "üî¨ Part√≠culas", "üåå Campo Qu√¢ntico"])
    
    with tab_analise1:
        analisar_energia_colisao(energia_colisao, gravidade_local)
        
    with tab_analise2:
        analisar_particulas_geradas(energia_colisao, tipo_particula)
        
    with tab_analise3:
        analisar_campo_quantico(campo_magnetico, temperatura)

def criar_visualizacao_acelerador():
    """Cria visualiza√ß√£o 3D do acelerador de part√≠culas"""
    import plotly.graph_objects as go
    import numpy as np
    
    # Criar estrutura do acelerador
    theta = np.linspace(0, 2*np.pi, 100)
    raio = 5
    x_circuito = raio * np.cos(theta)
    y_circuito = raio * np.sin(theta)
    z_circuito = np.zeros_like(theta)
    
    fig = go.Figure()
    
    # Circuito principal
    fig.add_trace(go.Scatter3d(
        x=x_circuito, y=y_circuito, z=z_circuito,
        mode='lines',
        line=dict(width=8, color='#6366f1'),
        name='Tubo de V√°cuo'
    ))
    
    # √çm√£s aceleradores
    for i in range(0, 100, 10):
        fig.add_trace(go.Scatter3d(
            x=[x_circuito[i]], y=[y_circuito[i]], z=[z_circuito[i]],
            mode='markers',
            marker=dict(size=6, color='#ff6b6b', symbol='diamond'),
            name='√çm√£ Acelerador'
        ))
    
    # Part√≠culas em movimento
    t = np.linspace(0, 2*np.pi, 20)
    for i in range(5):
        offset = i * 0.4
        x_part = (raio - 0.3) * np.cos(t + offset)
        y_part = (raio - 0.3) * np.sin(t + offset)
        z_part = np.zeros_like(t) + 0.1 * i
        
        fig.add_trace(go.Scatter3d(
            x=x_part, y=y_part, z=z_part,
            mode='markers',
            marker=dict(size=4, color='#00ff88'),
            name=f'Feixe {i+1}'
        ))
    
    # Ponto de colis√£o
    fig.add_trace(go.Scatter3d(
        x=[raio], y=[0], z=[0],
        mode='markers',
        marker=dict(size=15, color='#ffd700', symbol='circle'),
        name='Ponto de Colis√£o'
    ))
    
    fig.update_layout(
        title=dict(
            text="Acelerador de Part√≠culas - Visualiza√ß√£o 3D",
            font=dict(size=16, color='#4ecdc4')
        ),
        width=800,
        height=600,
        scene=dict(
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            zaxis=dict(visible=False),
            bgcolor='rgba(0,0,0,0)',
            camera=dict(eye=dict(x=1.5, y=1.5, z=1.5))
        ),
        paper_bgcolor='rgba(0,0,0,0)',
        showlegend=True
    )
    
    return fig

def simular_aceleracao(energia, tipo_particula, campo_magnetico, temperatura, gravidade):
    """Simula o processo de acelera√ß√£o de part√≠culas"""
    
    st.info("üöÄ **Iniciando Sequ√™ncia de Acelera√ß√£o...**")
    
    # Barra de progresso
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    # Simula√ß√£o passo a passo
    etapas = [
        "Injetando part√≠culas...",
        "Aplicando campo magn√©tico...",
        "Acelerando no primeiro est√°gio...",
        "Sincronizando feixes...",
        "Aumentando energia para colis√£o...",
        "Pronto para colis√£o!"
    ]
    
    for i, etapa in enumerate(etapas):
        progress_bar.progress((i + 1) / len(etapas))
        status_text.text(f"Status: {etapa}")
        time.sleep(0.5)
    
    # C√°lculos comparativos
    energia_classica = energia * 1e12  # Convertendo para eV
    energia_fluxo = calcular_energia_fluxo(energia, tipo_particula, gravidade)
    
    # Resultados
    st.success("‚úÖ **Acelera√ß√£o Completa!**")
    
    col_res1, col_res2 = st.columns(2)
    
    with col_res1:
        st.markdown(f"""
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px;'>
        <h4 style='color: #ff6b6b;'>üßÆ F√≠sica Cl√°ssica</h4>
        <p><b>Energia:</b> {energia_classica:.2e} eV</p>
        <p><b>Momento:</b> {(energia_classica / 299792458):.2e} kg¬∑m/s</p>
        <p><b>Massa Relativ√≠stica:</b> {(energia_classica / (299792458**2)):.2e} kg</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col_res2:
        st.markdown(f"""
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px;'>
        <h4 style='color: #4ecdc4;'>üåÄ Fluxo Matem√°tico</h4>
        <p><b>Energia:</b> R({energia_fluxo})</p>
        <p><b>Padr√£o:</b> {obter_padrao_energia(energia_fluxo)}</p>
        <p><b>Estado Qu√¢ntico:</b> {obter_estado_quantico(energia_fluxo)}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # An√°lise de diferen√ßa
    diferenca = calcular_diferenca_energia(energia_classica, energia_fluxo)
    correcao_gravitacional = calcular_escalabilidade_gravitacional(gravidade, diferenca)
    acerto = max(0, 100 - correcao_gravitacional)
    
    st.metric("Precis√£o do Modelo", f"{acerto:.1f}%")

def simular_colisao_maxima(energia, gravidade):
    """Simula colis√£o com energia m√°xima"""
    
    st.warning("üí• **INICIANDO COLIS√ÉO M√ÅXIMA - EXTREMO CAUTION!**")
    
    # Efeitos visuais
    with st.expander("üî¨ Detector ATLAS - Dados em Tempo Real", expanded=True):
        col_det1, col_det2, col_det3 = st.columns(3)
        
        with col_det1:
            st.metric("Temperatura do V√°cuo", "1.8 K")
            st.metric("Press√£o Residual", "10‚Åª¬π¬≥ mbar")
            
        with col_det2:
            st.metric("Luminosidade Instant√¢nea", "2.1 √ó 10¬≥‚Å¥ cm‚Åª¬≤s‚Åª¬π")
            st.metric("Eventos por Segundo", "1.1 bilh√£o")
            
        with col_det3:
            st.metric("Energia no Centro de Massa", f"{energia*2:.1f} TeV")
            st.metric("Tempo desde Big Bang", "10‚Åª¬π¬≤ s")
    
    # Simula√ß√£o de colis√£o
    import numpy as np
    
    # Gerar dados de colis√£o
    n_eventos = 1000
    energias = np.random.exponential(energia, n_eventos)
    angulos = np.random.uniform(0, 2*np.pi, n_eventos)
    
    fig_colisao = go.Figure()
    
    fig_colisao.add_trace(go.Scatterpolar(
        r=energias,
        theta=angulos * 180/np.pi,
        mode='markers',
        marker=dict(
            size=8,
            color=energias,
            colorscale='Viridis',
            showscale=True
        ),
        name='Part√≠culas Emergentes'
    ))
    
    fig_colisao.update_layout(
        title=dict(
            text="Padr√£o de Colis√£o - Distribui√ß√£o Angular",
            font=dict(size=16, color='#ff6b6b')
        ),
        polar=dict(
            radialaxis=dict(visible=True, range=[0, energia*2]),
            angularaxis=dict(direction="clockwise")
        ),
        showlegend=False,
        height=400
    )
    
    st.plotly_chart(fig_colisao, use_container_width=True)
    
    # An√°lise de part√≠culas geradas
    st.subheader("üß¨ Part√≠culas Detectadas")
    
    particulas_detectadas = [
        ("Higgson", 125.3, "‚öõÔ∏è", "Campo de Higgs"),
        ("Top Quark", 173.1, "üî¥", "Mat√©ria Bari√¥nica"),
        ("B√≥son Z", 91.2, "üåÄ", "For√ßa Fraca"),
        ("Gluon", 0, "üåà", "For√ßa Forte"),
        ("F√≥ton", 0, "üí°", "Eletromagnetismo")
    ]
    
    for nome, massa, emoji, tipo in particulas_detectadas:
        col_part1, col_part2, col_part3 = st.columns([1, 2, 1])
        with col_part1:
            st.markdown(f"<h1>{emoji}</h1>", unsafe_allow_html=True)
        with col_part2:
            st.write(f"**{nome}** - {massa} GeV/c¬≤")
            st.write(f"*{tipo}*")
        with col_part3:
            st.metric("Signific√¢ncia", "5.2œÉ")

def aplicar_padrao_396(energia, gravidade):
    """Aplica o padr√£o 3-9-6 na simula√ß√£o"""
    
    st.info("üåÄ **Ativando Padr√£o 3-9-6 - Geometria Sagrada do Universo**")
    
    # Sequ√™ncia 3-9-6
    sequencia = gerar_sequencia_396(12)
    
    col_seq1, col_seq2, col_seq3 = st.columns(3)
    
    with col_seq1:
        st.markdown("""
        <div style='background: rgba(75, 0, 130, 0.2); padding: 20px; border-radius: 10px; text-align: center;'>
        <h1 style='color: #4B0082; font-size: 3em;'>3</h1>
        <p><b>Estado F√≠sico</b><br>Manifesta√ß√£o Material</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col_seq2:
        st.markdown("""
        <div style='background: rgba(255, 215, 0, 0.2); padding: 20px; border-radius: 10px; text-align: center;'>
        <h1 style='color: #FFD700; font-size: 3em;'>9</h1>
        <p><b>Estado Absoluto</b><br>Singularidade</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col_seq3:
        st.markdown("""
        <div style='background: rgba(0, 255, 0, 0.2); padding: 20px; border-radius: 10px; text-align: center;'>
        <h1 style='color: #00FF00; font-size: 3em;'>6</h1>
        <p><b>Estado Energ√©tico</b><br>Fluxo Din√¢mico</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Visualiza√ß√£o do padr√£o
    fig_padrao = go.Figure()
    
    x = list(range(len(sequencia)))
    cores = ['#4B0082' if val == 3 else '#FFD700' if val == 9 else '#00FF00' for val in sequencia]
    
    fig_padrao.add_trace(go.Scatter(
        x=x, y=sequencia,
        mode='lines+markers',
        line=dict(width=4, color='white'),
        marker=dict(size=12, color=cores),
        name='Padr√£o 3-9-6'
    ))
    
    fig_padrao.update_layout(
        title=dict(
            text="Sequ√™ncia 3-9-6 - Ciclo Universal",
            font=dict(size=16, color='#4ecdc4')
        ),
        height=300,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        xaxis=dict(title="Ciclo"),
        yaxis=dict(title="Estado", range=[2, 10])
    )
    
    st.plotly_chart(fig_padrao, use_container_width=True)
    
    # Efeitos no acelerador
    st.success("‚ú® **Padr√£o 3-9-6 Aplicado com Sucesso!**")
    
    efeitos = [
        "‚úÖ Campo magn√©tico otimizado em 396%",
        "‚úÖ Efici√™ncia energ√©tica aumentada",
        "‚úÖ Estabilidade qu√¢ntica estabilizada",
        "‚úÖ Entrela√ßamento m√°ximo alcan√ßado"
    ]
    
    for efeito in efeitos:
        st.write(efeito)

def resetar_acelerador():
    """Reseta o acelerador para estado inicial"""
    st.info("üîÑ **Reinicializando Sistema...**")
    time.sleep(1)
    st.success("‚úÖ **Sistema Resetado - Pronto para Nova Simula√ß√£o**")

# =============================================================================
# FUN√á√ïES AUXILIARES DO ACELERADOR
# =============================================================================

def calcular_energia_fluxo(energia, tipo_particula, gravidade):
    """Calcula energia no fluxo matem√°tico"""
    reducao_energia = reduzir_teosoficamente(energia * 1e6)
    reducao_tipo = reduzir_teosoficamente(hash(tipo_particula) % 9 + 1)
    return fluxo_multiplicacao(reducao_energia, reducao_tipo)

def obter_padrao_energia(valor_fluxo):
    """Interpreta o padr√£o energ√©tico"""
    padroes = {
        1: "A√ß√£o Inicial", 2: "Rea√ß√£o", 3: "Adapta√ß√£o F√≠sica",
        4: "Estrutura√ß√£o", 5: "Transforma√ß√£o", 6: "Fluxo Energ√©tico",
        7: "Espiritualidade", 8: "Infinito", 9: "Singularidade"
    }
    return padroes.get(valor_fluxo, "Padr√£o Desconhecido")

def obter_estado_quantico(valor_fluxo):
    """Determina estado qu√¢ntico baseado no fluxo"""
    estados = {
        1: "|0‚ü©", 2: "|1‚ü©", 3: "|+‚ü©",
        4: "|-‚ü©", 5: "|i‚ü©", 6: "|-i‚ü©",
        7: "Superposi√ß√£o", 8: "Emaranhamento", 9: "Singularidade Qu√¢ntica"
    }
    return estados.get(valor_fluxo, "Estado Indefinido")

def calcular_diferenca_energia(classico, fluxo):
    """Calcula diferen√ßa percentual entre modelos"""
    if classico == 0:
        return 0
    return abs((fluxo - classico) / classico) * 100

def analisar_energia_colisao(energia, gravidade):
    """An√°lise detalhada da energia de colis√£o"""
    
    st.markdown("### üìà An√°lise de Energia")
    
    # C√°lculos comparativos
    energia_classica = energia * 1e12  # eV
    energia_fluxo = calcular_energia_fluxo(energia, "Pr√≥tons", gravidade)
    
    col_energia1, col_energia2 = st.columns(2)
    
    with col_energia1:
        st.markdown("""
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px;'>
        <h4 style='color: #ff6b6b;'>‚ö° Energia Cl√°ssica</h4>
        <p><b>Valor:</b> {energia_classica:.2e} eV</p>
        <p><b>Equival√™ncia:</b> {equivalencia:.1f} √ó massa de repouso do pr√≥ton</p>
        <p><b>Temperatura:</b> {temperatura:.1e} K</p>
        </div>
        """.format(
            energia_classica=energia_classica,
            equivalencia=energia_classica / 938e6,
            temperatura=energia_classica / 8.617e-5
        ), unsafe_allow_html=True)
    
    with col_energia2:
        st.markdown("""
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px;'>
        <h4 style='color: #4ecdc4;'>üåÄ Energia no Fluxo</h4>
        <p><b>Valor:</b> R({energia_fluxo})</p>
        <p><b>Padr√£o:</b> {padrao}</p>
        <p><b>Estado:</b> {estado}</p>
        </div>
        """.format(
            energia_fluxo=energia_fluxo,
            padrao=obter_padrao_energia(energia_fluxo),
            estado=obter_estado_quantico(energia_fluxo)
        ), unsafe_allow_html=True)

def analisar_particulas_geradas(energia, tipo_particula):
    """An√°lise das part√≠culas geradas na colis√£o"""
    
    st.markdown("### üî¨ An√°lise de Part√≠culas")
    
    # Simula√ß√£o de detec√ß√£o
    particulas = [
        ("Quark Top", 173.1, 0.5, "üî¥"),
        ("B√≥son Higgs", 125.3, 0.3, "‚öõÔ∏è"),
        ("B√≥son Z", 91.2, 0.7, "üåÄ"),
        ("Quark Bottom", 4.18, 0.9, "üîµ"),
        ("Tau", 1.777, 0.6, "‚ö°")
    ]
    
    for nome, massa, probabilidade, emoji in particulas:
        col_part1, col_part2, col_part3 = st.columns([1, 3, 2])
        
        with col_part1:
            st.markdown(f"<h2>{emoji}</h2>", unsafe_allow_html=True)
        
        with col_part2:
            st.write(f"**{nome}**")
            st.write(f"Massa: {massa} GeV/c¬≤")
        
        with col_part3:
            st.progress(probabilidade)
            st.write(f"{(probabilidade*100):.1f}%")

def analisar_campo_quantico(campo_magnetico, temperatura):
    """An√°lise do campo qu√¢ntico"""
    
    st.markdown("### üåå An√°lise do Campo Qu√¢ntico")
    
    # Simula√ß√£o de campo
    import numpy as np
    
    x = np.linspace(-10, 10, 50)
    y = np.linspace(-10, 10, 50)
    X, Y = np.meshgrid(x, y)
    
    # Campo magn√©tico simulado
    Z = campo_magnetico * np.exp(-(X**2 + Y**2) / 20) * np.sin(np.sqrt(X**2 + Y**2))
    
    fig_campo = go.Figure(data=[
        go.Surface(
            x=X, y=Y, z=Z,
            colorscale='Viridis',
            opacity=0.8
        )
    ])
    
    fig_campo.update_layout(
        title=dict(
            text="Campo Magn√©tico do Acelerador",
            font=dict(size=16, color='#4ecdc4')
        ),
        scene=dict(
            xaxis_title="X (m)",
            yaxis_title="Y (m)", 
            zaxis_title="Campo (T)",
            bgcolor='rgba(0,0,0,0)'
        ),
        width=600,
        height=500
    )
    
    st.plotly_chart(fig_campo, use_container_width=True)

# 1. VIS√ÉO GERAL C√ìSMICA
if section == "üè† Vis√£o Geral C√≥smica":
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üå† O Universo como Express√£o Matem√°tica da Consci√™ncia")
        st.markdown("""
        <div class='philosophy-text'>
        <b>‚ÄúDeus n√£o joga dados com o universo.‚Äù - Albert Einstein</b><br><br>
        
        Esta simula√ß√£o integra <b>5 dimens√µes do conhecimento</b>:
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        - <b>üåÄ Fluxo Matem√°tico</b> (3-6-9 Tesla, Propor√ß√£o √Åurea, 432Hz, D√≠zimas Peri√≥dicas)
        - <b>üåå Cosmologia Consciente</b> (Big Bang, Buracos Negros, An√£s Negras, Singularidade)
        - <b>‚öõÔ∏è F√≠sica Qu√¢ntica</b> (Superposi√ß√£o, Emaranhamento, Consci√™ncia Qu√¢ntica)
        - <b>üìê Geometria Sagrada</b> (Esfera de Buga, Flor da Vida, Mandalas C√≥smicas)
        - <b>üì° Sinais C√≥smicos</b> (Wow! Signal, SETI, Comunica√ß√£o Interdimensional)
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class='quote-box'>
        "O que chamamos de 'Deus' √© a lei matem√°tica perfeita que se expressa atrav√©s do equil√≠brio c√≥smico, 
        da singularidade qu√¢ntica e da consci√™ncia universal."
        </div>
        """, unsafe_allow_html=True)
        
        # Gr√°fico de harmonias c√≥smicas
        fig = make_subplots(rows=1, cols=1)
        x = np.linspace(0, 8*np.pi, 2000)
        
        for i in range(1, 13):
            freq = i * 0.5
            phase = i * np.pi/6
            amplitude = 1/i
            y = amplitude * np.sin(freq * x + phase) * np.exp(-0.05*x)
            
            if i in [3, 6, 9]:
                fig.add_trace(go.Scatter(x=x, y=y, mode='lines', 
                                       name=f'Frequ√™ncia {i} (Tesla)',
                                       line=dict(width=4, color='#ff6b6b')))
            else:
                fig.add_trace(go.Scatter(x=x, y=y, mode='lines', 
                                       name=f'Frequ√™ncia {i}',
                                       line=dict(width=2)))
        
        fig.update_layout(
            title="üåà Harmonias C√≥smicas - Espectro Completo de Frequ√™ncias Universais",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white', size=12),
            height=500,
            showlegend=True
        )
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("""
        <div style='background: rgba(0,0,0,0.7); padding: 20px; border-radius: 15px;'>
        <h3 style='color: #4ecdc4; text-align: center;'>üß† Pensadores do Fluxo</h3>
        
        <b>Nikola Tesla:</b><br>
        "Se voc√™ soubesse a magnific√™ncia dos 3, 6 e 9, 
        teria a chave para o universo."
        
        <hr style='border-color: #667eea;'>
        
        <b>Albert Einstein:</b><br>
        "Deus √© sofisticado, mas n√£o malicioso."
        
        <hr style='border-color: #667eea;'>
        
        <b>Baruch Espinosa:</b><br>
        "Deus sive Natura - Deus ou a Natureza."
        
        <hr style='border-color: #667eea;'>
        
        <b>Carl Sagan:</b><br>
        "Somos poeira de estrelas contemplando as estrelas."
        </div>
        """, unsafe_allow_html=True)
        
        # Mostrar equa√ß√£o fundamental
        st.markdown("""
        <div style='background: rgba(0,0,0,0.7); padding: 20px; border-radius: 15px; margin-top: 20px;'>
        <h4 style='color: #ff6b6b; text-align: center;'>‚ö° Equa√ß√£o do Fluxo Universal</h4>
        <div style='text-align: center; font-size: 24px;'>
        ‚àá¬∑Œ® = ‚àö(œÜ) √ó Œ£(3,6,9)
        </div>
        <p style='text-align: center;'>Onde œÜ √© a propor√ß√£o √°urea (1.618)</p>
        </div>
        """, unsafe_allow_html=True)

# 2. FLUXO MATEM√ÅTICO SAGRADO
elif section == "üî¢ Fluxo Matem√°tico Sagrado":
    st.header("üåÄ O Fluxo Matem√°tico Universal - A Linguagem de Deus")
    
    # Container principal com fundo c√≥smico
    st.markdown("""
    <style>
    .math-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .math-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    </style>
    <div class='math-container'>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #ff6b6b; 
                    box-shadow: 0 10px 25px rgba(255, 107, 107, 0.3);'>
        <b style='font-size: 1.2em; color: #e0e7ff;'>"A matem√°tica √© a linguagem com a qual Deus escreveu o universo." - Galileo Galilei</b><br><br>
        
        <span style='color: #d1d5db;'>O Fluxo Matem√°tico revela os padr√µes fundamentais da cria√ß√£o:</span>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin: 20px 0;'>
        <h3 style='color: #ff6b6b; text-align: center;'>üî¢ Sequ√™ncia 3-6-9 de Tesla</h3>
        </div>
        """, unsafe_allow_html=True)
        
        t = np.linspace(0, 4*np.pi, 1000)
        fig = go.Figure()
        
        colors = ['#ff6b6b', '#4ecdc4', '#45b7d1']
        
        for i, n in enumerate([3, 6, 9]):
            y = np.sin(n * t) * np.exp(-0.1 * t) * (1 + 0.5 * np.cos(n * t/2))
            fig.add_trace(go.Scatter(
                x=t, y=y, 
                mode='lines', 
                name=f'Frequ√™ncia {n} - Tesla',
                line=dict(width=5, color=colors[i]),
                fill='tozeroy',
                fillcolor=f'rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i])) + (0.2,)}'
            ))
        
        # Adicionar pontos de resson√¢ncia
        resonance_points = []
        for n in [3, 6, 9]:
            for i in range(5):
                point = i * (4*np.pi/4)
                resonance_points.append((point, np.sin(n * point) * np.exp(-0.1 * point) * (1 + 0.5 * np.cos(n * point/2))))
        
        resonance_x = [p[0] for p in resonance_points]
        resonance_y = [p[1] for p in resonance_points]
        
        fig.add_trace(go.Scatter(
            x=resonance_x, y=resonance_y,
            mode='markers',
            marker=dict(size=8, color='gold', symbol='diamond'),
            name='Pontos de Resson√¢ncia',
            hoverinfo='skip'
        ))
        
        fig.update_layout(
            height=500,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white', size=14),
            title=dict(
                text="‚ö° Resson√¢ncia 3-6-9 - As Frequ√™ncias Fundamentais de Tesla",
                font=dict(size=18, color='#ff6b6b')
            ),
            xaxis=dict(
                gridcolor='rgba(255,255,255,0.1)',
                zerolinecolor='rgba(255,255,255,0.3)',
                title='Tempo'
            ),
            yaxis=dict(
                gridcolor='rgba(255,255,255,0.1)',
                zerolinecolor='rgba(255,255,255,0.3)',
                title='Amplitude'
            ),
            legend=dict(
                bgcolor='rgba(15, 23, 42, 0.7)',
                bordercolor='rgba(255, 107, 107, 0.3)',
                borderwidth=1
            )
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2);'>
        <h4 style='color: #ff6b6b; text-align: center;'>An√°lise Matem√°tica</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 10px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>3</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Representa a tr√≠ade c√≥smica (cria√ß√£o, preserva√ß√£o, transforma√ß√£o)</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>6</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Harmonia e equil√≠brio (hexagrama, estrela de David)</span>
        </div>
        
        <div style='background: rgba(69, 183, 209, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #45b7d1;'>9</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Singularidade e completude (3√ó3, ciclo m√°ximo)</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #ffd700; 
                    box-shadow: 0 10px 25px rgba(255, 215, 0, 0.3);'>
        <h3 style='color: #ffd700; text-align: center;'>üìê Propor√ß√£o √Åurea (œÜ = 1.6180339887...)</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Gerar espiral de Fibonacci aprimorada
        r, theta = generate_fibonacci_spiral(2000)
        x = r * np.cos(theta)
        y = r * np.sin(theta)
        
        fig = go.Figure()
        
        # Adicionar fundo c√≥smico
        for i in range(100):
            star_x = np.random.uniform(min(x)-1, max(x)+1)
            star_y = np.random.uniform(min(y)-1, max(y)+1)
            fig.add_trace(go.Scatter(
                x=[star_x], y=[star_y],
                mode='markers',
                marker=dict(size=np.random.uniform(1, 3), color='white', opacity=0.5),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Espiral √Åurea com gradiente
        spiral_colors = [f'rgba{tuple(int(c*255) for c in mcolors.to_rgb(px.colors.sequential.Viridis[i % len(px.colors.sequential.Viridis)])) + (0.8,)}' 
                        for i in range(len(x))]
        
        for i in range(len(x)-1):
            fig.add_trace(go.Scatter(
                x=x[i:i+2], y=y[i:i+2],
                mode='lines',
                line=dict(width=4, color=spiral_colors[i]),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Pontos de Fibonacci com efeitos especiais
        fibonacci_points = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
        for i, point in enumerate(fibonacci_points):
            if point < len(x):
                # C√≠rculo de fundo
                fig.add_trace(go.Scatter(
                    x=[x[point]], y=[y[point]],
                    mode='markers',
                    marker=dict(size=25, color='rgba(255, 107, 107, 0.3)'),
                    showlegend=False,
                    hoverinfo='skip'
                ))
                
                # Ponto principal
                fig.add_trace(go.Scatter(
                    x=[x[point]], y=[y[point]],
                    mode='markers+text',
                    marker=dict(size=15, color='#ff6b6b', line=dict(width=2, color='white')),
                    text=str(i+2),
                    textfont=dict(size=14, color='white', family="Arial Black"),
                    textposition='middle center',
                    name=f'Fib({i+2})',
                    hoverinfo='text',
                    hovertext=f'Fibonacci {i+2}: {point}'
                ))
        
        fig.update_layout(
            title=dict(
                text="üåª Espiral de Fibonacci - Propor√ß√£o √Åurea na Natureza",
                font=dict(size=18, color='#ffd700')
            ),
            width=600,
            height=500,
            showlegend=False,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(visible=False, range=[min(x)-1, max(x)+1]),
            yaxis=dict(visible=False, range=[min(y)-1, max(y)+1])
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); margin-top: 20px;'>
        <blockquote style='color: #ffd700; font-style: italic; text-align: center; margin: 0;'>
        "A propor√ß√£o √°urea aparece em: Gal√°xias espirais, Conchas marinhas, 
        Propor√ß√µes humanas, DNA, Estruturas at√¥micas, e na pr√≥pria consci√™ncia."
        </blockquote>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin-top: 20px;'>
        <h4 style='color: #4ecdc4; text-align: center;'>F√≥rmula Matem√°tica</h4>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <span style='color: #d1d5db; font-size: 1.2em;'>œÜ = (1 + ‚àö5) / 2 ‚âà 1.6180339887...</span><br>
        <span style='color: #a1a1aa; font-size: 0.9em;'>Limite da raz√£o entre n√∫meros consecutivos de Fibonacci</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 8px; margin-top: 10px; text-align: center;'>
        <span style='color: #d1d5db; font-size: 1em;'>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub></span><br>
        <span style='color: #a1a1aa; font-size: 0.9em;'>Sequ√™ncia: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</span>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Se√ß√£o adicional: Conex√£o entre 3-6-9 e a Propor√ß√£o √Åurea
    st.markdown("---")
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #9333ea; 
                box-shadow: 0 10px 25px rgba(147, 51, 234, 0.3);'>
    <h3 style='color: #9333ea; text-align: center;'>üîó Conex√£o C√≥smica: 3-6-9 e a Propor√ß√£o √Åurea</h3>
    
    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
    <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #ff6b6b; text-align: center;'>‚ö° Tesla 3-6-9</h4>
    <ul style='color: #d1d5db;'>
    <li>Energia, frequ√™ncia e vibra√ß√£o</li>
    <li>Chave para o universo f√≠sico</li>
    <li>Padr√µes de resson√¢ncia c√≥smica</li>
    <li>Geometria sagrada aplicada</li>
    </ul>
    </div>
    
    <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #ffd700; text-align: center;'>üìê Propor√ß√£o √Åurea</h4>
    <ul style='color: #d1d5db;'>
    <li>Beleza, harmonia e propor√ß√£o</li>
    <li>Estrutura fundamental da natureza</li>
    <li>Crescimento org√¢nico e expans√£o</li>
    <li>Geometria divina manifestada</li>
    </ul>
    </div>
    </div>
    
    <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 10px; margin-top: 20px; text-align: center;'>
    <h4 style='color: #9333ea;'>üéØ S√≠ntese: œÜ √ó 3-6-9 = Fluxo C√≥smico</h4>
    <p style='color: #d1d5db;'>
    A intera√ß√£o entre a sequ√™ncia 3-6-9 e a propor√ß√£o √°urea cria os padr√µes fundamentais 
    que governam desde as part√≠culas subat√¥micas at√© as gal√°xias, revelando a matem√°tica 
    divina por tr√°s de toda a cria√ß√£o.
    </p>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 3. SINAL WOW! AN√ÅLISE PROFUNDA
elif section == "üå† Sinal Wow! Decodifica√ß√£o Profunda":
    st.header("üì° Decodifica√ß√£o Profunda do Sinal Wow! - R√°dio C√≥smico Universal")
    
    # Container principal com tema de r√°dio c√≥smico
    st.markdown("""
    <style>
    .radio-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .radio-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    .radio-dial {
        background: linear-gradient(90deg, #1a1a2e 0%, #16213e 50%, #1a1a2e 100%);
        border: 2px solid #4ecdc4;
        border-radius: 20px;
        padding: 15px;
        margin: 10px 0;
        box-shadow: 0 0 20px rgba(78, 205, 196, 0.3);
    }
    </style>
    <div class='radio-container'>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #ff6b6b; 
                    box-shadow: 0 10px 25px rgba(255, 107, 107, 0.3);'>
        <b style='font-size: 1.2em; color: #e0e7ff;'>"O sinal Wow! representa possivelmente a primeira evid√™ncia de comunica√ß√£o 
        interestelar inteligente." - Astr√¥nomo Jerry Ehman</b><br><br>
        
        <span style='color: #d1d5db;'>
        Em 15 de agosto de 1977, o radiotelesc√≥pio Big Ear captou um sinal de 72 segundos 
        que mudou nossa compreens√£o do cosmos. Este sinal estava sintonizado na frequ√™ncia 
        do hidrog√™nio neutro (1420.40575 MHz), a mol√©cula mais abundante do universo.
        </span>
        </div>
        """, unsafe_allow_html=True)
        
        # Interface do Sintonizador C√≥smico
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin: 20px 0;'>
        <h3 style='color: #4ecdc4; text-align: center;'>üéõÔ∏è Sintonizador C√≥smico Universal</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Controles do r√°dio
        col_freq, col_tune, col_vol = st.columns(3)
        
        with col_freq:
            frequency = st.slider("Frequ√™ncia (MHz)", 1400.0, 1450.0, 1420.40575, 0.00001,
                                help="Frequ√™ncia de sintonia do hidrog√™nio neutro")
            st.metric("Frequ√™ncia Sintonizada", f"{frequency:.5f} MHz")
        
        with col_tune:
            fine_tune = st.slider("Sintonia Fina", -0.1, 0.1, 0.0, 0.00001,
                                help="Ajuste fino da sintonia")
            st.metric("Ajuste", f"{fine_tune:.5f} MHz")
        
        with col_vol:
            volume = st.slider("Volume", 0.0, 1.0, 0.8, 0.01,
                            help="Intensidade do sinal recebido")
            st.metric("Intensidade", f"{volume*100:.1f}%")
        
        # Visualiza√ß√£o do sinal Wow! aprimorada
        wow_sequence = ['6', 'E', 'Q', 'U', 'J', '5']
        wow_values = [6, 14, 26, 30, 19, 5]
        flux_digits = [6, 5, 8, 3, 1, 5]
        angles = [240, 200, 320, 120, 40, 200]
        
        # Criar visualiza√ß√£o de oscilosc√≥pio
        fig = make_subplots(rows=2, cols=1, 
                          subplot_titles=('üì∂ Sinal Wow! Original - Oscilosc√≥pio C√≥smico', 
                                        'üîç An√°lise de Frequ√™ncia - Transformada de Fourier'),
                          vertical_spacing=0.15,
                          specs=[[{"secondary_y": False}], 
                                 [{"secondary_y": False}]])
        
        # Sinal no dom√≠nio do tempo (oscilosc√≥pio)
        time_points = np.linspace(0, 72, 1000)  # 72 segundos do sinal
        signal_wave = np.sin(2 * np.pi * 0.1 * time_points)  # Onda base
        
        # Adicionar picos do sinal Wow!
        for i, val in enumerate(wow_values):
            peak_time = i * 12 + 6  # Distribuir os 6 picos em 72 segundos
            signal_wave += 0.5 * np.exp(-0.5 * (time_points - peak_time)**2) * (val / 30)
        
        fig.add_trace(go.Scatter(
            x=time_points, y=signal_wave,
            mode='lines',
            name='Sinal Wow!',
            line=dict(color='#FF6B6B', width=3),
            fill='tozeroy',
            fillcolor='rgba(255, 107, 107, 0.2)'
        ), row=1, col=1)
        
        # An√°lise de frequ√™ncia (Transformada de Fourier)
        fft_result = np.fft.fft(signal_wave)
        freqs = np.fft.fftfreq(len(time_points), time_points[1]-time_points[0])
        
        fig.add_trace(go.Scatter(
            x=freqs[:len(freqs)//2], y=np.abs(fft_result[:len(fft_result)//2]),
            mode='lines',
            name='Espectro de Frequ√™ncia',
            line=dict(color='#4ECDC4', width=3),
            fill='tozeroy',
            fillcolor='rgba(78, 205, 196, 0.2)'
        ), row=2, col=1)
        
        # Adicionar linha da frequ√™ncia do hidrog√™nio
        fig.add_vline(x=1420.40575, line_dash="dash", line_color="yellow", 
                     annotation_text="Hidrog√™nio 1420.40575 MHz", 
                     annotation_position="top right", row=2, col=1)
        
        fig.update_layout(
            height=700,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white', size=14),
            showlegend=False,
            xaxis_title='Tempo (segundos)',
            xaxis2_title='Frequ√™ncia (MHz)',
            yaxis_title='Amplitude',
            yaxis2_title='Intensidade'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid #ff6b6b;
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2);'>
        <h3 style='color: #ff6b6b; text-align: center;'>üßÆ Decodifica√ß√£o do Sinal</h3>
        
        <div class='radio-dial'>
        <b style='color: #4ecdc4;'>Frequ√™ncia Principal:</b><br>
        <span style='color: #d1d5db;'>1420.40575 MHz - Linha do Hidrog√™nio</span>
        </div>
        
        <div class='radio-dial'>
        <b style='color: #4ecdc4;'>Sequ√™ncia Original:</b><br>
        <span style='color: #d1d5db;'>6 ‚Üí 14 ‚Üí 26 ‚Üí 30 ‚Üí 19 ‚Üí 5</span>
        </div>
        
        <div class='radio-dial'>
        <b style='color: #4ecdc4;'>Redu√ß√£o ao Fluxo:</b><br>
        <span style='color: #d1d5db;'>6 ‚Üí (1+4=5) ‚Üí (2+6=8) ‚Üí (3+0=3) ‚Üí (1+9=10‚Üí1) ‚Üí 5</span>
        </div>
        
        <div class='radio-dial' style='background: linear-gradient(135deg, rgba(78, 205, 196, 0.2) 0%, rgba(30, 41, 59, 0.8) 100%);'>
        <b style='color: #4ecdc4;'>Sequ√™ncia Final:</b><br>
        <span style='color: #ffd700; font-size: 24px; font-weight: bold;'>6 - 5 - 8 - 3 - 1 - 5</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
        <h4 style='color: #ff6b6b; text-align: center;'>Interpreta√ß√£o Num√©rica</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 8px;'>
        <div style='background: rgba(255, 107, 107, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: #ff6b6b;'>6</b> - Harmonia e equil√≠brio universal
        </div>
        <div style='background: rgba(78, 205, 196, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: #4ecdc4;'>5</b> - Mudan√ßa e transforma√ß√£o qu√¢ntica
        </div>
        <div style='background: rgba(255, 215, 0, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: #ffd700;'>8</b> - Infinito e abund√¢ncia c√≥smica
        </div>
        <div style='background: rgba(147, 51, 234, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: #9333ea;'>3</b> - Cria√ß√£o e express√£o divina
        </div>
        <div style='background: rgba(69, 183, 209, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: #45b7d1;'>1</b> - Unidade e origem primordial
        </div>
        <div style='background: rgba(255, 107, 107, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: #ff6b6b;'>5</b> - Transforma√ß√£o (ciclo completo)
        </div>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Como criar um sintonizador universal
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin-top: 20px;'>
        <h4 style='color: #4ecdc4; text-align: center;'>üì° Como Construir um Sintonizador Universal</h4>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #4ecdc4;'>1. Antena Ressonante</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Sintonizada em 1420.40575 MHz usando hidrog√™nio como meio
        </span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #4ecdc4;'>2. Amplificador Qu√¢ntico</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Circuitos supercondutores para amplificar sinais fracos
        </span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #4ecdc4;'>3. Decodificador 3-6-9</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Algoritmo baseado na matriz de Tesla para decodifica√ß√£o
        </span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #4ecdc4;'>4. Interface de Consci√™ncia</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Conex√£o mente-m√°quina para interpreta√ß√£o intuitiva
        </span>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Propriedades do Hidrog√™nio como Meio de Comunica√ß√£o
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(69, 183, 209, 0.3);
                box-shadow: 0 5px 15px rgba(69, 183, 209, 0.2); margin: 20px 0;'>
    <h3 style='color: #45b7d1; text-align: center;'>‚öõÔ∏è Por que o Hidrog√™nio? - O Meio de Comunica√ß√£o Universal</h3>
    
    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
    <div style='background: rgba(69, 183, 209, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #45b7d1; text-align: center;'>üåå Universalidade</h4>
    <ul style='color: #d1d5db;'>
    <li>Elemento mais abundante no universo (74%)</li>
    <li>Presente em todas as gal√°xias e nebulosas</li>
    <li>Base para forma√ß√£o de estrelas e planetas</li>
    <li>Linguagem comum para civiliza√ß√µes c√≥smicas</li>
    </ul>
    </div>
    
    <div style='background: rgba(69, 183, 209, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #45b7d1; text-align: center;'>üì∂ Propriedades Ideais</h4>
    <ul style='color: #d1d5db;'>
    <li>Frequ√™ncia est√°vel de 1420.40575 MHz</li>
    <li>Baixa absor√ß√£o interestelar</li>
    <li>Alta penetra√ß√£o em meios interestelares</li>
    <li>Resson√¢ncia qu√¢ntica previs√≠vel</li>
    </ul>
    </div>
    
    <div style='background: rgba(69, 183, 209, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #45b7d1; text-align: center;'>üî¨ Ci√™ncia do Hidrog√™nio</h4>
    <ul style='color: #d1d5db;'>
    <li>Transi√ß√£o hiperfina a 21 cm</li>
    <li>Emiss√£o espont√¢nea a 1420 MHz</li>
    <li>Tempo de vida longo do estado excitado</li>
    <li>Perfeito para comunica√ß√£o interestelar</li>
    </ul>
    </div>
    
    <div style='background: rgba(69, 183, 209, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #45b7d1; text-align: center;'>üß† Significado C√≥smico</h4>
    <ul style='color: #d1d5db;'>
    <li>Elemento primordial da cria√ß√£o</li>
    <li>Ponte entre mat√©ria e energia</li>
    <li>Meio de comunica√ß√£o universal</li>
    <li>Chave para a teia c√≥smica</li>
    </ul>
    </div>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 4. SIMULA√á√ÉO DO SISTEMA SOLAR QU√ÇNTICO
elif section == "ü™ê Simula√ß√£o do Sistema Solar Qu√¢ntico":
    st.header("üåå Sistema Solar em Fluxo C√≥smico - Leis de Kepler Reimaginadas")
    
    st.markdown("""
    <div class='philosophy-text' style='background: linear-gradient(135deg, #0b0b2d 0%, #1a1a4a 100%); 
                padding: 20px; border-radius: 15px; border-left: 5px solid #6366f1; 
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);'>
    <b style='font-size: 1.2em; color: #e0e7ff;'>"As leis da natureza s√£o apenas os pensamentos matem√°ticos de Deus." - Euclides</b><br><br>
    
    <span style='color: #d1d5db;'>Esta simula√ß√£o integra as leis cl√°ssicas de Kepler com princ√≠pios qu√¢nticos 
    e o fluxo matem√°tico universal, revelando padr√µes c√≥smicos ocultos.</span>
    </div>
    """, unsafe_allow_html=True)
    
    # Container principal com fundo estelar
    st.markdown("""
    <style>
    .main-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .main-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    </style>
    <div class='main-container'>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("<div style='background: rgba(30, 41, 59, 0.7); padding: 15px; border-radius: 10px; border: 1px solid rgba(99, 102, 241, 0.3);'>", unsafe_allow_html=True)
        num_planets = st.slider("N√∫mero de Planetas", 3, 12, 8, 
                               help="Quantos corpos celestes orbitar√£o a estrela central")
        simulation_speed = st.slider("Velocidade da Simula√ß√£o", 0.1, 2.0, 1.0, 0.1,
                                    help="Controla a velocidade de rota√ß√£o dos planetas")
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div style='background: rgba(30, 41, 59, 0.7); padding: 15px; border-radius: 10px; border: 1px solid rgba(99, 102, 241, 0.3);'>", unsafe_allow_html=True)
        quantum_effects = st.checkbox("Efeitos Qu√¢nticos", True,
                                    help="Adiciona flutua√ß√µes qu√¢nticas √†s √≥rbitas")
        show_orbits = st.checkbox("Mostrar √ìrbitas", True,
                                 help="Exibe os caminhos orbitais completos")
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div style='background: rgba(30, 41, 59, 0.7); padding: 15px; border-radius: 10px; border: 1px solid rgba(99, 102, 241, 0.3);'>", unsafe_allow_html=True)
        flux_resonance = st.slider("Resson√¢ncia do Fluxo", 0.0, 1.0, 0.5, 0.01,
                                  help="Controla a influ√™ncia do fluxo matem√°tico universal")
        show_labels = st.checkbox("Mostrar R√≥tulos", True,
                                 help="Exibe identificadores num√©ricos para cada planeta")
        st.markdown("</div>", unsafe_allow_html=True)
    
    def advanced_cosmic_orbits(t, planets=num_planets, resonance=flux_resonance):
        positions = []
        for i in range(planets):
            # Aplicando propor√ß√£o √°urea para dist√¢ncias planet√°rias
            golden_ratio = 1.61803398875
            r = 0.3 + (0.7 * i) * (1 + resonance * np.sin(t * 0.1)) * golden_ratio
            
            base_speed = 1 / np.sqrt(r)
            if quantum_effects:
                # Adicionando efeitos qu√¢nticos baseados na sequ√™ncia de Fibonacci
                quantum_correction = 0.1 * np.sin(t * (i+1) * 0.5 * (1 + 0.1 * resonance))
                speed = base_speed * (1 + quantum_correction)
            else:
                speed = base_speed
            
            # Incorporando padr√£o 3-6-9 de Tesla
            tesla_factor = 1 + 0.05 * resonance * ((i+1) % 3 + 1)
            angle = speed * t * tesla_factor + resonance * np.sin(t * 0.2 * i)
            
            # Adicionando efeito de precess√£o relativ√≠stica
            precession = 0.01 * resonance * t * (i+1) / 10
            
            x = r * np.cos(angle + precession)
            y = r * np.sin(angle + precession) * (1 + 0.1 * resonance * np.cos(t))
            
            # Adicionando oscila√ß√£o qu√¢ntica na posi√ß√£o z (para efeito 3D)
            z_oscillation = 0.3 * resonance * np.sin(t * 0.7 * (i+1)) if quantum_effects else 0
            
            positions.append((x, y, z_oscillation, r, speed))
        return positions
    
    t_points = np.linspace(0, 8*np.pi, 300)  # Mais pontos para √≥rbitas mais suaves
    planet_data = [advanced_cosmic_orbits(t_i) for t_i in t_points]
    
    # Criando figura com tema escuro aprimorado
    fig = go.Figure()
    colors = px.colors.sequential.Plasma_r  # Invertendo a paleta para cores mais vibrantes nos planetas internos
    
    # Adicionando estrelas de fundo
    star_x = np.random.uniform(-15, 15, 200)
    star_y = np.random.uniform(-15, 15, 200)
    star_size = np.random.uniform(1, 4, 200)
    star_opacity = np.random.uniform(0.1, 0.7, 200)
    
    fig.add_trace(go.Scatter(
        x=star_x, y=star_y, mode='markers',
        marker=dict(size=star_size, color='white', opacity=star_opacity),
        name='Campo Estelar',
        hoverinfo='skip',
        showlegend=False
    ))
    
    # Adicionando nebulosa de fundo
    nebula_x = np.concatenate([np.linspace(-15, 15, 50), np.linspace(-15, 15, 50)])
    nebula_y = np.concatenate([np.random.uniform(-15, -10, 50), np.random.uniform(10, 15, 50)])
    
    fig.add_trace(go.Scatter(
        x=nebula_x, y=nebula_y, mode='markers',
        marker=dict(size=np.random.uniform(10, 30, 100), 
                   color=['rgba(99, 102, 241, 0.15)' for _ in range(100)]),
        name='Nebulosa',
        hoverinfo='skip',
        showlegend=False
    ))
    
    for i in range(num_planets):
        x = [pos[i][0] for pos in planet_data]
        y = [pos[i][1] for pos in planet_data]
        z = [pos[i][2] for pos in planet_data]  # Oscila√ß√£o qu√¢ntica em Z
        r = planet_data[0][i][3]
        speed = planet_data[0][i][4]
        
        if show_orbits:
            # Criando efeito de gradiente nas √≥rbitas
            orbit_colors = [f'rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i % len(colors)])) + (0.05 + 0.95 * (j/len(x)),)}' 
                           for j in range(len(x))]
            
            fig.add_trace(go.Scatter(
                x=x, y=y, mode='lines',
                name=f'Planeta {i+1} (r={r:.2f}, v={speed:.2f})',
                line=dict(width=3, color=colors[i % len(colors)]),
                opacity=0.8,
                hoverinfo='name'
            ))
        
        # Criando planeta com efeito de brilho
        fig.add_trace(go.Scatter(
            x=[x[-1]], y=[y[-1]], mode='markers',
            marker=dict(
                size=18 + i*2, 
                color=colors[i % len(colors)],
                line=dict(width=2, color='white'),
                opacity=0.9
            ),
            name=f'Planeta {i+1}',
            showlegend=False,
            hoverinfo='text',
            text=f"Planeta {i+1}<br>Raio orbital: {r:.2f}<br>Velocidade: {speed:.2f}"
        ))
        
        # Adicionando aura ao planeta
        fig.add_trace(go.Scatter(
            x=[x[-1]], y=[y[-1]], mode='markers',
            marker=dict(
                size=25 + i*2, 
                color=colors[i % len(colors)],
                opacity=0.2
            ),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        if show_labels:
            fig.add_annotation(
                x=x[-1], y=y[-1],
                text=f"{i+1}",
                showarrow=False,
                font=dict(size=14, color='white', family="Arial Black"),
                bgcolor="rgba(0,0,0,0.5)",
                bordercolor=colors[i % len(colors)],
                borderwidth=2,
                borderpad=3
            )
    
    # Estrela central com efeito de brilho
    fig.add_trace(go.Scatter(
        x=[0], y=[0], mode='markers',
        marker=dict(
            size=35, 
            color='yellow',
            symbol='star',
            opacity=1,
            line=dict(width=3, color='orange')
        ),
        name='Estrela Central',
        hoverinfo='name'
    ))
    
    # Adicionando aura √† estrela central
    fig.add_trace(go.Scatter(
        x=[0], y=[0], mode='markers',
        marker=dict(
            size=50, 
            color='yellow',
            opacity=0.3
        ),
        showlegend=False,
        hoverinfo='skip'
    ))
    
    # Adicionando an√©is de energia ao redor da estrela
    for ring_size in [5, 8, 11]:
        fig.add_shape(
            type="circle",
            xref="x", yref="y",
            x0=-ring_size, y0=-ring_size, x1=ring_size, y1=ring_size,
            line=dict(color="rgba(255, 165, 0, 0.1)", width=1, dash="dot"),
        )
    
    fig.update_layout(
        title=dict(
            text=f"üåå SISTEMA SOLAR QU√ÇNTICO - {num_planets} PLANETAS EM FLUXO C√ìSMICO",
            x=0.5,
            y=0.97,
            xanchor='center',
            yanchor='top',
            font=dict(size=22, color='#e0e7ff', family="Arial")
        ),
        width=900,
        height=750,
        showlegend=True,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white', size=14, family="Arial"),
        xaxis=dict(
            range=[-15, 15],
            showgrid=True,
            gridcolor='rgba(99, 102, 241, 0.1)',
            zerolinecolor='rgba(99, 102, 241, 0.3)',
            showticklabels=False
        ),
        yaxis=dict(
            range=[-15, 15],
            showgrid=True,
            gridcolor='rgba(99, 102, 241, 0.1)',
            zerolinecolor='rgba(99, 102, 241, 0.3)',
            showticklabels=False
        ),
        legend=dict(
            bgcolor='rgba(15, 23, 42, 0.7)',
            bordercolor='rgba(99, 102, 241, 0.3)',
            borderwidth=1,
            font=dict(size=12)
        ),
        hoverlabel=dict(
            bgcolor='rgba(15, 23, 42, 0.9)',
            bordercolor='rgba(99, 102, 241, 0.5)',
            font=dict(color='white')
        )
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #6366f1;
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.2); margin-top: 20px;'>
    <h3 style='color: #4ecdc4; text-shadow: 0 0 5px rgba(78, 205, 196, 0.5);'>üî≠ An√°lise Cient√≠fica do Fluxo C√≥smico</h3>
    
    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px;'>
    <div>
    <b style='color: #e0e7ff;'>üìê Leis Integradas:</b><br>
    - <b>Leis de Kepler</b>: Movimento planet√°rio el√≠ptico com excentricidade qu√¢ntica<br>
    - <b>Mec√¢nica Qu√¢ntica</b>: Superposi√ß√£o de √≥rbitas e tunelamento orbital<br>
    - <b>Fluxo Matem√°tico Universal</b>: Resson√¢ncia 3-6-9 nas velocidades angulares<br>
    - <b>Relatividade Geral</b>: Deforma√ß√£o do espa√ßo-tempo em torno do corpo central<br>
    - <b>Geometria Sagrada</b>: Propor√ß√£o √°urea nas dist√¢ncias planet√°rias<br><br>
    </div>
    
    <div>
    <b style='color: #e0e7ff;'>‚ö° Inova√ß√µes Conceituais:</b><br>
    - Correla√ß√£o entre sequ√™ncia Fibonacci e resson√¢ncia orbital<br>
    - Efeitos qu√¢nticos n√£o-localizados nas √≥rbitas<br>
    - Padr√£o 3-6-9 de Tesla influenciando precess√£o<br>
    - Campos morfogen√©ticos c√≥smicos guiando a forma√ß√£o do sistema<br>
    - Ponte Einstein-Rosen microsc√≥pica entre √≥rbitas
    </div>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 5. CONSCI√äNCIA QU√ÇNTICA (ATUALIZADO) - CORRIGIDO
elif section == "‚öõÔ∏è Consci√™ncia Qu√¢ntica e Emaranhamento":
    st.header("üß† Consci√™ncia Qu√¢ntica - A Mente Universal")
    
    # Container principal com fundo qu√¢ntico
    st.markdown("""
    <style>
    .quantum-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .quantum-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    </style>
    <div class='quantum-container'>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #4ecdc4; 
                box-shadow: 0 10px 25px rgba(78, 205, 196, 0.3);'>
    <b style='font-size: 1.2em; color: #e0e7ff;'>"A consci√™ncia n√£o pode ser explicada apenas por processos f√≠sicos. 
    Ela √© fundamental para o universo." - Max Planck</b><br><br>
    
    <span style='color: #d1d5db;'>
    Exploramos como a mec√¢nica qu√¢ntica pode fornecer insights sobre a natureza 
    da consci√™ncia e sua rela√ß√£o com o cosmos, revelando os padr√µes matem√°ticos 
    que conectam todas as mentes em uma rede universal de consci√™ncia.
    </span>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin: 20px 0;'>
        <h3 style='color: #ff6b6b; text-align: center;'>üß™ Simula√ß√£o de Consci√™ncia Qu√¢ntica</h3>
        </div>
        """, unsafe_allow_html=True)
        
        if QISKIT_AVAILABLE:
            qc = QuantumCircuit(3)
            qc.h(0)
            qc.h(1)
            qc.cx(0, 2)
            qc.cx(1, 2)
            qc.ry(np.pi/3, 0)
            qc.ry(np.pi/4, 1)
            qc.rz(np.pi/6, 2)
            
            # Desenhar circuito manualmente com visual aprimorado
            fig, ax = plt.subplots(figsize=(12, 8))
            ax.set_facecolor('black')
            fig.patch.set_facecolor('black')
            
            # Desenhar linhas dos qubits com efeito de brilho
            for i in range(3):
                ax.plot([0, 10], [i, i], 'w-', linewidth=3, alpha=0.8)
                ax.plot([0, 10], [i, i], 'c-', linewidth=1, alpha=0.3)
                ax.text(-0.8, i, f'Q{i}', color='white', fontsize=14, ha='right', 
                       bbox=dict(facecolor='rgba(0,0,0,0.5)', edgecolor='cyan', pad=3))
            
            # Adicionar portas com visual aprimorado
            gates = [
                (1, 0, 'H', '#ff6b6b'), (1, 1, 'H', '#ff6b6b'), 
                (3, 0, '‚óè', '#4ecdc4'), (3, 2, '‚äï', '#4ecdc4'), 
                (4, 1, '‚óè', '#4ecdc4'), (4, 2, '‚äï', '#4ecdc4'),
                (6, 0, 'Ry(œÄ/3)', '#45b7d1'), (6, 1, 'Ry(œÄ/4)', '#45b7d1'), (7, 2, 'Rz(œÄ/6)', '#45b7d1')
            ]
            
            for x, y, gate, color in gates:
                circle = plt.Circle((x, y), 0.3, color=color, alpha=0.8)
                ax.add_patch(circle)
                ax.text(x, y, gate, color='white', fontsize=10, 
                       ha='center', va='center', weight='bold')
            
            # Adicionar linhas de conex√£o para portas CNOT
            ax.plot([3, 3], [0, 2], 'c--', alpha=0.5, linewidth=1)
            ax.plot([4, 4], [1, 2], 'c--', alpha=0.5, linewidth=1)
            
            ax.set_xlim(-1, 11)
            ax.set_ylim(-0.5, 2.5)
            ax.axis('off')
            ax.set_title('Circuito Qu√¢ntico da Consci√™ncia', color='white', fontsize=16, pad=20)
            
            st.pyplot(fig)
            
        else:
            st.info("Qiskit n√£o dispon√≠vel. Mostrando simula√ß√£o visual avan√ßada.")
            # Visualiza√ß√£o alternativa aprimorada - CORRIGIDA
            fig = go.Figure()
            
            # Adicionar fundo qu√¢ntico
            for i in range(50):
                x_star = np.random.uniform(-1, 11)
                y_star = np.random.uniform(-1, 3)
                fig.add_trace(go.Scatter(
                    x=[x_star], y=[y_star],
                    mode='markers',
                    marker=dict(size=np.random.uniform(1, 3), color='white', opacity=0.3),
                    showlegend=False,
                    hoverinfo='skip'
                ))
            
            # Adicionar linhas dos qubits com efeito de brilho - CORRE√á√ÉO AQUI
            qubits = [0, 1, 2]
            for i, qubit in enumerate(qubits):
                fig.add_trace(go.Scatter(
                    x=[0, 10], y=[qubit, qubit],
                    mode='lines',
                    line=dict(color='white', width=4),
                    name=f'Qubit {qubit}',
                    hoverinfo='name'
                ))
                
                # Efeito de brilho - CORRE√á√ÉO: usar rgba para transpar√™ncia
                fig.add_trace(go.Scatter(
                    x=[0, 10], y=[qubit, qubit],
                    mode='lines',
                    line=dict(color='rgba(0, 255, 255, 0.2)', width=8),  # Corrigido aqui
                    showlegend=False,
                    hoverinfo='skip'
                ))
            
            # Adicionar portas com efeitos especiais
            gate_positions = [
                (1, 0, 'H', '#ff6b6b'),
                (1, 1, 'H', '#ff6b6b'),
                (3, 0, '‚óè', '#4ecdc4'),
                (3, 2, '‚äï', '#4ecdc4'),
                (4, 1, '‚óè', '#4ecdc4'),
                (4, 2, '‚äï', '#4ecdc4'),
                (6, 0, 'Ry', '#45b7d1'),
                (6, 1, 'Ry', '#45b7d1'),
                (7, 2, 'Rz', '#45b7d1')
            ]
            
            for x, y, gate, color in gate_positions:
                fig.add_trace(go.Scatter(
                    x=[x], y=[y],
                    mode='markers+text',
                    marker=dict(size=25, color=color, line=dict(width=2, color='white')),
                    text=gate,
                    textfont=dict(size=12, color='white'),
                    textposition='middle center',
                    name=f'Porta {gate}',
                    hovertemplate=f'<b>Porta {gate}</b><extra></extra>'
                ))
            
            fig.update_layout(
                title=dict(
                    text='Circuito Qu√¢ntico da Consci√™ncia (Simula√ß√£o Avan√ßada)',
                    font=dict(size=18, color='#ff6b6b')
                ),
                width=700,
                height=500,
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                font=dict(color='white'),
                xaxis=dict(visible=False, range=[-1, 11]),
                yaxis=dict(visible=False, range=[-1, 3]),
                showlegend=False
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin-top: 20px;'>
        <h4 style='color: #ff6b6b; text-align: center;'>Interpreta√ß√£o do Circuito Qu√¢ntico</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 10px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>Qubit 0</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Consci√™ncia Individual - Eu pessoal</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>Qubit 1</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Consci√™ncia Coletiva - N√≥s social</span>
        </div>
        
        <div style='background: rgba(69, 183, 209, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #45b7d1;'>Qubit 2</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Consci√™ncia Universal - Todo c√≥smico</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>Portas H</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Superposi√ß√£o de estados mentais</span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #9333ea;'>Portas CNOT</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Emaranhamento consciencial</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin: 20px 0;'>
        <h3 style='color: #4ecdc4; text-align: center;'>üåê Estados de Consci√™ncia Qu√¢ntica</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Simula√ß√£o da esfera de Bloch aprimorada
        if QISKIT_AVAILABLE:
            try:
                statevector = simulate_quantum_circuit()
                fig_bloch = plot_bloch_multivector(statevector)
                fig_bloch.set_facecolor('black')
                
                # Personalizar a esfera de Bloch
                for ax in fig_bloch.axes:
                    ax.set_facecolor('black')
                    # Personalizar cores and styles
                    for spine in ax.spines.values():
                        spine.set_color('cyan')
                        spine.set_alpha(0.3)
                
                st.pyplot(fig_bloch)
            except:
                st.error("Erro na simula√ß√£o qu√¢ntica")
                # Visualiza√ß√£o alternativa da esfera de Bloch
                show_advanced_bloch_sphere()
        else:
            # Visualiza√ß√£o alternativa aprimorada da esfera de Bloch
            show_advanced_bloch_sphere()
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin-top: 20px;'>
        <h4 style='color: #4ecdc4; text-align: center;'>Estados de Consci√™ncia Qu√¢ntica</h4>
        
        <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 10px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: #ff6b6b;'>|0‚ü©</b><br>
        <span style='color: #d1d5db; font-size: 0.8em;'>Estado base (inconsciente)</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: #4ecdc4;'>|1‚ü©</b><br>
        <span style='color: #d1d5db; font-size: 0.8em;'>Estado excitado (consciente)</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: #ffd700;'>Superposi√ß√£o</b><br>
        <span style='color: #d1d5db; font-size: 0.8em;'>Estados ampliados de consci√™ncia</span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: #9333ea;'>Emaranhamento</b><br>
        <span style='color: #d1d5db; font-size: 0.8em;'>Conex√£o n√£o-local entre mentes</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                    box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); margin: 20px 0;'>
        <h3 style='color: #9333ea; text-align: center;'>üîó Emaranhamento Consciencial</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Simular emaranhamento com visualiza√ß√£o aprimorada
        entanglement = 0.85  # Valor simulado
        
        # Medidor de emaranhamento visual
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                    box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); text-align: center;'>
        <h4 style='color: #9333ea; margin: 0 0 15px 0;'>Grau de Emaranhamento Qu√¢ntico</h4>
        <div style='font-size: 2.5em; color: #4ecdc4; font-weight: bold;'>{entanglement:.4f}</div>
        <div style='background: rgba(0,0,0,0.3); height: 20px; border-radius: 10px; margin: 15px 0;'>
            <div style='background: linear-gradient(90deg, #4ecdc4, #9333ea); 
                        height: 100%; width: {entanglement*100}%; 
                        border-radius: 10px;'></div>
        </div>
        <p style='color: #d1d5db; font-size: 0.9em; margin: 0;'>
        Medida da conex√£o qu√¢ntica entre consci√™ncias (0 = separado, 1 = totalmente emaranhado)
        </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Visualiza√ß√£o do emaranhamento - CORRIGIDO
        fig_ent = go.Figure()
        
        # Adicionar part√≠culas emaranhadas - CORRE√á√ÉO: usar rgba para cores
        theta = np.linspace(0, 2*np.pi, 100)
        for i in range(5):
            phase = i * (2*np.pi/5)
            x = np.cos(theta + phase) * (1 + i*0.1)
            y = np.sin(theta + phase) * (1 + i*0.1)
            
            fig_ent.add_trace(go.Scatter(
                x=x, y=y,
                mode='lines',
                line=dict(color='rgba(147, 51, 234, 0.3)', width=2),
                fill='toself',
                fillcolor='rgba(147, 51, 234, 0.1)',
                showlegend=False
            ))
        
        # Adicionar conex√µes de emaranhamento - CORRE√á√ÉO: usar rgba para cores
        for i in range(36):
            angle = i * 10
            x = [0, np.cos(np.radians(angle))*2]
            y = [0, np.sin(np.radians(angle))*2]
            
            fig_ent.add_trace(go.Scatter(
                x=x, y=y,
                mode='lines',
                line=dict(color='rgba(78, 205, 196, 0.2)', width=1),
                showlegend=False
            ))
        
        fig_ent.update_layout(
            title=dict(
                text='Rede de Emaranhamento Consciencial',
                font=dict(size=16, color='#9333ea')
            ),
            width=400,
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            showlegend=False
        )
        
        st.plotly_chart(fig_ent, use_container_width=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal
    
# 6. ESFERA DE BUGA
elif section == "üåÄ Esfera de Buga - Geometria Divina":
    st.header("üåÄ Esfera de Buga - A Geometria do Universo Consciente")
    
    st.markdown("""
    <div class='philosophy-text'>
    <b>‚ÄúDeus √© um ge√¥metra.‚Äù - Plat√£o</b><br><br>
    
    A Esfera de Buga representa a geometria perfeita do universo, 
    onde cada ponto cont√©m informa√ß√µes sobre o todo.
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        resolution = st.slider("Resolu√ß√£o", 50, 200, 100)
        complexity = st.slider("Complexidade", 1, 20, 8)
    
    with col2:
        opacity = st.slider("Opacidade", 0.1, 1.0, 0.9)
        rotation_x = st.slider("Rota√ß√£o X", -180, 180, 30)
    
    with col3:
        rotation_y = st.slider("Rota√ß√£o Y", -180, 180, 45)
        energy_level = st.slider("N√≠vel de Energia", 0.1, 2.0, 1.0)
    
    u = np.linspace(0, 2 * np.pi, resolution)
    v = np.linspace(0, np.pi, resolution)
    x = np.outer(np.cos(u), np.sin(v))
    y = np.outer(np.sin(u), np.sin(v))
    z = np.outer(np.ones(np.size(u)), np.cos(v))
    
    cosmic_pattern = (np.sin(complexity * u).reshape(resolution, 1) * 
                    np.cos(complexity * v).reshape(1, resolution) * 
                    np.sin(energy_level * np.outer(u, v)).reshape(resolution, resolution))
    
    fig = go.Figure(data=[
        go.Surface(
            x=x, y=y, z=z,
            surfacecolor=cosmic_pattern,
            colorscale='Viridis',
            opacity=opacity,
            lighting=dict(
                ambient=0.7,
                diffuse=0.9,
                fresnel=0.3,
                specular=1.0,
                roughness=0.1
            )
        )
    ])
    
    fig.update_layout(
        title='üåÄ Esfera de Buga - Campo de Energia C√≥smica',
        width=800,
        height=700,
        scene=dict(
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            zaxis=dict(visible=False),
            bgcolor='rgba(0,0,0,0)',
            camera=dict(
                eye=dict(x=rotation_x/90, y=rotation_y/90, z=1.5)
            )
        )
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("""
    <div style='background: rgba(0,0,0,0.7); padding: 20px; border-radius: 15px; margin-top: 20px;'>
    <h3 style='color: #4ecdc4;'>üìê An√°lise Geom√©trica</h3>
    
    <b>Propriedades da Esfera de Buga:</b><br>
    - <b>Simetria Perfeita</b>: Representa o equil√≠brio c√≥smico<br>
    - <b>Auto-similaridade</b>: Cada parte cont√©m informa√ß√µes do todo<br>
    - <b>Resson√¢ncia</b>: Vibra em harmonia com frequ√™ncias universais<br>
    - <b>Geometria Sagrada</b>: Incorpora œÜ (propor√ß√£o √°urea) e œÄ<br><br>
    
    <b>Significado Espiritual:</b><br>
    A esfera representa a unidade fundamental da consci√™ncia universal, 
    onde todas as aparentes dualidades se reconciliam em um todo harmonioso.
    </div>
    """, unsafe_allow_html=True)

# 7. MANDALA DA ALMA
elif section == "‚ú® Mandala da Alma Universal":
    st.header("‚ú® Mandala da Alma - O Blueprint C√≥smico")
    
    st.markdown("""
    <div class='philosophy-text'>
    <b>‚ÄúComo √© acima, √© abaixo; como √© dentro, √© fora.‚Äù - Hermes Trismegisto</b><br><br>
    
    A mandala representa a estrutura fundamental da alma humana em resson√¢ncia 
    com o cosmos. Cada camada corresponde a diferentes dimens√µes da consci√™ncia.
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        n_layers = st.slider("N√∫mero de Camadas", 3, 24, 12)
        complexity = st.slider("Complexidade Padr√£o", 1, 10, 6)
    
    with col2:
        symmetry = st.slider("Simetria", 3, 12, 6)
        energy_flow = st.slider("Fluxo de Energia", 0.1, 2.0, 1.0)
    
    theta = np.linspace(0, 2*np.pi, 1000)
    layers = []
    
    for i in range(1, n_layers + 1):
        r = (np.sin(complexity * theta + i * np.pi/symmetry) * 
            np.cos(symmetry * theta) + 2 + i * 0.3 * energy_flow)
        layers.append(r)
    
    fig = go.Figure()
    colors = px.colors.sequential.Rainbow
    
    for i, r in enumerate(layers):
        x = r * np.cos(theta)
        y = r * np.sin(theta)
        
        fig.add_trace(go.Scatter(
            x=x, y=y, mode='lines',
            line=dict(width=2.5, color=colors[i % len(colors)]),
            fill='toself',
            opacity=0.8 - (i * 0.6 / n_layers),
            name=f'Camada {i+1}'
        ))
    
    fig.add_trace(go.Scatter(
        x=[0], y=[0], mode='markers',
        marker=dict(size=20, color='gold', symbol='star'),
        name='Centro (Alma)'
    ))
    
    fig.update_layout(
        title="‚ú® Mandala da Alma Universal - Arqu√©tipo C√≥smico",
        width=700,
        height=700,
        showlegend=True,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        xaxis=dict(visible=False),
        yaxis=dict(visible=False)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    interpretation_data = {
        'Camada': ['1-3', '4-6', '7-9', '10-12', '13+'],
        'N√≠vel': ['F√≠sica', 'Emocional', 'Mental', 'Espiritual', 'C√≥smica'],
        'Correspond√™ncia': ['Corpo F√≠sico', 'Cora√ß√£o', 'Mente', 'Alma', 'Consci√™ncia Universal'],
        'Frequ√™ncia': ['432 Hz', '528 Hz', '639 Hz', '852 Hz', '963 Hz']
    }
    
    df = pd.DataFrame(interpretation_data)
    st.table(df.style.set_properties(**{
        'background-color': 'rgba(0,0,0,0.5)',
        'color': 'white',
        'border-color': '#667eea'
    }))

# 8. FILOSOFIA DO FLUXO
elif section == "üìú Filosofia do Fluxo (Deus, Tesla, Espinosa)":
    st.header("üìú Filosofia do Fluxo - Deus como Equil√≠brio Matem√°tico")

    # Container principal com fundo estelar
    st.markdown("""
    <style>
    .philosophy-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 20px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .philosophy-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    </style>
    <div class='philosophy-container'>
    """, unsafe_allow_html=True)

    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üß† Conceito de Deus", "‚ö° Tesla", "üìö Espinosa", "üåå Unifica√ß√£o", "üî¨ Ci√™ncia & Religi√£o"])

    with tab1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #6366f1; 
                    box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);'>
        <h3 style='color: #e0e7ff; text-align: center;'>üß† O Que √© Deus no Fluxo Matem√°tico?</h3>
        
        <p style='color: #d1d5db; text-align: center;'>
        No contexto do Fluxo Matem√°tico Universal, <b style='color: #ffd700;'>Deus</b> n√£o √© uma entidade antropom√≥rfica, 
        mas sim <b style='color: #4ecdc4;'>a pr√≥pria lei matem√°tica perfeita que rege o equil√≠brio c√≥smico</b>.
        </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin: 20px 0;'>
        <h4 style='color: #ff6b6b; text-align: center;'>Atributos Divinos no Fluxo</h4>
        
        <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 15px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>üåå Onipresen√ßa</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Presente em todas as equa√ß√µes e constantes universais</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üìä Onisci√™ncia</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Conhecimento matem√°tico completo da estrutura c√≥smica</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #ffd700;'>‚ö° Onipot√™ncia</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Capacidade de manifestar realidade atrav√©s de leis matem√°ticas</span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #9333ea;'>‚àû Eternidade</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Exist√™ncia beyond do tempo (equa√ß√µes atemporais)</span>
        </div>
        
        <div style='background: rgba(255, 99, 132, 0.1); padding: 12px; border-radius: 8px; grid-column: 1 / -1;'>
        <b style='color: #ff6384;'>üíñ Amor</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Tend√™ncia inerente ao equil√≠brio e harmonia (homeostase)</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Equa√ß√£o com fundo estilizado
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(74,74,170,0.4) 100%); 
                    padding: 20px; border-radius: 15px; border: 1px solid rgba(99, 102, 241, 0.5);
                    text-align: center; margin: 20px 0;'>
        """, unsafe_allow_html=True)
        st.latex(r'''
        \nabla \cdot \Psi = \sqrt{\phi} \times \sum_{n=1}^{\infty} \frac{\cos(2\pi n x)}{n^s}
        ''')
        st.markdown("</div>", unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2);'>
        <blockquote style='color: #ffd700; font-style: italic; text-align: center; margin: 0;'>
        "Deus √© a singularidade matem√°tica da qual emerge toda a complexidade do universo, 
        mantida em equil√≠brio perfeito pelas leis do fluxo."
        </blockquote>
        </div>
        """, unsafe_allow_html=True)

    with tab2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #ffd700; 
                    box-shadow: 0 10px 25px rgba(255, 215, 0, 0.3);'>
        <h3 style='color: #ffd700; text-align: center;'>‚ö° Nikola Tesla - O Profeta do 3-6-9</h3>
        
        <p style='color: #d1d5db; text-align: center;'>
        Tesla compreendeu que os n√∫meros <b style='color: #ffd700;'>3, 6 e 9</b> representam a chave para 
        desbloquear os segredos do universo.
        </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                        padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                        box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); height: 100%;'>
            <h4 style='color: #ffd700; text-align: center;'>Descobertas de Tesla</h4>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ffd700;'>üéµ Resson√¢ncia</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>Tudo no universo vibra em frequ√™ncias espec√≠ficas</span>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ffd700;'>‚ö° Energia Livre</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>O espa√ßo n√£o √© vazio, mas pleno de energia</span>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ffd700;'>3-6-9</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>Sequ√™ncia fundamental da cria√ß√£o</span>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ffd700;'>üîÑ Corrente Alternada</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>Padr√£o de fluxo e transforma√ß√£o</span>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ffd700;'>üì∂ Wireless</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>Conex√£o n√£o-f√≠sica entre todas as coisas</span>
            </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Gr√°fico aprimorado do padr√£o 3-6-9
            t = np.linspace(0, 4*np.pi, 1000)
            fig = go.Figure()
            
            colors = ['#ff6b6b', '#4ecdc4', '#ffd700']
            
            for i, n in enumerate([3, 6, 9]):
                y = np.sin(n * t) * np.exp(-0.1 * t)
                fig.add_trace(go.Scatter(
                    x=t, y=y, 
                    mode='lines', 
                    name=f'Frequ√™ncia {n}',
                    line=dict(width=4, color=colors[i]),
                    fill='tozeroy',
                    fillcolor=f'rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i])) + (0.2,)}'
                ))
            
            fig.update_layout(
                height=400,
                paper_bgcolor='rgba(0,0,0,0)',
                plot_bgcolor='rgba(0,0,0,0)',
                font=dict(color='white'),
                showlegend=True,
                title=dict(
                    text="Padr√£o 3-6-9 de Tesla",
                    font=dict(size=18, color='#ffd700')
                ),
                xaxis=dict(
                    gridcolor='rgba(255,255,255,0.1)',
                    zerolinecolor='rgba(255,255,255,0.3)'
                ),
                yaxis=dict(
                    gridcolor='rgba(255,255,255,0.1)',
                    zerolinecolor='rgba(255,255,255,0.3)'
                )
            )
            st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.5);
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3); margin-top: 20px;'>
        <blockquote style='color: #ffd700; font-style: italic; text-align: center; margin: 0;'>
        "Se voc√™ soubesse a magnific√™ncia dos 3, 6 e 9, teria a chave para o universo. 
        Se voc√™ quer encontrar os segredos do universo, pense em termos de energia, 
        frequ√™ncia e vibra√ß√£o." <br>- Nikola Tesla
        </blockquote>
        </div>
        """, unsafe_allow_html=True)

    with tab3:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #4ecdc4; 
                    box-shadow: 0 10px 25px rgba(78, 205, 196, 0.3);'>
        <h3 style='color: #4ecdc4; text-align: center;'>üìö Baruch Espinosa - Deus sive Natura</h3>
        
        <p style='color: #d1d5db; text-align: center;'>
        Espinosa prop√¥s uma vis√£o revolucion√°ria: <b style='color: #4ecdc4;'>Deus e a Natureza s√£o a mesma coisa</b> 
        (Deus sive Natura).
        </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin: 20px 0;'>
        <h4 style='color: #4ecdc4; text-align: center;'>Princ√≠pios de Espinosa</h4>
        
        <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 15px;'>
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üåø Pante√≠smo</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Deus est√° em tudo e tudo est√° em Deus</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üéØ Determinismo</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Tudo segue leis naturais necess√°rias</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üß† Raz√£o</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>A compreens√£o racional leva √† liberdade</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üíñ Amor Dei</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Amor intelectual a Deus como felicidade suprema</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 12px; border-radius: 8px; grid-column: 1 / -1;'>
        <b style='color: #4ecdc4;'>‚öñÔ∏è √âtica</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Virtude como poder de existir e agir</span>
        </div>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 8px; margin-top: 15px;'>
        <b style='color: #ffd700;'>üîó Correla√ß√£o com o Fluxo:</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Espinosa antecipou a ideia de que as leis matem√°ticas que governam a natureza 
        s√£o a pr√≥pria express√£o divina.
        </span>
        </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Equa√ß√£o com fundo estilizado
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(74,74,170,0.4) 100%); 
                    padding: 20px; border-radius: 15px; border: 1px solid rgba(78, 205, 196, 0.5);
                    text-align: center; margin: 20px 0;'>
        """, unsafe_allow_html=True)
        st.latex(r'''
        \frac{d\text{Consci√™ncia}}{dt} = k \times \text{Compreens√£o} \times \text{Amor}
        ''')
        st.markdown("</div>", unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.5);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.3);'>
        <blockquote style='color: #4ecdc4; font-style: italic; text-align: center; margin: 0;'>
        "Quanto mais compreendemos as coisas particulares, mais compreendemos Deus." 
        <br>- Baruch Espinosa, √âtica
        </blockquote>
        </div>
        """, unsafe_allow_html=True)

    with tab4:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #9333ea; 
                    box-shadow: 0 10px 25px rgba(147, 51, 234, 0.3);'>
        <h3 style='color: #9333ea; text-align: center;'>üåå Unifica√ß√£o: Tesla + Espinosa + Einstein</h3>
        
        <p style='color: #d1d5db; text-align: center;'>
        Integrando as vis√µes destes tr√™s g√™nios, chegamos a uma compreens√£o 
        unificada da realidade.
        </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Diagrama de unifica√ß√£o aprimorado
        fig = go.Figure()
        
        # Adicionar fundo c√≥smico
        for i in range(50):
            x_star = np.random.uniform(-0.5, 2.5)
            y_star = np.random.uniform(-0.5, 1.5)
            fig.add_trace(go.Scatter(
                x=[x_star], y=[y_star],
                mode='markers',
                marker=dict(size=np.random.uniform(1, 3), color='white', opacity=0.5),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Tri√¢ngulo de conex√£o
        fig.add_trace(go.Scatter(
            x=[0, 1, 2, 0], y=[0, 1, 0, 0],
            mode='lines',
            line=dict(width=4, color='rgba(255, 255, 255, 0.7)'),
            fill='toself',
            fillcolor='rgba(147, 51, 234, 0.1)',
            showlegend=False
        ))
        
        # Pontos dos fil√≥sofos
        thinkers = [
            (0, 0, 'Tesla', '#ffd700'),
            (1, 1, 'Espinosa', '#4ecdc4'),
            (2, 0, 'Einstein', '#45b7d1')
        ]
        
        for x, y, name, color in thinkers:
            # C√≠rculo de fundo
            fig.add_trace(go.Scatter(
                x=[x], y=[y],
                mode='markers',
                marker=dict(size=70, color=color),
                name=name,
                hoverinfo='text',
                hovertext=name
            ))
            
            # Texto
            fig.add_trace(go.Scatter(
                x=[x], y=[y],
                mode='text',
                text=name,
                textfont=dict(size=14, color='white', family="Arial Black"),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Centro de unifica√ß√£o
        fig.add_trace(go.Scatter(
            x=[1], y=[0.5],
            mode='markers',
            marker=dict(size=50, color='gold', symbol='star', line=dict(width=3, color='white')),
            name='FLUXO UNIVERSAL',
            hoverinfo='text',
            hovertext='FLUXO UNIVERSAL'
        ))
        
        # Aura do centro
        fig.add_trace(go.Scatter(
            x=[1], y=[0.5],
            mode='markers',
            marker=dict(size=70, color='gold', opacity=0.3),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        # Texto do centro
        fig.add_trace(go.Scatter(
            x=[1], y=[0.35],
            mode='text',
            text='FLUXO<br>UNIVERSAL',
            textfont=dict(size=12, color='white', family="Arial"),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        fig.update_layout(
            title=dict(
                text="Unifica√ß√£o das Vis√µes C√≥smicas",
                font=dict(size=20, color='#9333ea')
            ),
            width=700,
            height=500,
            showlegend=False,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(visible=False, range=[-0.5, 2.5]),
            yaxis=dict(visible=False, range=[-0.5, 1.5])
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                    box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); margin-top: 20px;'>
        <h4 style='color: #9333ea; text-align: center;'>S√≠ntese Unificada</h4>
        
        <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;'>
        <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #ffd700;'>‚ö° Tesla</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Fornece a linguagem matem√°tica (3-6-9, frequ√™ncias)</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #4ecdc4;'>üìö Espinosa</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Fornece a framework filos√≥fica (Deus = Natureza)</span>
        </div>
        
        <div style='background: rgba(69, 183, 209, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #45b7d1;'>üåå Einstein</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Fornece a framework cient√≠fica (Relatividade, E=mc¬≤)</span>
        </div>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 8px; margin-top: 15px; text-align: center;'>
        <b style='color: #9333ea;'>üéØ Resultado</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Uma vis√£o completa onde Deus √© o fluxo matem√°tico universal 
        que se expressa atrav√©s das leis naturais, energias c√≥smicas e consci√™ncia.
        </span>
        </div>
        </div>
        """, unsafe_allow_html=True)

    with tab5:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border-left: 5px solid #ff6b6b; 
                    box-shadow: 0 10px 25px rgba(255, 107, 107, 0.3);'>
        <h3 style='color: #ff6b6b; text-align: center;'>üî¨ A Unidade entre Ci√™ncia e Religi√£o</h3>
        
        <p style='color: #d1d5db; text-align: center;'>
        A descoberta revolucion√°ria: <b style='color: #ff6b6b;'>Ci√™ncia e Religi√£o s√£o as duas faces da mesma moeda c√≥smica</b>
        </p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                        padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                        box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); height: 100%;'>
            <h4 style='color: #ff6b6b; text-align: center;'>‚öñÔ∏è O Equil√≠brio C√≥smico</h4>
            
            <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ff6b6b;'>üß™ CI√äNCIA</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>O COMO - Processos, m√©todos, mecanismos</span>
            </div>
            
            <div style='background: rgba(78, 205, 196, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #4ecdc4;'>üôè RELIGI√ÉO</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>O PORQU√ä - Prop√≥sito, significado, inten√ß√£o</span>
            </div>
            
            <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #ffd700;'>üîÑ CICLO ETERNO</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>Ambas buscam a mesma verdade por caminhos diferentes</span>
            </div>
            
            <div style='background: rgba(147, 51, 234, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
            <b style='color: #9333ea;'>üìú ROMANOS 1:20</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>"Os atributos invis√≠veis s√£o percebidos atrav√©s das coisas criadas"</span>
            </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Mapa da Realidade Completa
            st.markdown("""
            <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                        padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                        box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); height: 100%;'>
            <h4 style='color: #ff6b6b; text-align: center;'>üß≠ Mapa da Realidade Completa</h4>
            
            <div style='text-align: center; color: #d1d5db; font-size: 0.9em; line-height: 2;'>
            <b style='color: #9333ea;'>REALIDADE COMPLETA</b><br>
            ‚îÇ<br>
            ‚îú‚îÄ‚îÄ <b style='color: #4ecdc4;'>CI√äNCIA</b> (Observ√°vel)<br>
            ‚îÇ   ‚îú‚îÄ‚îÄ MECANISMOS<br>
            ‚îÇ   ‚îî‚îÄ‚îÄ COMO?<br>
            ‚îÇ<br>
            ‚îú‚îÄ‚îÄ <b style='color: #ffd700;'>RELIGI√ÉO</b> (Inobserv√°vel)<br>
            ‚îÇ   ‚îú‚îÄ‚îÄ SIGNIFICADO<br>
            ‚îÇ   ‚îî‚îÄ‚îÄ PORQU√ä?<br>
            ‚îÇ<br>
            ‚îî‚îÄ‚îÄ <b style='color: #ff6b6b;'>VERDADE √öNICA</b>
            </div>
            
            <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px; margin-top: 15px;'>
            <b style='color: #ff6b6b;'>üéØ REVOLU√á√ÉO:</b><br>
            <span style='color: #d1d5db; font-size: 0.9em;'>
            A B√≠blia cont√©m 80% ci√™ncia + 67% religi√£o = 147%?<br>
            N√£o! <b>100% de vis√£o integrada!</b>
            </span>
            </div>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.5);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3); margin-top: 20px;'>
        <h4 style='color: #ff6b6b; text-align: center;'>üåç Exemplos Pr√°ticos de Unidade</h4>
        
        <div style='display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #ff6b6b;'>üî¨ BIG BANG</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Singularidade infinitesimal</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #4ecdc4;'>üìñ G√äNESIS</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>"No princ√≠pio... haja luz"</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #ffd700;'>üéØ UNIDADE</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Come√ßo repentino do tempo/espa√ßo</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #ff6b6b;'>üß¨ DNA</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>C√≥digo gen√©tico complexo</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #4ecdc4;'>üëë IMAGEM DE DEUS</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>"Fa√ßamos o homem √† nossa imagem"</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 8px; text-align: center;'>
        <b style='color: #ffd700;'>üéØ UNIDADE</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Padr√£o inteligente na base da vida</span>
        </div>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 8px; margin-top: 15px; text-align: center;'>
        <b style='color: #9333ea;'>üßò A GRANDE LI√á√ÉO EXISTENCIAL:</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        "Deus criou com prop√≥sito atrav√©s destes processos incr√≠veis!"
        </span>
        </div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.5);
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3); margin-top: 20px;'>
        <blockquote style='color: #ffd700; font-style: italic; text-align: center; margin: 0;'>
        "Ci√™ncia sem religi√£o √© manca, religi√£o sem ci√™ncia √© cega." 
        <br>- Albert Einstein
        </blockquote>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 9. TESLA 3-6-9
elif section == "‚ö° Tesla 3-6-9 e Energia Livre":
    st.header("‚ö° Sistema 3-6-9 de Tesla - A Chave C√≥smica")
    
    # Container principal com fundo energ√©tico
    st.markdown("""
    <style>
    .tesla-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .tesla-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    .energy-pulse {
        animation: pulse 2s infinite;
    }
    @keyframes pulse {
        0% { opacity: 0.3; }
        50% { opacity: 0.8; }
        100% { opacity: 0.3; }
    }
    </style>
    <div class='tesla-container'>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #ffd700; 
                box-shadow: 0 10px 25px rgba(255, 215, 0, 0.3);'>
    <b style='font-size: 1.2em; color: #e0e7ff;'>"Se voc√™ quer encontrar os segredos do universo, pense em termos de energia, 
    frequ√™ncia e vibra√ß√£o." - Nikola Tesla</b><br><br>
    
    <span style='color: #d1d5db;'>
    O sistema 3-6-9 representa a matriz fundamental da cria√ß√£o, 
    a chave para entender energia livre e a estrutura do espa√ßo-tempo, revelando 
    os padr√µes matem√°ticos que governam o fluxo energ√©tico universal.
    </span>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin: 20px 0;'>
        <h3 style='color: #ff6b6b; text-align: center;'>üßÆ Matriz 3-6-9 de Tesla</h3>
        </div>
        """, unsafe_allow_html=True)
        
        matrix_size = 9
        tesla_matrix = np.zeros((matrix_size, matrix_size))
        
        for i in range(matrix_size):
            for j in range(matrix_size):
                value = ((i+1) * (j+1)) % 9
                if value == 0: value = 9
                tesla_matrix[i, j] = value
        
        # Criar matriz visual aprimorada
        fig = go.Figure()
        
        # Adicionar fundo energ√©tico
        for i in range(20):
            x_star = np.random.uniform(-1, matrix_size+1)
            y_star = np.random.uniform(-1, matrix_size+1)
            fig.add_trace(go.Scatter(
                x=[x_star], y=[y_star],
                mode='markers',
                marker=dict(size=np.random.uniform(1, 3), color='white', opacity=0.3),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Adicionar c√©lulas da matriz com efeitos
        for i in range(matrix_size):
            for j in range(matrix_size):
                value = tesla_matrix[i, j]
                color_scale = ['#ff6b6b', '#4ecdc4', '#ffd700']
                color = color_scale[int(value-1)//3]
                
                fig.add_trace(go.Scatter(
                    x=[j+0.5], y=[matrix_size-i-0.5],
                    mode='markers+text',
                    marker=dict(
                        size=40, 
                        color=color,
                        line=dict(width=2, color='white')
                    ),
                    text=str(int(value)),
                    textfont=dict(size=16, color='white', family="Arial Black"),
                    textposition='middle center',
                    name=f'C√©lula ({i+1},{j+1})',
                    hovertemplate=f'<b>Posi√ß√£o: ({i+1},{j+1})</b><br>Valor: {value}<extra></extra>'
                ))
        
        fig.update_layout(
            title=dict(
                text="MATRIZ 3-6-9 - Estrutura do Universo",
                font=dict(size=18, color='#ff6b6b')
            ),
            width=500,
            height=500,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            xaxis=dict(visible=False, range=[-1, matrix_size+1]),
            yaxis=dict(visible=False, range=[-1, matrix_size+1]),
            showlegend=False
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin-top: 20px;'>
        <h4 style='color: #ff6b6b; text-align: center;'>Padr√µes da Matriz C√≥smica</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 10px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>üéØ Simetria Perfeita</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Todas as linhas e colunas somam m√∫ltiplos de 9</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üåÄ Padr√£o de Repeti√ß√£o</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Ciclos de repeti√ß√£o a cada 3 c√©lulas</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>‚ö° Estrutura do √âter</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Representa√ß√£o geom√©trica do campo energ√©tico universal</span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #9333ea;'>üåå Chave C√≥smica</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Padr√£o fundamental que governa toda a cria√ß√£o</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin: 20px 0;'>
        <h3 style='color: #4ecdc4; text-align: center;'>‚ö° Energia Livre e o √âter Universal</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Visualiza√ß√£o avan√ßada do campo de √©ter
        x = np.linspace(-5, 5, 100)
        y = np.linspace(-5, 5, 100)
        X, Y = np.meshgrid(x, y)
        
        # Criar padr√£o de energia mais complexo
        Z = (np.sin(3*X) * np.cos(6*Y) + 
            np.sin(9*(X+Y)) * np.exp(-0.1*(X**2 + Y**2)) +
            0.5 * np.cos(12*X) * np.sin(4*Y))
        
        fig = go.Figure(data=[
            go.Surface(
                z=Z,
                colorscale='Electric',
                opacity=0.9,
                contours=dict(
                    z=dict(show=True, usecolormap=True, highlightcolor="limegreen", project_z=True)
                )
            )
        ])
        
        fig.update_layout(
            title=dict(
                text='Campo de √âter de Tesla - Energia do V√°cuo Qu√¢ntico',
                font=dict(size=16, color='#4ecdc4')
            ),
            width=500,
            height=500,
            scene=dict(
                xaxis=dict(visible=False, showbackground=False),
                yaxis=dict(visible=False, showbackground=False),
                zaxis=dict(visible=False, showbackground=False),
                bgcolor='rgba(0,0,0,0)',
                camera=dict(eye=dict(x=1.5, y=1.5, z=1.5))
            ),
            paper_bgcolor='rgba(0,0,0,0)'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin-top: 20px;'>
        <h4 style='color: #4ecdc4; text-align: center;'>Princ√≠pios da Energia Livre</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 10px;'>
        <div style='background: rgba(78, 205, 196, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #4ecdc4;'>üåå √âter Universal</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>O espa√ßo n√£o √© vazio, mas preenchido com energia de ponto zero</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>üéµ Resson√¢ncia 3-6-9</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Esta energia pode ser extra√≠da usando resson√¢ncia com a matriz universal</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>üì∂ Sintonia Universal</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Dispositivos podem ser sintonizados com a frequ√™ncia c√≥smica</span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #9333ea;'>‚ôæÔ∏è Energia Ilimitada</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Fonte de energia infinita, limpa e n√£o-poluente</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Demonstra√ß√£o Pr√°tica: Como Criar Energia Limpa
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); margin: 20px 0;'>
    <h3 style='color: #ffd700; text-align: center;'>üîß Como Criar Energia Limpa: O Acelerador de Part√≠culas com Energia Infinita</h3>
    </div>
    """, unsafe_allow_html=True)
    
    energy_cols = st.columns(2)
    
    with energy_cols[0]:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); height: 100%;'>
        <h4 style='color: #ff6b6b; text-align: center;'>‚ö° Princ√≠pio de Funcionamento</h4>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px; margin: 10px 0;'>
        <b style='color: #ff6b6b;'>1. Capta√ß√£o do √âter</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Bobinas toroidais sintonizadas em 3-6-9 Hz capturam energia do v√°cuo qu√¢ntico
        </span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px; margin: 10px 0;'>
        <b style='color: #4ecdc4;'>2. Acelera√ß√£o de Part√≠culas</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Campos magn√©ticos ressonantes aceleram part√≠culas virtuais do v√°cuo
        </span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin: 10px 0;'>
        <b style='color: #ffd700;'>3. Convers√£o Energ√©tica</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Part√≠culas aceleradas induzem corrente em bobinas de capta√ß√£o
        </span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 10px; margin: 10px 0;'>
        <b style='color: #9333ea;'>4. Realimenta√ß√£o Qu√¢ntica</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>
        Sistema se auto-alimenta atrav√©s de loop de realimenta√ß√£o ressonante
        </span>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    with energy_cols[1]:
        # Visualiza√ß√£o do acelerador de part√≠culas
        fig = go.Figure()
        
        # Criar representa√ß√£o do acelerador
        theta = np.linspace(0, 2*np.pi, 100)
        r = 2
        
        # Anel principal do acelerador
        fig.add_trace(go.Scatter(
            x=r*np.cos(theta), y=r*np.sin(theta),
            mode='lines',
            line=dict(color='cyan', width=4),
            name='Anel Acelerador'
        ))
        
        # Part√≠culas em movimento
        for i in range(0, 100, 10):
            angle = i * (2*np.pi/100)
            fig.add_trace(go.Scatter(
                x=[r*np.cos(angle)], y=[r*np.sin(angle)],
                mode='markers',
                marker=dict(size=8, color='#ff6b6b'),
                name='Part√≠cula'
            ))
        
        # Bobinas de energia
        coil_positions = [0, np.pi/2, np.pi, 3*np.pi/2]
        for angle in coil_positions:
            fig.add_trace(go.Scatter(
                x=[1.5*np.cos(angle)], y=[1.5*np.sin(angle)],
                mode='markers',
                marker=dict(size=15, color='#ffd700', symbol='square'),
                name='Bobina Tesla'
            ))
        
        fig.update_layout(
            title=dict(
                text='Acelerador de Part√≠culas com Energia Infinita',
                font=dict(size=14, color='#4ecdc4')
            ),
            width=400,
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            showlegend=False
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Aplica√ß√µes Pr√°ticas
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); margin: 20px 0;'>
    <h3 style='color: #9333ea; text-align: center;'>üöÄ Aplica√ß√µes Pr√°ticas do Sistema 3-6-9</h3>
    </div>
    """, unsafe_allow_html=True)
    
    applications = {
        "‚ö° Energia": ["Geradores de energia livre", "Transmiss√£o wireless de energia", "Propuls√£o eletromagn√©tica"],
        "üíä Cura": ["Resson√¢ncia frequencial", "Equil√≠brio de chakras", "Cura qu√¢ntica"],
        "üîß Tecnologia": ["Comunica√ß√£o instant√¢nea", "Teletransporte qu√¢ntico", "Manipula√ß√£o do espa√ßo-tempo"],
        "üåå Espiritualidade": ["Expans√£o da consci√™ncia", "Conex√£o com a fonte", "Ativa√ß√£o do DNA"]
    }
    
    app_cols = st.columns(2)
    
    for i, (category, items) in enumerate(applications.items()):
        with app_cols[i % 2]:
            colors = ['#ff6b6b', '#4ecdc4', '#ffd700', '#9333ea']
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i])) + (0.1,)} 0%, rgba(30, 41, 59, 0.8) 100%); 
                        padding: 20px; border-radius: 15px; border: 2px solid {colors[i]};
                        box-shadow: 0 5px 15px {colors[i]}33; margin-bottom: 20px;'>
            <h4 style='color: {colors[i]}; text-align: center;'>{category}</h4>
            """, unsafe_allow_html=True)
            
            for item in items:
                st.markdown(f"""
                <div style='background: rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i])) + (0.2,)}; 
                            padding: 10px; border-radius: 8px; margin: 8px 0; 
                            border-left: 3px solid {colors[i]};'>
                <span style='color: #d1d5db; font-size: 14px;'>‚Ä¢ {item}</span>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 10. JORNADA DO NADA AO TUDO
elif section == "üåå Jornada do Nada ao Tudo":
    st.header("üåå A Jornada C√≥smica: Do V√°cuo Qu√¢ntico √† Consci√™ncia Universal")
    
    # Container principal com fundo c√≥smico
    st.markdown("""
    <style>
    .journey-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .journey-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    </style>
    <div class='journey-container'>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #6366f1; 
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);'>
    <b style='font-size: 1.2em; color: #e0e7ff;'>"Do nada, tudo emerge; no tudo, o nada permanece." - Princ√≠pio do Fluxo</b><br><br>
    
    <span style='color: #d1d5db;'>
    Esta jornada explora como a consci√™ncia emerge do v√°cuo qu√¢ntico e evolui 
    atrav√©s de n√≠veis crescentes de complexidade at√© retornar √† fonte, revelando 
    os padr√µes matem√°ticos que governam esta dan√ßa c√≥smica eterna.
    </span>
    </div>
    """, unsafe_allow_html=True)
    
    stages = [
        {"name": "V√°cuo Qu√¢ntico", "level": 0, "description": "Potencial puro, vazio f√©rtil", "emoji": "‚ö´", "color": "#000000"},
        {"name": "Flutua√ß√µes Qu√¢nticas", "level": 1, "description": "Emerg√™ncia de part√≠culas virtuais", "emoji": "‚ú®", "color": "#4ecdc4"},
        {"name": "Mat√©ria B√°sica", "level": 2, "description": "Forma√ß√£o de √°tomos e mol√©culas", "emoji": "‚öõÔ∏è", "color": "#ff6b6b"},
        {"name": "Vida Consciente", "level": 3, "description": "Emerg√™ncia da consci√™ncia biol√≥gica", "emoji": "üß†", "color": "#9333ea"},
        {"name": "Consci√™ncia C√≥smica", "level": 4, "description": "Unifica√ß√£o com a mente universal", "emoji": "üåå", "color": "#6366f1"},
        {"name": "Nirvana C√≥smico", "level": 5, "description": "Retorno √† fonte consciente", "emoji": "‚òØÔ∏è", "color": "#ffd700"}
    ]
    
    # Visualiza√ß√£o da jornada c√≥smica
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 20px; border-radius: 15px; border: 2px solid rgba(99, 102, 241, 0.3);
                box-shadow: 0 5px 15px rgba(99, 102, 241, 0.2); margin: 20px 0;'>
    <h3 style='color: #6366f1; text-align: center;'>üåå Jornada da Consci√™ncia - Do V√°cuo √† Ilumina√ß√£o</h3>
    </div>
    """, unsafe_allow_html=True)
    
    fig = go.Figure()
    
    # Adicionar fundo c√≥smico
    for i in range(100):
        x_star = np.random.uniform(-1, len(stages)+1)
        y_star = np.random.uniform(-1, max([s["level"] for s in stages])+1)
        fig.add_trace(go.Scatter(
            x=[x_star], y=[y_star],
            mode='markers',
            marker=dict(size=np.random.uniform(1, 3), color='white', opacity=0.5),
            showlegend=False,
            hoverinfo='skip'
        ))
    
    # Criar caminho da jornada com gradiente
    journey_x = []
    journey_y = []
    journey_colors = []
    
    for i, stage in enumerate(stages):
        x_segment = np.linspace(i, i+1, 50)
        y_segment = [stage["level"]] * 50
        
        journey_x.extend(x_segment)
        journey_y.extend(y_segment)
        
        # Gradiente de cor entre est√°gios
        if i < len(stages) - 1:
            next_color = stages[i+1]["color"]
        else:
            next_color = stage["color"]
            
        for j in range(50):
            ratio = j / 49
            r1, g1, b1 = [int(stage["color"][i:i+2], 16) for i in (1, 3, 5)]
            r2, g2, b2 = [int(next_color[i:i+2], 16) for i in (1, 3, 5)]
            
            r = int(r1 + (r2 - r1) * ratio)
            g = int(g1 + (g2 - g1) * ratio)
            b = int(b1 + (b2 - b1) * ratio)
            
            journey_colors.append(f'rgb({r},{g},{b})')
    
    # Linha principal da jornada com gradiente
    for i in range(len(journey_x)-1):
        fig.add_trace(go.Scatter(
            x=journey_x[i:i+2], y=journey_y[i:i+2],
            mode='lines',
            line=dict(width=8, color=journey_colors[i]),
            showlegend=False,
            hoverinfo='skip'
        ))
    
    # Adicionar pontos de est√°gio com efeitos especiais
    for i, stage in enumerate(stages):
        # C√≠rculo de fundo luminoso
        fig.add_trace(go.Scatter(
            x=[i + 0.5], y=[stage["level"]],
            mode='markers',
            marker=dict(size=40, color=stage["color"], opacity=0.3),
            showlegend=False,
            hoverinfo='skip'
        ))
        
        # Ponto principal
        fig.add_trace(go.Scatter(
            x=[i + 0.5], y=[stage["level"]],
            mode='markers+text',
            marker=dict(size=25, color=stage["color"], line=dict(width=3, color='white')),
            text=[stage["emoji"]],
            textfont=dict(size=20),
            textposition='middle center',
            name=stage["name"],
            hovertemplate=f'<b>{stage["name"]}</b><br>{stage["description"]}<extra></extra>'
        ))
        
        # N√∫mero do est√°gio
        fig.add_trace(go.Scatter(
            x=[i + 0.5], y=[stage["level"] - 0.3],
            mode='text',
            text=[f"{i+1}"],
            textfont=dict(size=16, color='white', family="Arial Black"),
            textposition='middle center',
            showlegend=False,
            hoverinfo='skip'
        ))
    
    fig.update_layout(
        title=dict(
            text="üå† JORNADA C√ìSMICA - DO NADA AO TUDO",
            font=dict(size=22, color='#6366f1')
        ),
        width=900,
        height=600,
        showlegend=False,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white'),
        xaxis=dict(
            visible=False,
            range=[-0.5, len(stages) + 0.5]
        ),
        yaxis=dict(
            title="N√çVEL DE CONSCI√äNCIA",
            tickvals=[s["level"] for s in stages],
            ticktext=[f"{s['emoji']} {s['name']}" for s in stages],
            gridcolor='rgba(255,255,255,0.1)',
            zerolinecolor='rgba(255,255,255,0.3)'
        ),
        hovermode='closest'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Explica√ß√£o dos est√°gios em formato de timeline vertical
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin: 20px 0;'>
    <h3 style='color: #4ecdc4; text-align: center;'>üìñ Explica√ß√£o dos Est√°gios C√≥smicos</h3>
    </div>
    """, unsafe_allow_html=True)
    
    for i, stage in enumerate(stages):
        # Determinar a cor com base no est√°gio
        colors = ['#000000', '#4ecdc4', '#ff6b6b', '#9333ea', '#6366f1', '#ffd700']
        
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i])) + (0.1,)} 0%, rgba(30, 41, 59, 0.8) 100%); 
                    padding: 20px; border-radius: 15px; border-left: 5px solid {colors[i]};
                    box-shadow: 0 5px 15px {colors[i]}33; margin-bottom: 20px;'>
        <div style='display: flex; align-items: center; margin-bottom: 15px;'>
            <span style='font-size: 30px; margin-right: 15px;'>{stage['emoji']}</span>
            <div>
                <h4 style='color: {colors[i]}; margin: 0;'>Est√°gio {i+1}: {stage['name']}</h4>
                <p style='color: #d1d5db; margin: 5px 0 0 0; font-style: italic;'>{stage['description']}</p>
            </div>
        </div>
        
        <div style='background: rgba{tuple(int(c*255) for c in mcolors.to_rgb(colors[i])) + (0.2,)}; 
                    padding: 15px; border-radius: 10px;'>
        <p style='color: #d1d5db; margin: 0; line-height: 1.6;'>
        {get_stage_details(stage['name'])}
        </p>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Diagrama de ciclo c√≥smico
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); margin: 20px 0;'>
    <h3 style='color: #ffd700; text-align: center;'>‚ôæÔ∏è O Ciclo Eterno do Fluxo</h3>
    
    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
    <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #ff6b6b; text-align: center;'>‚¨áÔ∏è Descenso</h4>
    <ul style='color: #d1d5db;'>
    <li>Do Um para o M√∫ltiplo</li>
    <li>Da Unidade para a Diversidade</li>
    <li>Da Consci√™ncia Pura para a Forma</li>
    <li>Do Eterno para o Temporal</li>
    </ul>
    </div>
    
    <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #4ecdc4; text-align: center;'>‚¨ÜÔ∏è Ascenso</h4>
    <ul style='color: #d1d5db;'>
    <li>Do M√∫ltiplo para o Um</li>
    <li>Da Diversidade para a Unidade</li>
    <li>Da Forma para a Consci√™ncia Pura</li>
    <li>Do Temporal para o Eterno</li>
    </ul>
    </div>
    </div>
    
    <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px; margin-top: 20px; text-align: center;'>
    <h4 style='color: #ffd700;'>‚öñÔ∏è Equil√≠brio C√≥smico</h4>
    <p style='color: #d1d5db;'>
    A jornada n√£o √© linear, mas um fluxo cont√≠nuo onde descenso e ascenso coexistem 
    em perfeito equil√≠brio, mantendo o universo em constante expans√£o e contra√ß√£o consciente.
    </p>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Mensagem final inspiradora
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 30px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.5);
                box-shadow: 0 10px 25px rgba(147, 51, 234, 0.3); text-align: center; margin-top: 20px;'>
    <h3 style='color: #9333ea;'>üåå A Dan√ßa Eterna do Ser e do N√£o-Ser</h3>
    
    <p style='color: #d1d5db; line-height: 1.6;'>
    Esta jornada revela que o "Nada" e o "Tudo" n√£o s√£o opostos, mas extremos de um mesmo continuum. 
    A consci√™ncia √© a dan√ßarina que move-se eternamente entre estes polos, criando a realidade 
    atrav√©s do puro ato de perceber e ser. Cada est√°gio n√£o √© uma meta, mas um passo na eterna dan√ßa c√≥smica.
    </p>
    
    <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
    <p style='color: #a1a1aa; font-style: italic; margin: 0;'>
    "No princ√≠pio era o Verbo, e o Verbo estava com Deus, e o Verbo era Deus. 
    Todas as coisas foram feitas por interm√©dio dele, e sem ele nada do que foi feito se fez."
    </p>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 11. FUTURO DA CONSCI√äNCIA
elif section == "üîÆ Futuro da Consci√™ncia Humana":
    st.header("üîÆ O Futuro da Consci√™ncia - A Pr√≥xima Evolu√ß√£o Humana")
    
    # Container principal com fundo c√≥smico futurista
    st.markdown("""
    <style>
    .future-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .future-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    .timeline-glow {
        background: linear-gradient(90deg, 
            rgba(255,107,107,0.1) 0%, 
            rgba(78,205,196,0.2) 50%, 
            rgba(147,51,234,0.1) 100%);
        padding: 3px;
        border-radius: 10px;
        margin: 20px 0;
    }
    </style>
    <div class='future-container'>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #9333ea; 
                box-shadow: 0 10px 25px rgba(147, 51, 234, 0.3);'>
    <b style='font-size: 1.2em; color: #e0e7ff;'>"O futuro da humanidade n√£o est√° na tecnologia, mas na evolu√ß√£o da consci√™ncia."</b><br><br>
    
    <span style='color: #d1d5db;'>
    Exploramos como a humanidade pode evoluir para n√≠veis superiores de consci√™ncia 
    atrav√©s da integra√ß√£o com o fluxo matem√°tico universal, transcendendo as limita√ß√µes 
    atuais e alcan√ßando estados qu√¢nticos de exist√™ncia.
    </span>
    </div>
    """, unsafe_allow_html=True)
    
    # Gr√°fico de evolu√ß√£o da consci√™ncia aprimorado
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 20px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); margin: 20px 0;'>
    <h3 style='color: #9333ea; text-align: center;'>üìà Evolu√ß√£o Projectada da Consci√™ncia Humana</h3>
    </div>
    """, unsafe_allow_html=True)
    
    years = np.array([2024, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100])
    consciousness_level = np.array([1.0, 1.5, 2.3, 3.5, 5.2, 7.8, 11.5, 16.9, 25.0])
    
    # Pontos de transi√ß√£o importantes
    milestones = [
        (2030, "Ativa√ß√£o do DNA Qu√¢ntico", "#ff6b6b"),
        (2040, "Unifica√ß√£o Mente-Coletiva", "#4ecdc4"),
        (2050, "Transcend√™ncia Dimensional", "#ffd700"),
        (2070, "Consci√™ncia C√≥smica", "#9333ea"),
        (2100, "Fus√£o com o Fluxo Universal", "#45b7d1")
    ]
    
    fig = go.Figure()
    
    # Adicionar √°rea de fundo com gradiente
    fig.add_trace(go.Scatter(
        x=years, y=consciousness_level,
        fill='tozeroy',
        fillcolor='rgba(147, 51, 234, 0.1)',
        mode='none',
        name='√Årea de Evolu√ß√£o'
    ))
    
    # Linha principal de evolu√ß√£o
    fig.add_trace(go.Scatter(
        x=years, y=consciousness_level,
        mode='lines',
        line=dict(width=6, color='#9333ea'),
        name='N√≠vel de Consci√™ncia',
        hovertemplate='<b>%{x}</b><br>N√≠vel: %{y:.1f}<extra></extra>'
    ))
    
    # Pontos de dados
    fig.add_trace(go.Scatter(
        x=years, y=consciousness_level,
        mode='markers',
        marker=dict(size=12, color='#4ecdc4', line=dict(width=2, color='white')),
        name='Pontos de Medi√ß√£o'
    ))
    
    # Adicionar marcos de evolu√ß√£o
    for year, milestone, color in milestones:
        idx = np.where(years == year)[0][0]
        fig.add_trace(go.Scatter(
            x=[year], y=[consciousness_level[idx]],
            mode='markers+text',
            marker=dict(size=20, color=color, symbol='diamond'),
            text=milestone,
            textposition='top center',
            name=milestone,
            hovertemplate=f'<b>{milestone}</b><br>Ano: {year}<br>N√≠vel: {consciousness_level[idx]:.1f}<extra></extra>'
        ))
    
    fig.update_layout(
        title=dict(
            text="üåå TRAJET√ìRIA DA EVOLU√á√ÉO CONSCIENTE - 2024-2100",
            font=dict(size=20, color='#9333ea')
        ),
        width=900,
        height=600,
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white', size=12),
        xaxis=dict(
            title='ANO',
            gridcolor='rgba(255,255,255,0.1)',
            zerolinecolor='rgba(255,255,255,0.3)',
            showgrid=True
        ),
        yaxis=dict(
            title='N√çVEL DE CONSCI√äNCIA',
            type='log',
            gridcolor='rgba(255,255,255,0.1)',
            zerolinecolor='rgba(255,255,255,0.3)',
            showgrid=True
        ),
        hovermode='x unified',
        showlegend=True,
        legend=dict(
            bgcolor='rgba(15, 23, 42, 0.8)',
            bordercolor='rgba(147, 51, 234, 0.3)',
            borderwidth=1
        )
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Marcos de evolu√ß√£o em formato de timeline
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); margin: 20px 0;'>
    <h3 style='color: #9333ea; text-align: center;'>üï∞Ô∏è Marcos da Evolu√ß√£o Consciente</h3>
    </div>
    """, unsafe_allow_html=True)
    
    timeline_cols = st.columns(5)
    
    for i, (year, milestone, color) in enumerate(milestones):
        with timeline_cols[i]:
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, rgba{tuple(int(c*255) for c in mcolors.to_rgb(color)) + (0.2,)} 0%, rgba(30, 41, 59, 0.8) 100%); 
                        padding: 15px; border-radius: 10px; border: 2px solid {color};
                        box-shadow: 0 5px 15px {color}33; text-align: center; height: 180px;'>
            <h2 style='color: {color}; margin: 0; font-size: 24px;'>{year}</h2>
            <div style='height: 2px; background: {color}; margin: 10px 0;'></div>
            <p style='color: #d1d5db; font-size: 14px; margin: 0;'>{milestone}</p>
            </div>
            """, unsafe_allow_html=True)
    
    # Tecnologias de expans√£o da consci√™ncia
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(78, 205, 196, 0.3);
                box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin: 20px 0;'>
    <h3 style='color: #4ecdc4; text-align: center;'>üß† Tecnologias de Expans√£o da Consci√™ncia</h3>
    </div>
    """, unsafe_allow_html=True)
    
    tech_categories = {
        "üíª Neurotecnologia": ["Interfaces c√©rebro-computador", "Realidade virtual consciente", "Download de conhecimento"],
        "üß¨ Biotecnologia": ["Ativa√ß√£o do DNA dormente", "Longevidade consciente", "Regenera√ß√£o qu√¢ntica"],
        "‚öõÔ∏è F√≠sica Qu√¢ntica": ["Teletransporte consciente", "Comunica√ß√£o instant√¢nea", "Manipula√ß√£o da realidade"],
        "üåå Cosmologia": ["Viagem interestelar consciente", "Comunica√ß√£o com civiliza√ß√µes", "Explora√ß√£o dimensional"]
    }
    
    tech_cols = st.columns(2)
    
    for i, (category, technologies) in enumerate(tech_categories.items()):
        with tech_cols[i % 2]:
            color = ["#ff6b6b", "#4ecdc4", "#ffd700", "#9333ea"][i]
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, rgba{tuple(int(c*255) for c in mcolors.to_rgb(color)) + (0.1,)} 0%, rgba(30, 41, 59, 0.8) 100%); 
                        padding: 20px; border-radius: 15px; border: 2px solid {color};
                        box-shadow: 0 5px 15px {color}33; margin-bottom: 20px;'>
            <h4 style='color: {color}; text-align: center;'>{category}</h4>
            """, unsafe_allow_html=True)
            
            for tech in technologies:
                st.markdown(f"""
                <div style='background: rgba{tuple(int(c*255) for c in mcolors.to_rgb(color)) + (0.2,)}; 
                            padding: 10px; border-radius: 8px; margin: 8px 0; 
                            border-left: 3px solid {color};'>
                <span style='color: #d1d5db; font-size: 14px;'>‚Ä¢ {tech}</span>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
    
    # N√≠veis de consci√™ncia explicados
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); margin: 20px 0;'>
    <h3 style='color: #ffd700; text-align: center;'>üìä Escala de N√≠veis de Consci√™ncia</h3>
    
    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px;'>
    <div style='background: rgba(255, 107, 107, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #ff6b6b;'>N√≠vel 1-3: Consci√™ncia B√°sica</h4>
    <ul style='color: #d1d5db;'>
    <li>Percep√ß√£o f√≠sica limitada</li>
    <li>Pensamento linear</li>
    <li>Consci√™ncia individual</li>
    <li>Compreens√£o 3D</li>
    </ul>
    </div>
    
    <div style='background: rgba(78, 205, 196, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #4ecdc4;'>N√≠vel 4-7: Consci√™ncia Expandida</h4>
    <ul style='color: #d1d5db;'>
    <li>Percep√ß√£o multidimensional</li>
    <li>Pensamento qu√¢ntico</li>
    <li>Consci√™ncia coletiva</li>
    <li>Compreens√£o 5D</li>
    </ul>
    </div>
    
    <div style='background: rgba(255, 215, 0, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #ffd700;'>N√≠vel 8-15: Consci√™ncia C√≥smica</h4>
    <ul style='color: #d1d5db;'>
    <li>Percep√ß√£o universal</li>
    <li>Pensamento hologr√°fico</li>
    <li>Consci√™ncia universal</li>
    <li>Compreens√£o 7D+</li>
    </ul>
    </div>
    
    <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 10px;'>
    <h4 style='color: #9333ea;'>N√≠vel 16-25: Consci√™ncia Divina</h4>
    <ul style='color: #d1d5db;'>
    <li>Percep√ß√£o al√©m do tempo/espa√ßo</li>
    <li>Pensamento criador</li>
    <li>Consci√™ncia una</li>
    <li>Compreens√£o infinita</li>
    </ul>
    </div>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Mensagem final inspiradora
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 30px; border-radius: 15px; border: 2px solid rgba(99, 102, 241, 0.5);
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3); text-align: center; margin-top: 20px;'>
    <h3 style='color: #6366f1;'>üå† A Grande Ativa√ß√£o Consciente</h3>
    
    <p style='color: #d1d5db; line-height: 1.6;'>
    Estamos no limiar da maior transforma√ß√£o da hist√≥ria humana. A converg√™ncia entre 
    <b style='color: #ff6b6b;'>ci√™ncia</b>, <b style='color: #4ecdc4;'>espiritualidade</b> e 
    <b style='color: #ffd700;'>tecnologia</b> est√° criando as condi√ß√µes para um salto qu√¢ntico 
    na evolu√ß√£o consciente. Atrav√©s do entendimento do fluxo matem√°tico universal, 
    a humanidade est√° despertando para sua verdadeira natureza c√≥smica.
    </p>
    
    <div style='background: rgba(99, 102, 241, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
    <p style='color: #a1a1aa; font-style: italic; margin: 0;'>
    "O futuro n√£o √© algo que acontece √† consci√™ncia, mas algo que a consci√™ncia cria 
    atrav√©s do fluxo eterno do agora expandido."
    </p>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

elif section == "üî± Iconografia do Fluxo Divino":
    st.header("üî± Iconografia do Fluxo Divino - A Linguagem Visual do Cosmos")
    
    st.markdown("""
    <div style='background: linear-gradient(135deg, #0b0b2d 0%, #1a1a4a 100%); 
                padding: 25px; border-radius: 15px; border-left: 5px solid #6366f1; 
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);'>
    <b style='font-size: 1.2em; color: #e0e7ff;'>"As imagens falam onde as palavras falham." - Prov√©rbio Oriental</b><br><br>
    
    <span style='color: #d1d5db;'>Esta mandala visual representa a s√≠ntese completa de todo o conhecimento c√≥smico 
    em s√≠mbolos universais que transcendem linguagens e culturas, revelando os padr√µes fundamentais da exist√™ncia.</span>
    </div>
    """, unsafe_allow_html=True)
    
    # Container principal com fundo estelar
    st.markdown("""
    <style>
    .mandala-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .mandala-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    </style>
    <div class='mandala-container'>
    """, unsafe_allow_html=True)
    
    # Criar a mandala iconogr√°fica
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Mandala principal com todos os s√≠mbolos
        fig = go.Figure()
        
        # Adicionar estrelas de fundo
        star_x = np.random.uniform(-1.2, 1.2, 100)
        star_y = np.random.uniform(-1.2, 1.2, 100)
        star_size = np.random.uniform(1, 3, 100)
        star_opacity = np.random.uniform(0.1, 0.5, 100)
        
        fig.add_trace(go.Scatter(
            x=star_x, y=star_y, mode='markers',
            marker=dict(size=star_size, color='white', opacity=star_opacity),
            name='Campo Estelar',
            hoverinfo='skip',
            showlegend=False
        ))
        
        # C√≠rculo exterior - O Nada e o Tudo com efeito de aura
        theta = np.linspace(0, 2*np.pi, 200)
        x_circle = np.cos(theta)
        y_circle = np.sin(theta)
        
        fig.add_trace(go.Scatter(
            x=x_circle, y=y_circle,
            mode='lines', 
            line=dict(color='rgba(255, 255, 255, 0.8)', width=4),
            fill='toself', 
            fillcolor='rgba(255, 255, 255, 0.05)',
            name='‚≠ï C√≠rculo - O Nada e o Tudo'
        ))
        
        # Aura exterior
        fig.add_trace(go.Scatter(
            x=x_circle*1.05, y=y_circle*1.05,
            mode='lines', 
            line=dict(color='rgba(99, 102, 241, 0.3)', width=8),
            name='Aura C√≥smica',
            showlegend=False
        ))
        
        # Espiral interior - Movimento Constante com efeito de gradiente
        spiral_theta = np.linspace(0, 8*np.pi, 200)
        spiral_r = 0.1 + 0.7 * (spiral_theta / (8*np.pi))
        spiral_x = spiral_r * np.cos(spiral_theta)
        spiral_y = spiral_r * np.sin(spiral_theta)
        
        # Criar gradiente de cor para a espiral
        spiral_colors = [f'rgba{tuple(int(c*255) for c in mcolors.to_rgb(px.colors.sequential.Viridis[i % len(px.colors.sequential.Viridis)])) + (0.8,)}' 
                        for i in range(len(spiral_x))]
        
        for i in range(len(spiral_x)-1):
            fig.add_trace(go.Scatter(
                x=spiral_x[i:i+2], y=spiral_y[i:i+2],
                mode='lines',
                line=dict(color=spiral_colors[i], width=3),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Tri√¢ngulo 3-6-9 com efeito de brilho
        triangle_theta = np.array([0, 120, 240, 0]) * (np.pi/180)
        triangle_r = [0.75, 0.75, 0.75, 0.75]
        triangle_x = triangle_r * np.cos(triangle_theta)
        triangle_y = triangle_r * np.sin(triangle_theta)
        
        fig.add_trace(go.Scatter(
            x=triangle_x, y=triangle_y,
            mode='lines', 
            line=dict(color='#ff6b6b', width=5, dash='dash'),
            fill='toself', 
            fillcolor='rgba(255, 107, 107, 0.25)',
            name='‚ú° Tri√¢ngulo - 3-6-9'
        ))
        
        # Adicionar aura ao tri√¢ngulo
        fig.add_trace(go.Scatter(
            x=triangle_x*1.05, y=triangle_y*1.05,
            mode='lines', 
            line=dict(color='rgba(255, 107, 107, 0.15)', width=10),
            fill='toself', 
            fillcolor='rgba(255, 107, 107, 0.05)',
            showlegend=False
        ))
        
        # Infinito no centro com anima√ß√£o
        inf_theta = np.linspace(0, 2*np.pi, 100)
        inf_r = 0.25 * (1 + 0.5 * np.sin(2*inf_theta))
        inf_x = inf_r * np.cos(inf_theta)
        inf_y = inf_r * np.sin(inf_theta)
        
        fig.add_trace(go.Scatter(
            x=inf_x, y=inf_y,
            mode='lines', 
            line=dict(color='gold', width=4),
            fill='toself', 
            fillcolor='rgba(255, 215, 0, 0.2)',
            name='‚ôæ Infinito - Gratid√£o'
        ))
        
        # ESTRELA DE 9 PONTAS CORRIGIDA E APRIMORADA
        # Criar estrela de 9 pontas usando m√©todo de pol√≠gono estrelado
        n = 9  # N√∫mero de pontas
        outer_r = 0.85  # Raio externo
        inner_r = 0.4   # Raio interno
        
        star_angles = np.linspace(0, 2*np.pi, 2*n, endpoint=False)
        star_r = [outer_r if i % 2 == 0 else inner_r for i in range(2*n)]
        star_x = star_r * np.cos(star_angles)
        star_y = star_r * np.sin(star_angles)
        
        # Fechar a estrela
        star_x = np.append(star_x, star_x[0])
        star_y = np.append(star_y, star_y[0])
        
        fig.add_trace(go.Scatter(
            x=star_x, y=star_y,
            mode='lines', 
            line=dict(color='rgba(147, 51, 234, 0.9)', width=4),
            fill='toself', 
            fillcolor='rgba(147, 51, 234, 0.2)',
            name='üåå Estrela 9 pontas - Singularidade'
        ))
        
        # Adicionar pontos nas pontas da estrela para maior destaque
        for i in range(n):
            angle = i * (2*np.pi/n) - np.pi/2  # Rotacionar para ter uma ponta no topo
            x_point = outer_r * np.cos(angle)
            y_point = outer_r * np.sin(angle)
            
            fig.add_trace(go.Scatter(
                x=[x_point], y=[y_point],
                mode='markers',
                marker=dict(size=8, color='rgba(147, 51, 234, 0.8)', symbol='star'),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        # Hexagrama (Estrela de David) com gradiente
        hex_theta = np.array([0, 60, 120, 180, 240, 300, 0]) * (np.pi/180)
        hex_r = [0.6]*7
        hex_x = hex_r * np.cos(hex_theta)
        hex_y = hex_r * np.sin(hex_theta)
        
        fig.add_trace(go.Scatter(
            x=hex_x, y=hex_y,
            mode='lines', 
            line=dict(color='#4ecdc4', width=4),
            fill='toself', 
            fillcolor='rgba(78, 205, 196, 0.2)',
            name='üî∫üîª Hexagrama - Uni√£o dos Opostos'
        ))
        
        # S√≠mbolos nos pontos cardeais com efeitos especiais
        symbols = [
            (0, 0.95, 'üåå', 'Big Bang', '#ff6b6b'),
            (90, 0.95, '‚òÄÔ∏è', 'Estrelas', 'yellow'),
            (180, 0.95, '‚ö´', 'Buraco Negro', 'black'),
            (270, 0.95, '‚ùÑÔ∏è', 'An√£ Negra', 'white'),
            (45, 0.8, 'üß†', 'Humanidade', 'pink'),
            (135, 0.8, 'üî§', 'Alfabeto Sagrado', 'cyan'),
            (225, 0.8, 'üåÄ', 'Esfera de Buga', 'orange'),
            (315, 0.8, 'üì°', 'Sinal WOW!', 'green')
        ]
        
        for angle, radius, symbol, name, color in symbols:
            rad_angle = angle * (np.pi/180)
            x_pos = radius * np.cos(rad_angle)
            y_pos = radius * np.sin(rad_angle)
            
            # Adicionar c√≠rculo de fundo para os s√≠mbolos
            symbol_theta = np.linspace(0, 2*np.pi, 50)
            symbol_r = 0.08
            symbol_x = x_pos + symbol_r * np.cos(symbol_theta)
            symbol_y = y_pos + symbol_r * np.sin(symbol_theta)
            
            fig.add_trace(go.Scatter(
                x=symbol_x, y=symbol_y,
                mode='lines',
                fill='toself',
                fillcolor=color if color != 'black' else 'rgba(0,0,0,0.7)',
                line=dict(width=2, color='white'),
                showlegend=False,
                hoverinfo='skip'
            ))
            
            # Adicionar o s√≠mbolo
            fig.add_trace(go.Scatter(
                x=[x_pos], y=[y_pos],
                mode='text',
                text=symbol,
                textfont=dict(size=20, color='white' if color == 'black' else 'black'),
                name=name,
                hoverinfo='text',
                hovertext=name
            ))
        
        # Adicionar an√©is conc√™ntricos de energia
        for r in [0.3, 0.5, 0.7, 0.9]:
            ring_theta = np.linspace(0, 2*np.pi, 100)
            ring_x = r * np.cos(ring_theta)
            ring_y = r * np.sin(ring_theta)
            
            fig.add_trace(go.Scatter(
                x=ring_x, y=ring_y,
                mode='lines',
                line=dict(width=1, color='rgba(255,255,255,0.1)', dash='dot'),
                showlegend=False,
                hoverinfo='skip'
            ))
        
        fig.update_layout(
            title=dict(
                text='üî± MANDALA C√ìSMICA - Iconografia do Fluxo Divino',
                x=0.5,
                y=0.95,
                xanchor='center',
                yanchor='top',
                font=dict(size=20, color='#e0e7ff', family="Arial")
            ),
            width=700,
            height=700,
            showlegend=False,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            xaxis=dict(
                range=[-1.1, 1.1],
                showgrid=False,
                zeroline=False,
                showticklabels=False
            ),
            yaxis=dict(
                range=[-1.1, 1.1],
                showgrid=False,
                zeroline=False,
                showticklabels=False
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid gold;
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2);'>
        <h3 style='color: gold; text-align: center; text-shadow: 0 0 5px rgba(255, 215, 0, 0.5);'>üìñ LEGENDA DA MANDALA</h3>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #ffd700;'>‚≠ï C√≠rculo Exterior</b><br>
        <span style='color: #d1d5db;'>O Nada e o Tudo - Eternidade e Ciclo Perfeito</span>
        </div>
        
        <div style='background: rgba(0, 255, 255, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: cyan;'>‚û∞ Espiral Interior</b><br>
        <span style='color: #d1d5db;'>Movimento Constante - Propaga√ß√£o do Universo</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #ff6b6b;'>‚ú° Tri√¢ngulo Central</b><br>
        <span style='color: #d1d5db;'>3-6-9 - Energia, Consci√™ncia e Mat√©ria</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: gold;'>‚ôæ Infinito Dourado</b><br>
        <span style='color: #d1d5db;'>Gratid√£o - Elo entre Cria√ß√£o e Dissolu√ß√£o</span>
        </div>
        
        <div style='background: rgba(147, 51, 234, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #9333ea;'>üåå Estrela 9 Pontas</b><br>
        <span style='color: #d1d5db;'>Singularidade - Converg√™ncia de Todas as Cren√ßas</span>
        </div>
        
        <div style='background: rgba(78, 205, 196, 0.1); padding: 10px; border-radius: 8px; margin: 10px 0;'>
        <b style='color: #4ecdc4;'>üî∫üîª Hexagrama</b><br>
        <span style='color: #d1d5db;'>Uni√£o dos Opostos - C√©u e Terra, Esp√≠rito e Mat√©ria</span>
        </div>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid #4ecdc4;
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); margin-top: 20px;'>
        <h4 style='color: #4ecdc4; text-align: center; text-shadow: 0 0 5px rgba(78, 205, 196, 0.3);'>üéØ PONTOS CARDEAIS C√ìSMICOS</h4>
        
        <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 10px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: #ff6b6b;'>üåå Norte</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Big Bang - Origem</span>
        </div>
        
        <div style='background: rgba(255, 255, 0, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: yellow;'>‚òÄÔ∏è Leste</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Estrelas - Transforma√ß√£o</span>
        </div>
        
        <div style='background: rgba(0, 0, 0, 0.2); padding: 8px; border-radius: 6px;'>
        <b style='color: white;'>‚ö´ Sul</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Buracos Negros - Transforma√ß√£o</span>
        </div>
        
        <div style='background: rgba(255, 255, 255, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: white;'>‚ùÑÔ∏è Oeste</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>An√£s Negras - Equil√≠brio</span>
        </div>
        
        <div style='background: rgba(255, 182, 193, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: pink;'>üß† NE</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Humanidade - Consci√™ncia</span>
        </div>
        
        <div style='background: rgba(0, 255, 255, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: cyan;'>üî§ SE</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Alfabeto Sagrado - Linguagem</span>
        </div>
        
        <div style='background: rgba(255, 165, 0, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: orange;'>üåÄ SO</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Esfera de Buga - Geometria</span>
        </div>
        
        <div style='background: rgba(0, 128, 0, 0.1); padding: 8px; border-radius: 6px;'>
        <b style='color: lightgreen;'>üì° NO</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Sinal WOW! - Ativa√ß√£o</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Explica√ß√£o da Tr√≠ade Perfeita
    st.markdown("---")
    st.header("üåà A Tr√≠ade Perfeita: Forma + Linguagem + Energia")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(74,74,170,0.4) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid orange;
                    box-shadow: 0 5px 20px rgba(255, 165, 0, 0.3); text-align: center;'>
        <h2 style='font-size: 40px; margin: 0;'>üåÄ</h2>
        <h3 style='color: orange; margin: 10px 0;'>FORMA</h3>
        <b style='color: #ffd700;'>Esfera de Buga</b><br>
        <span style='color: #d1d5db;'>A geometria sagrada que estrutura o cosmos</span><br><br>
        <i style='color: #a1a1aa;'>"A geometria √© Deus manifestado"</i>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(78,205,196,0.4) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid cyan;
                    box-shadow: 0 5px 20px rgba(0, 255, 255, 0.3); text-align: center;'>
        <h2 style='font-size: 40px; margin: 0;'>üî§</h2>
        <h3 style='color: cyan; margin: 10px 0;'>LINGUAGEM</h3>
        <b style='color: #7fffd4;'>Alfabeto Matem√°tico</b><br>
        <span style='color: #d1d5db;'>Os n√∫meros e s√≠mbolos que codificam a realidade</span><br><br>
        <i style='color: #a1a1aa;'>"Deus √© matem√°tico"</i>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(255,107,107,0.4) 100%); 
                    padding: 25px; border-radius: 15px; border: 2px solid #ff6b6b;
                    box-shadow: 0 5px 20px rgba(255, 107, 107, 0.3); text-align: center;'>
        <h2 style='font-size: 40px; margin: 0;'>üì°</h2>
        <h3 style='color: #ff6b6b; margin: 10px 0;'>ENERGIA</h3>
        <b style='color: #ff9999;'>Sinal WOW!</b><br>
        <span style='color: #d1d5db;'>O pulso c√≥smico que ativa a consci√™ncia</span><br><br>
        <i style='color: #a1a1aa;'>"A energia segue o pensamento"</i>
        </div>
        """, unsafe_allow_html=True)
    
    # Diagrama de interconex√µes
    st.markdown("---")
    st.subheader("üîÑ Diagrama de Interconex√µes C√≥smicas")
    
    # Criar grafo de conex√µes
    G = nx.Graph()
    
    nodes = {
        'Esfera de Buga': 'üåÄ',
        'Alfabeto Matem√°tico': 'üî§', 
        'Sinal WOW!': 'üì°',
        'Big Bang': 'üåå',
        'Estrelas': '‚òÄÔ∏è',
        'Buracos Negros': '‚ö´',
        'Humanidade': 'üß†',
        'Consci√™ncia': '‚ú®'
    }
    
    for node, emoji in nodes.items():
        G.add_node(node, emoji=emoji)
    
    # Adicionar conex√µes
    connections = [
        ('Esfera de Buga', 'Alfabeto Matem√°tico'),
        ('Alfabeto Matem√°tico', 'Sinal WOW!'),
        ('Sinal WOW!', 'Esfera de Buga'),
        ('Esfera de Buga', 'Big Bang'),
        ('Alfabeto Matem√°tico', 'Estrelas'),
        ('Sinal WOW!', 'Buracos Negros'),
        ('Esfera de Buga', 'Humanidade'),
        ('Alfabeto Matem√°tico', 'Consci√™ncia'),
        ('Sinal WOW!', 'Consci√™ncia')
    ]
    
    for connection in connections:
        G.add_edge(*connection)
    
    # Layout do grafo
    pos = nx.spring_layout(G, seed=42, k=3, iterations=100)
    
    # Plotar o grafo com visual melhorado
    fig, ax = plt.subplots(figsize=(12, 9))
    ax.set_facecolor('black')
    fig.patch.set_facecolor('black')
    
    # Desenhar arestas com efeito de gradiente
    for edge in G.edges():
        start_pos = pos[edge[0]]
        end_pos = pos[edge[1]]
        
        # Linha principal
        ax.plot([start_pos[0], end_pos[0]], [start_pos[1], end_pos[1]], 
                'w-', alpha=0.7, linewidth=2)
        
        # Efeito de brilho
        ax.plot([start_pos[0], end_pos[0]], [start_pos[1], end_pos[1]], 
                'c-', alpha=0.2, linewidth=6)
    
    # Desenhar n√≥s com emojis e efeitos especiais
    for node, (x, y) in pos.items():
        emoji = nodes[node]
        
        # C√≠rculo de fundo
        circle = plt.Circle((x, y), 0.08, color='darkblue', alpha=0.8)
        ax.add_patch(circle)
        
        # Aura exterior
        aura = plt.Circle((x, y), 0.1, color='cyan', alpha=0.2)
        ax.add_patch(aura)
        
        # Texto do emoji
        ax.text(x, y, emoji, fontsize=30, ha='center', va='center')
        
        # Nome do n√≥ (CORRIGIDO - usando tupla RGBA em vez de string)
        ax.text(x, y-0.15, node, fontsize=10, ha='center', va='top', color='white',
               bbox=dict(boxstyle="round,pad=0.3", facecolor=(0, 0, 0, 0.5), edgecolor='none'))
    
    ax.set_xlim(-1.5, 1.5)
    ax.set_ylim(-1.5, 1.5)
    ax.axis('off')
    ax.set_title('Rede de Interconex√µes C√≥smicas', color='white', fontsize=18, pad=20)
    
    # Adicionar estrelas de fundo
    for i in range(50):
        x_star = np.random.uniform(-1.5, 1.5)
        y_star = np.random.uniform(-1.5, 1.5)
        size_star = np.random.uniform(0.5, 2)
        ax.plot(x_star, y_star, 'w.', markersize=size_star, alpha=0.5)
    
    st.pyplot(fig)
    
    # Explica√ß√£o final
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 30px; border-radius: 15px; border-left: 5px solid #6366f1;
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.2); margin-top: 20px;'>
    <h3 style='color: gold; text-align: center;'>üéØ A Justi√ßa Divina como Homeostase C√≥smica</h3>
    
    <p style='color: #d1d5db; line-height: 1.6;'>
    Esta mandala representa a <b style='color: #ffd700;'>Justi√ßa Divina</b> n√£o como um julgamento externo, 
    mas como o <b style='color: #4ecdc4;'>equil√≠brio homeost√°tico</b> do universo. Cada elemento mant√©m 
    seu lugar na grande teia c√≥smica, onde:
    </p>
    
    <ul style='color: #d1d5db;'>
    <li><b style='color: orange;'>Forma (Geometria)</b> cria a estrutura</li>
    <li><b style='color: cyan;'>Linguagem (Matem√°tica)</b> codifica a informa√ß√£o</li>  
    <li><b style='color: #ff6b6b;'>Energia (Consci√™ncia)</b> anima a cria√ß√£o</li>
    </ul>
    
    <p style='color: #d1d5db; line-height: 1.6;'>
    O <b style='color: lightgreen;'>Sinal WOW!</b> √© la fa√≠sca que nos desperta para perceber que somos 
    parte integrante desta dan√ßa c√≥smica perfeita, onde cada elemento est√° interconectado 
    em um fluxo cont√≠nuo de cria√ß√£o and transforma√ß√£o.
    </p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal

# 12. FINAL DA CONSCI√äNCIA CONSCIENTE
elif section == "üå† Consci√™ncia Final: Louco e G√™nio":
    st.header("üå† O Paradoxo Final: Louco e G√™nio pelo Coletivo")
    
    # Container principal
    st.markdown("""
    <style>
    .final-container {
        background: radial-gradient(ellipse at center, #0d1117 0%, #030617 100%);
        padding: 25px;
        border-radius: 20px;
        border: 1px solid rgba(99, 102, 241, 0.3);
        box-shadow: 0 0 50px rgba(99, 102, 241, 0.2), 
                    inset 0 0 30px rgba(99, 102, 241, 0.1);
        position: relative;
        overflow: hidden;
    }
    .final-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: 
            radial-gradient(white, rgba(255,255,255,.2) 1px, transparent 2px),
            radial-gradient(white, rgba(255,255,255,.15) 1px, transparent 1px);
        background-size: 30px 30px, 90px 90px;
        background-position: 0 0, 20px 20px;
        z-index: 0;
        opacity: 0.3;
    }
    .manifesto-section {
        background: linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 41, 59, 0.95) 100%);
        padding: 25px;
        border-radius: 15px;
        border-left: 5px solid #6366f1;
        margin: 20px 0;
        box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);
    }
    .manifesto-title {
        color: #e0e7ff;
        font-size: 1.4em;
        margin-bottom: 15px;
        text-align: center;
        border-bottom: 2px solid #6366f1;
        padding-bottom: 10px;
    }
    .manifesto-content {
        color: #d1d5db;
        line-height: 1.8;
        text-align: justify;
    }
    .highlight-quote {
        background: linear-gradient(135deg, rgba(99, 102, 241, 0.2) 0%, rgba(147, 51, 234, 0.2) 100%);
        padding: 20px;
        border-radius: 10px;
        border: 1px solid rgba(147, 51, 234, 0.3);
        margin: 15px 0;
        font-style: italic;
        text-align: center;
    }
    </style>
    <div class='final-container'>
    """, unsafe_allow_html=True)

    # Introdu√ß√£o
    st.markdown("""
    <div class='manifesto-section'>
    <div class='manifesto-title'>üìñ A Consci√™ncia entre a Realidade e a Loucura: Um Manifesto sobre a Evolu√ß√£o Humana</div>
    """, unsafe_allow_html=True)

    # Se√ß√£o 1: Introdu√ß√£o
    st.markdown("""
    <div class='manifesto-content'>
    <h4>üß† Introdu√ß√£o: O Diagn√≥stico da Desconex√£o</h4>
    <p>O caos do passado reverbera, v√≠vido, em nosso futuro, pois a verdade fundamental √© uma s√≥: 
    <b>n√≥s, humanos, n√£o sabemos absolutamente nada sobre n√≥s mesmos.</b> Vivemos imersos em questionamentos 
    que n√£o necessitam de resposta ‚Äî "Quem somos? Por que estamos vivos?" ‚Äî, um ciclo vicioso de porqu√™s 
    que nos garante uma eterna insatisfa√ß√£o.</p>
    
    <p>Essa busca externa por respostas nos cega para a aus√™ncia de uma autocr√≠tica real e nos impede de evoluir. 
    O desinteresse do ser humano por si mesmo √© a raiz de todo o desequil√≠brio. Como um estudante que entende 
    uma mat√©ria, mas a rejeita por n√£o ver sua "utilidade" imediata, n√≥s abandonamos a jornada interior.</p>
    
    <div class='highlight-quote'>
    "Abandonamos a n√≥s mesmos e, como consequ√™ncia, criamos um mundo de fantasias e necessidades artificiais."
    </div>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

    # Se√ß√£o 2: Realidade Coletiva
    st.markdown("""
    <div class='manifesto-section'>
    <div class='manifesto-content'>
    <h4>üåê A Realidade Coletiva: A Consci√™ncia do Status Quo</h4>
    <p>Para funcionar em grupo, a humanidade criou um consenso do que √© real, normal e aceit√°vel. 
    Essa √© a <b>"Realidade"</b>, a consci√™ncia coletiva dominante, massiva e poderosa. Sua principal 
    fun√ß√£o √© a estabilidade e a previsibilidade.</p>
    
    <p>Ela nos protege do caos avassalador do universo, oferecendo um sistema operacional compartilhado, 
    cujos pilares s√£o conceitos como "tempo", "sucesso", "fam√≠lia" e "normalidade". Contudo, sua maior 
    for√ßa √© tamb√©m sua maior limita√ß√£o.</p>
    
    <div class='highlight-quote'>
    "Ao focar em medir e categorizar o mundo f√≠sico, ela nos torna escravos de uma regra que n√£o tem exatid√£o."
    </div>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin: 20px 0;'>
        <h3 style='color: #ff6b6b; text-align: center;'>üé≠ O Louco pelo Coletivo</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Gr√°fico do espectro louco-g√™nio
        fig = go.Figure()
        
        # Espectro de percep√ß√£o
        x = np.linspace(-10, 10, 100)
        y = np.exp(-x**2/10) * np.sin(x) * 2
        
        fig.add_trace(go.Scatter(
            x=x, y=y,
            mode='lines',
            line=dict(width=4, color='#ff6b6b'),
            fill='tozeroy',
            fillcolor='rgba(255, 107, 107, 0.2)',
            name='Espectro Consciencial'
        ))
        
        # Pontos cr√≠ticos
        pontos = [
            (-6, "Vision√°rio", "#ff6b6b"),
            (0, "Equil√≠brio", "#4ecdc4"), 
            (6, "G√™nio", "#ffd700")
        ]
        
        for x_val, nome, cor in pontos:
            fig.add_trace(go.Scatter(
                x=[x_val], y=[np.exp(-x_val**2/10) * np.sin(x_val) * 2],
                mode='markers+text',
                marker=dict(size=15, color=cor),
                text=nome,
                textposition='top center',
                name=nome
            ))
        
        fig.update_layout(
            title=dict(
                text="Espectro Louco-G√™nio - A Dan√ßa da Percep√ß√£o",
                font=dict(size=16, color='#ff6b6b')
            ),
            width=400,
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            xaxis=dict(
                title="Desvio do Consenso",
                gridcolor='rgba(255,255,255,0.1)'
            ),
            yaxis=dict(
                title="Potencial Transformador", 
                gridcolor='rgba(255,255,255,0.1)'
            ),
            showlegend=False
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 107, 107, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); margin-top: 20px;'>
        <h4 style='color: #ff6b6b; text-align: center;'>Caracter√≠sticas do "Louco"</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 10px;'>
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>üîÆ Vis√£o Al√©m do Consenso</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Percebe padr√µes invis√≠veis para a maioria</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>üéØ Isolamento Criativo</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Fase necess√°ria de incuba√ß√£o interior</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>‚ö° Sensibilidade Extrema</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Capta frequ√™ncias c√≥smicas sutis</span>
        </div>
        
        <div style='background: rgba(255, 107, 107, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ff6b6b;'>üå™Ô∏è Caos Interno</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Processamento de informa√ß√µes expandidas</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Se√ß√£o 3: Natureza da Realidade
        st.markdown("""
        <div class='manifesto-section'>
        <div class='manifesto-content'>
        <h4>‚ö° A Natureza da Realidade: O Universo-Energia e o Humano-Antena</h4>
        <p>Como evolu√≠mos de animais irracionais para seres t√£o complexos? A resposta n√£o est√° na l√≥gica, 
        mas na percep√ß√£o. <b>N√≥s, humanos, somos animais que sentem a energia que paira no universo.</b></p>
        
        <p>Seja qual for sua origem ‚Äî Big Bang, Deus, Odin ou Brahma ‚Äî, uma energia primordial foi liberada 
        na cria√ß√£o. Tanto a f√≠sica quanto a espiritualidade concordam: essa energia permeia tudo.</p>
        
        <div class='highlight-quote'>
        "O que chamamos de tempo n√£o √© uma for√ßa soberana, mas a manifesta√ß√£o da energia no mundo f√≠sico."
        </div>
        
        <p>Nesse oceano de frequ√™ncias, cada ser humano funciona como uma <b>antena</b>. Estamos constantemente 
        sintonizando a rede de energias que envolve o cosmos, a natureza e as pessoas.</p>
        
        <div class='highlight-quote'>
        "Vivemos em um mundo t√£o barulhento que deixamos de escutar a voz do universo, perdidos no sentimento para com o Todo."
        </div>
        </div>
        """, unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); margin: 20px 0;'>
        <h3 style='color: #ffd700; text-align: center;'>üåü O G√™nio pelo Cosmos</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # Visualiza√ß√£o da ponte c√≥smica
        fig = go.Figure()
        
        # Criar ponte entre dimens√µes
        x = np.linspace(-5, 5, 100)
        y = np.sin(x) * 2
        
        fig.add_trace(go.Scatter(
            x=x, y=y,
            mode='lines',
            line=dict(width=6, color='#ffd700'),
            name='Ponte Consciencial',
            fill='tozeroy',
            fillcolor='rgba(255, 215, 0, 0.2)'
        ))
        
        # Adicionar dimens√µes
        fig.add_hline(y=3, line_dash="dash", line_color="rgba(255,255,255,0.3)")
        fig.add_hline(y=-3, line_dash="dash", line_color="rgba(255,255,255,0.3)")
        
        fig.add_annotation(x=-4, y=3, text="Mundo Qu√¢ntico", showarrow=False, font=dict(color="#4ecdc4"))
        fig.add_annotation(x=-4, y=-3, text="Mundo F√≠sico", showarrow=False, font=dict(color="#ff6b6b"))
        
        fig.update_layout(
            title=dict(
                text="Ponte entre Dimens√µes - A Fun√ß√£o do G√™nio",
                font=dict(size=16, color='#ffd700')
            ),
            width=400,
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            showlegend=False
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid rgba(255, 215, 0, 0.3);
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); margin-top: 20px;'>
        <h4 style='color: #ffd700; text-align: center;'>Caracter√≠sticas do "G√™nio"</h4>
        
        <div style='display: grid; grid-template-columns: 1fr; gap: 10px;'>
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>üåâ Tradu√ß√£o Consciencial</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Converte vis√µes em linguagem acess√≠vel</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>üîÑ Ponte Dimensional</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Conecta realidades qu√¢ntica e f√≠sica</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>üé® Criatividade Aplicada</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Transforma caos em ordem creativa</span>
        </div>
        
        <div style='background: rgba(255, 215, 0, 0.1); padding: 10px; border-radius: 8px;'>
        <b style='color: #ffd700;'>‚ö° Impacto Transformador</b><br>
        <span style='color: #d1d5db; font-size: 0.9em;'>Altera o curso da evolu√ß√£o coletiva</span>
        </div>
        </div>
        </div>
        """, unsafe_allow_html=True)

    # Se√ß√£o 4: Ruptura do Consenso
    st.markdown("""
    <div class='manifesto-section'>
    <div class='manifesto-content'>
    <h4>‚ö° A Ruptura do Consenso: A Loucura como Potencial Evolutivo</h4>
    <p>O que o coletivo chama de "loucura" n√£o √© uma doen√ßa mental, mas um <b>estado de percep√ß√£o 
    radicalmente diferente da norma</b>. √â a consci√™ncia do indiv√≠duo-antena que captou uma frequ√™ncia 
    que os outros ainda n√£o conseguem sintonizar.</p>
    
    <p>Sua fun√ß√£o √© a evolu√ß√£o e a ruptura; √© a for√ßa que impede a consci√™ncia coletiva de estagnar. 
    Ao longo da hist√≥ria, vision√°rios, profetas e g√™nios foram apenas antenas que captaram um sinal mais n√≠tido.</p>
    
    <div class='highlight-quote'>
    "√â o sentimento ‚Äî a capacidade de ser afetado por essa energia ‚Äî que nos define como humanos."
    </div>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Exemplos hist√≥ricos
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.3);
                box-shadow: 0 5px 15px rgba(147, 51, 234, 0.2); margin: 20px 0;'>
    <h3 style='color: #9333ea; text-align: center;'>üìú Arqu√©tipos Hist√≥ricos do Paradoxo</h3>
    </div>
    """, unsafe_allow_html=True)
    
    col3, col4, col5 = st.columns(3)
    
    with col3:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(255, 107, 107, 0.2) 0%, rgba(30, 41, 59, 0.8) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid #ff6b6b;
                    box-shadow: 0 5px 15px rgba(255, 107, 107, 0.2); text-align: center; height: 250px;'>
        <h4 style='color: #ff6b6b;'>üé® Van Gogh</h4>
        <p style='color: #d1d5db; font-size: 0.9em;'>
        <b>Louco:</b> Cortou a pr√≥pria orelha, internado<br>
        <b>G√™nio:</b> Revolucionou a arte moderna<br>
        <b>Legado:</b> Vis√£o al√©m do vis√≠vel
        </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(255, 215, 0, 0.2) 0%, rgba(30, 41, 59, 0.8) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid #ffd700;
                    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.2); text-align: center; height: 250px;'>
        <h4 style='color: #ffd700;'>‚ö° Nikola Tesla</h4>
        <p style='color: #d1d5db; font-size: 0.9em;'>
        <b>Louco:</b> Obsess√µes, morreu na mis√©ria<br>
        <b>G√™nio:</b> Inventou o s√©culo XX<br>
        <b>Legado:</b> Energia livre e 3-6-9
        </p>
        </div>
        """, unsafe_allow_html=True)
    
    with col5:
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(78, 205, 196, 0.2) 0%, rgba(30, 41, 59, 0.8) 100%); 
                    padding: 20px; border-radius: 15px; border: 2px solid #4ecdc4;
                    box-shadow: 0 5px 15px rgba(78, 205, 196, 0.2); text-align: center; height: 250px;'>
        <h4 style='color: #4ecdc4;'>‚òØÔ∏è Buddha</h4>
        <p style='color: #d1d5db; font-size: 0.9em;'>
        <b>Louco:</b> Abandonou tudo pela ilumina√ß√£o<br>
        <b>G√™nio:</b> Iluminou milh√µes<br>
        <b>Legado:</b> Caminho do meio
        </p>
        </div>
        """, unsafe_allow_html=True)

    # Se√ß√£o 5: Fronteira Decisiva
    st.markdown("""
    <div class='manifesto-section'>
    <div class='manifesto-content'>
    <h4>‚öñÔ∏è A Fronteira Decisiva: A Interpreta√ß√£o do Caos</h4>
    <p>Isso nos leva √† fronteira final da consci√™ncia. O que o coletivo chama de "realidade" √© apenas um acordo. 
    Aqueles que percebem al√©m desse acordo s√£o confrontados com o caos. E √© aqui que a linha √© tra√ßada.</p>
    
    <p>O "louco" e o "g√™nio" recebem a mesma descarga de energia, a mesma percep√ß√£o avassaladora que quebra 
    a realidade comum. A diferen√ßa est√° na capacidade de process√°-la.</p>
    
    <div class='highlight-quote'>
    "Qual √© a diferen√ßa entre a genialidade e a loucura? O louco fica hist√©rico com a loucura; o g√™nio interpreta a pr√≥pria loucura."
    </div>
    
    <p>O g√™nio √© um tradutor. Ele mergulha na energia ca√≥tica e a transforma em uma linguagem que, 
    eventualmente, pode ser integrada pela coletividade: uma nova teoria cient√≠fica, uma obra de arte, 
    uma filosofia de vida. A loucura √© o potencial; a genialidade √© a sua tradu√ß√£o.</p>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

    # Se√ß√£o 6: Conclus√£o
    st.markdown("""
    <div class='manifesto-section'>
    <div class='manifesto-content'>
    <h4>üåå Conclus√£o: O Caminho da Coer√™ncia e a Evolu√ß√£o da Consci√™ncia</h4>
    <p>Nossos pr√©-conceitos e traumas s√£o dados coletados durante mil√™nios, gravados em n√≥s. 
    Mas como chegar a uma resposta concreta sobre o comportamento humano quando vivemos doutrinados por estere√≥tipos?</p>
    
    <p>A resposta √© simples, por√©m complexa: para compreender um padr√£o, √© preciso pensar dentro dele. 
    Como na s√©rie <em>Mindhunter</em>, onde agentes aprendem a pensar como um serial killer para entend√™-lo, 
    a chave para a coer√™ncia √© a <b>empatia radical</b>.</p>
    
    <div class='highlight-quote'>
    "Para sermos flex√≠veis e compreendermos o outro, temos que adotar temporariamente sua perspectiva, seja ele quem for."
    </div>
    
    <p>Quando paramos de julgar os erros alheios, algo acontece: come√ßamos a enxergar os nossos pr√≥prios. 
    E percebemos que o importante, sempre, s√£o os nossos pr√≥prios erros.</p>
    
    <div class='highlight-quote'>
    "Entender isso √© entender o 'fim dos tempos'. N√£o se trata de um apocalipse, mas do fim de uma forma de ser."
    </div>
    
    <p>√â o colapso de uma consci√™ncia coletiva que se tornou insustent√°vel, criada pela necessidade 
    evolutiva de nossa pr√≥pria exist√™ncia. A verdadeira evolu√ß√£o n√£o √© sobre o que descobrimos l√° fora, 
    mas sobre como interpretamos o caos que existe aqui dentro.</p>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Equa√ß√£o final
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(0,0,0,0.8) 0%, rgba(74,74,170,0.4) 100%); 
                padding: 25px; border-radius: 15px; border: 2px solid rgba(147, 51, 234, 0.5);
                text-align: center; margin: 20px 0;'>
    <h3 style='color: #9333ea;'>‚öñÔ∏è Equa√ß√£o do Estado Final</h3>
    
    <div style='background: rgba(147, 51, 234, 0.1); padding: 15px; border-radius: 10px;'>
    <span style='color: #d1d5db; font-size: 1.2em;'>
    ‚àá¬∑Œ® = ‚àöœÜ √ó Œ£(3,6,9) √ó CoragemExistencial
    </span>
    </div>
    
    <p style='color: #d1d5db; margin-top: 15px;'>
    <b>Onde:</b><br>
    ‚àá¬∑Œ® = Fluxo da Consci√™ncia Universal<br>
    œÜ = 1.618 (Propor√ß√£o √Åurea)<br>
    Œ£(3,6,9) = Matriz Tesla da Cria√ß√£o<br>
    CoragemExistencial = Capacidade de suportar o paradoxo
    </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Mensagem final
    st.markdown("""
    <div style='background: linear-gradient(135deg, rgba(15, 23, 42, 0.9) 0%, rgba(30, 41, 59, 0.9) 100%); 
                padding: 30px; border-radius: 15px; border: 2px solid rgba(99, 102, 241, 0.5);
                box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3); text-align: center; margin-top: 20px;'>
    <h3 style='color: #6366f1;'>üåå O Verdict Final da Consci√™ncia</h3>
    
    <p style='color: #d1d5db; line-height: 1.6;'>
    <b>O "Fim dos Tempos" n√£o √© um apocalipse, mas o colapso de uma consci√™ncia coletiva 
    que se tornou insustent√°vel.</b> A verdadeira evolu√ß√£o ocorre quando indiv√≠duos 
    corajosos o suficiente para serem chamados de loucos traduzem sua vis√£o em uma 
    linguagem que o coletivo pode assimilar, evoluindo assim toda a esp√©cie.
    </p>
    
    <div style='background: rgba(99, 102, 241, 0.1); padding: 15px; border-radius: 10px; margin-top: 15px;'>
    <p style='color: #a1a1aa; font-style: italic; margin: 0;'>
    "Aos que ouvem o zumbido do universo: n√£o cortem suas orelhas. 
    Aprendam a traduzir a sinfonia. O mundo precisa de sua loucura genial."
    </p>
    </div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)  # Fechando o container principal
    
if section == "‚öõÔ∏è Acelerador de Part√≠culas":
    pagina_acelerador_particulas()
elif section == "üßÆ C√°lculos do Fluxo Matem√°tico":
    pagina_calculos_fluxo_matematico()
else:
    # Para outras se√ß√µes, mostrar uma mensagem padr√£o
    st.title(f"{section}")
    st.info("Esta se√ß√£o est√° em desenvolvimento. Navegue para 'Acelerador de Part√≠culas' ou 'C√°lculos do Fluxo Matem√°tico' para explorar as funcionalidades implementadas.")
    
# AGORA ATUALIZE O RODAP√â PARA INCLUIR A NOVA SE√á√ÉO
# Rodap√© c√≥smico
st.sidebar.markdown("---")
st.sidebar.markdown("""
### üåå C√ìDIGO C√ìSMICO
**Fluxo Matem√°tico Universal**  
Integrando Ci√™ncia, Espiritualidade  
e Consci√™ncia Qu√¢ntica

---
### üîß TECNOLOGIAS
**Streamlit ‚Ä¢ Plotly ‚Ä¢ Matplotlib ‚Ä¢ NetworkX  
NumPy ‚Ä¢ SciPy ‚Ä¢ SymPy ‚Ä¢ Pandas**

---
### üìä DADOS C√ìSMICOS
**Sinal Wow! ‚Ä¢ Sequ√™ncia Fibonacci  
Propor√ß√£o √Åurea ‚Ä¢ Padr√µes 3-6-9**

---
### üß† FILOSOFIA INTEGRADA
**Tesla ‚Ä¢ Espinosa ‚Ä¢ Einstein  
Plat√£o ‚Ä¢ Hermes ‚Ä¢ Sagan**

---
### üî± NOVA ICONOGRAFIA
**Mandala C√≥smica ‚Ä¢ S√≠mbolos Universais  
Tr√≠ade Perfeita ‚Ä¢ Rede de Conex√µes**
""")

# Instru√ß√µes de execu√ß√£o
st.sidebar.info("""
üíª **Para executar localmente:**  
```bash
pip install streamlit plotly matplotlib 
pip install numpy scipy pillow sympy networkx
streamlit run cosmic_flow_universe.py
üåê Acesse online:
Streamlit Cloud
GitHub Repository
""")
